
ContTemp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000176  00800100  00002778  0000280c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002778  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fd  00800276  00800276  00002982  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002982  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000029b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006e0  00000000  00000000  000029f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f30d  00000000  00000000  000030d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002972  00000000  00000000  000123e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003e3f  00000000  00000000  00014d53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000016b0  00000000  00000000  00018b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003c04  00000000  00000000  0001a244  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008146  00000000  00000000  0001de48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006f0  00000000  00000000  00025f8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
       4:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
       8:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
       c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      10:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      14:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      18:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      1c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      20:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      24:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      28:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      2c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      30:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      34:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__vector_13>
      38:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      3c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      40:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <__vector_16>
      44:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      48:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__vector_18>
      4c:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__vector_19>
      50:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      54:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      58:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      5c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      60:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      64:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <_ZL15dscrc2x16_table>:
      c2:	00 5e bc e2 61 3f dd 83 c2 9c 7e 20 a3 fd 1f 41     .^..a?....~ ...A
      d2:	00 9d 23 be 46 db 65 f8 8c 11 af 32 ca 57 e9 74     ..#.F.e....2.W.t

000000e2 <__ctors_start>:
      e2:	d6 01       	movw	r26, r12
      e4:	3f 09       	sbc	r19, r15

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d8 e0       	ldi	r29, 0x08	; 8
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
      f2:	12 e0       	ldi	r17, 0x02	; 2
      f4:	a0 e0       	ldi	r26, 0x00	; 0
      f6:	b1 e0       	ldi	r27, 0x01	; 1
      f8:	e8 e7       	ldi	r30, 0x78	; 120
      fa:	f7 e2       	ldi	r31, 0x27	; 39
      fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x10>
      fe:	05 90       	lpm	r0, Z+
     100:	0d 92       	st	X+, r0
     102:	a6 37       	cpi	r26, 0x76	; 118
     104:	b1 07       	cpc	r27, r17
     106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0xc>

00000108 <__do_clear_bss>:
     108:	23 e0       	ldi	r18, 0x03	; 3
     10a:	a6 e7       	ldi	r26, 0x76	; 118
     10c:	b2 e0       	ldi	r27, 0x02	; 2
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	a3 37       	cpi	r26, 0x73	; 115
     114:	b2 07       	cpc	r27, r18
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>

00000118 <__do_global_ctors>:
     118:	10 e0       	ldi	r17, 0x00	; 0
     11a:	c3 e7       	ldi	r28, 0x73	; 115
     11c:	d0 e0       	ldi	r29, 0x00	; 0
     11e:	04 c0       	rjmp	.+8      	; 0x128 <__do_global_ctors+0x10>
     120:	21 97       	sbiw	r28, 0x01	; 1
     122:	fe 01       	movw	r30, r28
     124:	0e 94 b4 13 	call	0x2768	; 0x2768 <__tablejump2__>
     128:	c1 37       	cpi	r28, 0x71	; 113
     12a:	d1 07       	cpc	r29, r17
     12c:	c9 f7       	brne	.-14     	; 0x120 <__do_global_ctors+0x8>
     12e:	0e 94 6d 09 	call	0x12da	; 0x12da <main>
     132:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <_exit>

00000136 <__bad_interrupt>:
     136:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013a <_Z8Timer1msv>:
	}
	return oldTemperature;
}

void resetTick() {
	tick = 0;
     13a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_ZZ8Timer1msvE9Tempo10ms>
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	19 f0       	breq	.+6      	; 0x148 <_Z8Timer1msv+0xe>
     142:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_ZZ8Timer1msvE9Tempo10ms>
     146:	08 95       	ret
     148:	8a e0       	ldi	r24, 0x0A	; 10
     14a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_ZZ8Timer1msvE9Tempo10ms>
     14e:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__data_end>
     152:	88 23       	and	r24, r24
     154:	49 f0       	breq	.+18     	; 0x168 <_Z8Timer1msv+0x2e>
     156:	81 50       	subi	r24, 0x01	; 1
     158:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <__data_end>
     15c:	81 11       	cpse	r24, r1
     15e:	04 c0       	rjmp	.+8      	; 0x168 <_Z8Timer1msv+0x2e>
     160:	60 e0       	ldi	r22, 0x00	; 0
     162:	8d e0       	ldi	r24, 0x0D	; 13
     164:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <digitalWrite>
     168:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_ZZ8Timer1msvE10Tempo100ms>
     16c:	81 50       	subi	r24, 0x01	; 1
     16e:	19 f0       	breq	.+6      	; 0x176 <_Z8Timer1msv+0x3c>
     170:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZZ8Timer1msvE10Tempo100ms>
     174:	08 95       	ret
     176:	84 e6       	ldi	r24, 0x64	; 100
     178:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZZ8Timer1msvE10Tempo100ms>
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <doUpdate>
     182:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <outputPercentage>
     186:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <outputPercentage+0x1>
     18a:	89 2b       	or	r24, r25
     18c:	41 f0       	breq	.+16     	; 0x19e <_Z8Timer1msv+0x64>
     18e:	61 e0       	ldi	r22, 0x01	; 1
     190:	8d e0       	ldi	r24, 0x0D	; 13
     192:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <digitalWrite>
     196:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <outputPercentage>
     19a:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <__data_end>
     19e:	08 95       	ret

000001a0 <_Z16readSensorAdressPh>:
     1a0:	ef 92       	push	r14
     1a2:	ff 92       	push	r15
     1a4:	0f 93       	push	r16
     1a6:	1f 93       	push	r17
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	ec 01       	movw	r28, r24
     1ae:	8c 01       	movw	r16, r24
     1b0:	08 5f       	subi	r16, 0xF8	; 248
     1b2:	1f 4f       	sbci	r17, 0xFF	; 255
     1b4:	7e 01       	movw	r14, r28
     1b6:	88 81       	ld	r24, Y
     1b8:	80 31       	cpi	r24, 0x10	; 16
     1ba:	30 f4       	brcc	.+12     	; 0x1c8 <_Z16readSensorAdressPh+0x28>
     1bc:	63 e1       	ldi	r22, 0x13	; 19
     1be:	71 e0       	ldi	r23, 0x01	; 1
     1c0:	88 ec       	ldi	r24, 0xC8	; 200
     1c2:	92 e0       	ldi	r25, 0x02	; 2
     1c4:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN5Print5printEPKc>
     1c8:	21 96       	adiw	r28, 0x01	; 1
     1ca:	40 e1       	ldi	r20, 0x10	; 16
     1cc:	50 e0       	ldi	r21, 0x00	; 0
     1ce:	f7 01       	movw	r30, r14
     1d0:	60 81       	ld	r22, Z
     1d2:	88 ec       	ldi	r24, 0xC8	; 200
     1d4:	92 e0       	ldi	r25, 0x02	; 2
     1d6:	0e 94 30 0a 	call	0x1460	; 0x1460 <_ZN5Print5printEhi>
     1da:	c0 17       	cp	r28, r16
     1dc:	d1 07       	cpc	r29, r17
     1de:	51 f7       	brne	.-44     	; 0x1b4 <_Z16readSensorAdressPh+0x14>
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	1f 91       	pop	r17
     1e6:	0f 91       	pop	r16
     1e8:	ff 90       	pop	r15
     1ea:	ef 90       	pop	r14
     1ec:	08 95       	ret

000001ee <_Z12printWelcomev>:
     1ee:	40 e0       	ldi	r20, 0x00	; 0
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	86 e8       	ldi	r24, 0x86	; 134
     1f4:	92 e0       	ldi	r25, 0x02	; 2
     1f6:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN13LiquidCrystal9setCursorEhh>
     1fa:	65 e1       	ldi	r22, 0x15	; 21
     1fc:	71 e0       	ldi	r23, 0x01	; 1
     1fe:	86 e8       	ldi	r24, 0x86	; 134
     200:	92 e0       	ldi	r25, 0x02	; 2
     202:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <_ZN5Print5printEPKc>

00000206 <_Z10printEmptyi>:
     206:	48 2f       	mov	r20, r24
     208:	60 e0       	ldi	r22, 0x00	; 0
     20a:	86 e8       	ldi	r24, 0x86	; 134
     20c:	92 e0       	ldi	r25, 0x02	; 2
     20e:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN13LiquidCrystal9setCursorEhh>
     212:	66 e2       	ldi	r22, 0x26	; 38
     214:	71 e0       	ldi	r23, 0x01	; 1
     216:	86 e8       	ldi	r24, 0x86	; 134
     218:	92 e0       	ldi	r25, 0x02	; 2
     21a:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <_ZN5Print5printEPKc>

0000021e <_Z10printEmptyiii>:
     21e:	ef 92       	push	r14
     220:	ff 92       	push	r15
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ec 01       	movw	r28, r24
     22a:	7b 01       	movw	r14, r22
     22c:	14 2f       	mov	r17, r20
     22e:	ce 15       	cp	r28, r14
     230:	df 05       	cpc	r29, r15
     232:	74 f4       	brge	.+28     	; 0x250 <_Z10printEmptyiii+0x32>
     234:	41 2f       	mov	r20, r17
     236:	6c 2f       	mov	r22, r28
     238:	86 e8       	ldi	r24, 0x86	; 134
     23a:	92 e0       	ldi	r25, 0x02	; 2
     23c:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN13LiquidCrystal9setCursorEhh>
     240:	65 e3       	ldi	r22, 0x35	; 53
     242:	71 e0       	ldi	r23, 0x01	; 1
     244:	86 e8       	ldi	r24, 0x86	; 134
     246:	92 e0       	ldi	r25, 0x02	; 2
     248:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN5Print5printEPKc>
     24c:	21 96       	adiw	r28, 0x01	; 1
     24e:	ef cf       	rjmp	.-34     	; 0x22e <_Z10printEmptyiii+0x10>
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	1f 91       	pop	r17
     256:	ff 90       	pop	r15
     258:	ef 90       	pop	r14
     25a:	08 95       	ret

0000025c <_Z13incrementTickv>:
     25c:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <tick>
     260:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <tick+0x1>
     264:	01 96       	adiw	r24, 0x01	; 1
     266:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <tick+0x1>
     26a:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <tick>
     26e:	08 95       	ret

00000270 <_Z14getTemperaturev>:
     270:	8f 92       	push	r8
     272:	9f 92       	push	r9
     274:	af 92       	push	r10
     276:	bf 92       	push	r11
     278:	cf 92       	push	r12
     27a:	df 92       	push	r13
     27c:	ef 92       	push	r14
     27e:	ff 92       	push	r15
     280:	6e e9       	ldi	r22, 0x9E	; 158
     282:	72 e0       	ldi	r23, 0x02	; 2
     284:	86 ea       	ldi	r24, 0xA6	; 166
     286:	92 e0       	ldi	r25, 0x02	; 2
     288:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN17DallasTemperature8getTempCEPKh>
     28c:	6b 01       	movw	r12, r22
     28e:	7c 01       	movw	r14, r24
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	a9 01       	movw	r20, r18
     296:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__cmpsf2>
     29a:	87 fd       	sbrc	r24, 7
     29c:	09 c0       	rjmp	.+18     	; 0x2b0 <_Z14getTemperaturev+0x40>
     29e:	c0 92 79 02 	sts	0x0279, r12	; 0x800279 <newTemperature>
     2a2:	d0 92 7a 02 	sts	0x027A, r13	; 0x80027a <newTemperature+0x1>
     2a6:	e0 92 7b 02 	sts	0x027B, r14	; 0x80027b <newTemperature+0x2>
     2aa:	f0 92 7c 02 	sts	0x027C, r15	; 0x80027c <newTemperature+0x3>
     2ae:	08 c0       	rjmp	.+16     	; 0x2c0 <_Z14getTemperaturev+0x50>
     2b0:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <newTemperature>
     2b4:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <newTemperature+0x1>
     2b8:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <newTemperature+0x2>
     2bc:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <newTemperature+0x3>
     2c0:	c0 90 79 02 	lds	r12, 0x0279	; 0x800279 <newTemperature>
     2c4:	d0 90 7a 02 	lds	r13, 0x027A	; 0x80027a <newTemperature+0x1>
     2c8:	e0 90 7b 02 	lds	r14, 0x027B	; 0x80027b <newTemperature+0x2>
     2cc:	f0 90 7c 02 	lds	r15, 0x027C	; 0x80027c <newTemperature+0x3>
     2d0:	80 90 0c 01 	lds	r8, 0x010C	; 0x80010c <oldTemperature>
     2d4:	90 90 0d 01 	lds	r9, 0x010D	; 0x80010d <oldTemperature+0x1>
     2d8:	a0 90 0e 01 	lds	r10, 0x010E	; 0x80010e <oldTemperature+0x2>
     2dc:	b0 90 0f 01 	lds	r11, 0x010F	; 0x80010f <oldTemperature+0x3>
     2e0:	a5 01       	movw	r20, r10
     2e2:	94 01       	movw	r18, r8
     2e4:	c7 01       	movw	r24, r14
     2e6:	b6 01       	movw	r22, r12
     2e8:	0e 94 5a 05 	call	0xab4	; 0xab4 <__subsf3>
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 e8       	ldi	r20, 0x80	; 128
     2f2:	5f e3       	ldi	r21, 0x3F	; 63
     2f4:	0e 94 26 07 	call	0xe4c	; 0xe4c <__gesf2>
     2f8:	18 16       	cp	r1, r24
     2fa:	8c f4       	brge	.+34     	; 0x31e <_Z14getTemperaturev+0xae>
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	40 e8       	ldi	r20, 0x80	; 128
     302:	5f e3       	ldi	r21, 0x3F	; 63
     304:	c5 01       	movw	r24, r10
     306:	b4 01       	movw	r22, r8
     308:	0e 94 5b 05 	call	0xab6	; 0xab6 <__addsf3>
     30c:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <oldTemperature>
     310:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <oldTemperature+0x1>
     314:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <oldTemperature+0x2>
     318:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <oldTemperature+0x3>
     31c:	08 c0       	rjmp	.+16     	; 0x32e <_Z14getTemperaturev+0xbe>
     31e:	c0 92 0c 01 	sts	0x010C, r12	; 0x80010c <oldTemperature>
     322:	d0 92 0d 01 	sts	0x010D, r13	; 0x80010d <oldTemperature+0x1>
     326:	e0 92 0e 01 	sts	0x010E, r14	; 0x80010e <oldTemperature+0x2>
     32a:	f0 92 0f 01 	sts	0x010F, r15	; 0x80010f <oldTemperature+0x3>
     32e:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <oldTemperature>
     332:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <oldTemperature+0x1>
     336:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <oldTemperature+0x2>
     33a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <oldTemperature+0x3>
     33e:	ff 90       	pop	r15
     340:	ef 90       	pop	r14
     342:	df 90       	pop	r13
     344:	cf 90       	pop	r12
     346:	bf 90       	pop	r11
     348:	af 90       	pop	r10
     34a:	9f 90       	pop	r9
     34c:	8f 90       	pop	r8
     34e:	08 95       	ret

00000350 <_Z9getButtonv>:
}

int getButton() {
	analogInput = analogRead(0);
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	0e 94 8a 0c 	call	0x1914	; 0x1914 <analogRead>
     356:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <analogInput+0x1>
     35a:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <analogInput>

	if (analogInput > 1000) return BUTTON_NONE;
     35e:	89 3e       	cpi	r24, 0xE9	; 233
     360:	23 e0       	ldi	r18, 0x03	; 3
     362:	92 07       	cpc	r25, r18
     364:	04 f5       	brge	.+64     	; 0x3a6 <_Z9getButtonv+0x56>
	if (analogInput < 50)   return BUTTON_RIGHT;
     366:	82 33       	cpi	r24, 0x32	; 50
     368:	91 05       	cpc	r25, r1
     36a:	8c f0       	brlt	.+34     	; 0x38e <_Z9getButtonv+0x3e>
	if (analogInput < 250)  return BUTTON_UP;
     36c:	8a 3f       	cpi	r24, 0xFA	; 250
     36e:	91 05       	cpc	r25, r1
     370:	8c f0       	brlt	.+34     	; 0x394 <_Z9getButtonv+0x44>
	if (analogInput < 450)  return BUTTON_DOWN;
     372:	82 3c       	cpi	r24, 0xC2	; 194
     374:	21 e0       	ldi	r18, 0x01	; 1
     376:	92 07       	cpc	r25, r18
     378:	84 f0       	brlt	.+32     	; 0x39a <_Z9getButtonv+0x4a>
	if (analogInput < 650)  return BUTTON_LEFT;
     37a:	8a 38       	cpi	r24, 0x8A	; 138
     37c:	22 e0       	ldi	r18, 0x02	; 2
     37e:	92 07       	cpc	r25, r18
     380:	7c f0       	brlt	.+30     	; 0x3a0 <_Z9getButtonv+0x50>
	if (analogInput < 850)  return BUTTON_SELECT;
     382:	82 35       	cpi	r24, 0x52	; 82
     384:	93 40       	sbci	r25, 0x03	; 3
     386:	7c f4       	brge	.+30     	; 0x3a6 <_Z9getButtonv+0x56>
     388:	84 e0       	ldi	r24, 0x04	; 4
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	08 95       	ret

int getButton() {
	analogInput = analogRead(0);

	if (analogInput > 1000) return BUTTON_NONE;
	if (analogInput < 50)   return BUTTON_RIGHT;
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	08 95       	ret
	if (analogInput < 250)  return BUTTON_UP;
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	08 95       	ret
	if (analogInput < 450)  return BUTTON_DOWN;
     39a:	82 e0       	ldi	r24, 0x02	; 2
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	08 95       	ret
	if (analogInput < 650)  return BUTTON_LEFT;
     3a0:	83 e0       	ldi	r24, 0x03	; 3
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	08 95       	ret
	if (analogInput < 850)  return BUTTON_SELECT;

	return BUTTON_NONE;
     3a6:	85 e0       	ldi	r24, 0x05	; 5
     3a8:	90 e0       	ldi	r25, 0x00	; 0
}
     3aa:	08 95       	ret

000003ac <_GLOBAL__sub_I_oneWire>:
			display.print("%");
		} else {
			incrementTick();
		}
	}
     3ac:	cf 92       	push	r12
     3ae:	ef 92       	push	r14
     3b0:	0f 93       	push	r16
    bool LastDeviceFlag;
#endif

  public:
    OneWire() { }
    OneWire(uint8_t pin) { begin(pin); }
     3b2:	63 e0       	ldi	r22, 0x03	; 3
     3b4:	8a eb       	ldi	r24, 0xBA	; 186
     3b6:	92 e0       	ldi	r25, 0x02	; 2
     3b8:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <_ZN7OneWire5beginEh>
#define CONST_TEMPERATURA_MAXIMA 100;

// Define uma instancia do oneWire para comunicacao com o sensor
OneWire oneWire(ONE_WIRE_BUS);

DallasTemperature sensors(&oneWire);
     3bc:	6a eb       	ldi	r22, 0xBA	; 186
     3be:	72 e0       	ldi	r23, 0x02	; 2
     3c0:	86 ea       	ldi	r24, 0xA6	; 166
     3c2:	92 e0       	ldi	r25, 0x02	; 2
     3c4:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <_ZN17DallasTemperatureC1EP7OneWire>
DeviceAddress sensorAdress;
const int outputPin = LED_BUILTIN;  // the pin with a LED

// select the pins used on the dispaly panel
LiquidCrystal display(8, 9, 4, 5, 6, 7);
     3c8:	87 e0       	ldi	r24, 0x07	; 7
     3ca:	c8 2e       	mov	r12, r24
     3cc:	96 e0       	ldi	r25, 0x06	; 6
     3ce:	e9 2e       	mov	r14, r25
     3d0:	05 e0       	ldi	r16, 0x05	; 5
     3d2:	24 e0       	ldi	r18, 0x04	; 4
     3d4:	49 e0       	ldi	r20, 0x09	; 9
     3d6:	68 e0       	ldi	r22, 0x08	; 8
     3d8:	86 e8       	ldi	r24, 0x86	; 134
     3da:	92 e0       	ldi	r25, 0x02	; 2
     3dc:	0e 94 11 11 	call	0x2222	; 0x2222 <_ZN13LiquidCrystalC1Ehhhhhh>
			display.print("%");
		} else {
			incrementTick();
		}
	}
     3e0:	0f 91       	pop	r16
     3e2:	ef 90       	pop	r14
     3e4:	cf 90       	pop	r12
     3e6:	08 95       	ret

000003e8 <_Z9printMenuv>:
	display.setCursor(0, 0);
	display.print("Menus do Cowboy ");
}

void printMenu() {
	switch (selectedMenu) {
     3e8:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <selectedMenu>
     3ec:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <selectedMenu+0x1>
			display.print("Selec. ");
			display.write(byte(0));
			display.print("C max.  ");
			break;
		case 1:	
			display.setCursor(0, 1);
     3f0:	41 e0       	ldi	r20, 0x01	; 1
     3f2:	60 e0       	ldi	r22, 0x00	; 0
	display.setCursor(0, 0);
	display.print("Menus do Cowboy ");
}

void printMenu() {
	switch (selectedMenu) {
     3f4:	81 30       	cpi	r24, 0x01	; 1
     3f6:	91 05       	cpc	r25, r1
     3f8:	b9 f0       	breq	.+46     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     3fa:	82 30       	cpi	r24, 0x02	; 2
     3fc:	91 05       	cpc	r25, r1
     3fe:	d9 f0       	breq	.+54     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     400:	89 2b       	or	r24, r25
     402:	01 f5       	brne	.+64     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
		case 0:
			display.setCursor(0, 1);
     404:	86 e8       	ldi	r24, 0x86	; 134
     406:	92 e0       	ldi	r25, 0x02	; 2
     408:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN13LiquidCrystal9setCursorEhh>
			display.print("Selec. ");
     40c:	67 e3       	ldi	r22, 0x37	; 55
     40e:	71 e0       	ldi	r23, 0x01	; 1
     410:	86 e8       	ldi	r24, 0x86	; 134
     412:	92 e0       	ldi	r25, 0x02	; 2
     414:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN5Print5printEPKc>
			display.write(byte(0));
     418:	60 e0       	ldi	r22, 0x00	; 0
     41a:	86 e8       	ldi	r24, 0x86	; 134
     41c:	92 e0       	ldi	r25, 0x02	; 2
     41e:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN13LiquidCrystal5writeEh>
			display.print("C max.  ");
     422:	6f e3       	ldi	r22, 0x3F	; 63
     424:	71 e0       	ldi	r23, 0x01	; 1
     426:	14 c0       	rjmp	.+40     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
			break;
		case 1:	
			display.setCursor(0, 1);
     428:	86 e8       	ldi	r24, 0x86	; 134
     42a:	92 e0       	ldi	r25, 0x02	; 2
     42c:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN13LiquidCrystal9setCursorEhh>
			display.print("Selec. % saida  ");
     430:	68 e4       	ldi	r22, 0x48	; 72
     432:	71 e0       	ldi	r23, 0x01	; 1
     434:	0d c0       	rjmp	.+26     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
			break;
		case 2:
			display.setCursor(0, 1);
     436:	86 e8       	ldi	r24, 0x86	; 134
     438:	92 e0       	ldi	r25, 0x02	; 2
     43a:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN13LiquidCrystal9setCursorEhh>
			display.print("Monitoramento   ");
     43e:	69 e5       	ldi	r22, 0x59	; 89
     440:	71 e0       	ldi	r23, 0x01	; 1
     442:	06 c0       	rjmp	.+12     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
			break;
		default:
			display.setCursor(0, 1);
     444:	86 e8       	ldi	r24, 0x86	; 134
     446:	92 e0       	ldi	r25, 0x02	; 2
     448:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN13LiquidCrystal9setCursorEhh>
			display.print("                ");
     44c:	66 e2       	ldi	r22, 0x26	; 38
     44e:	71 e0       	ldi	r23, 0x01	; 1
     450:	86 e8       	ldi	r24, 0x86	; 134
     452:	92 e0       	ldi	r25, 0x02	; 2
     454:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <_ZN5Print5printEPKc>

00000458 <_Z19ManualPercentOffsetv>:
	}
	return oldTemperature;
}

void resetTick() {
	tick = 0;
     458:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <tick+0x1>
     45c:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <tick>
void ManualPercentOffset(void) {
	static int key = BUTTON_NONE;

	resetTick();

	printEmpty(0);
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 03 01 	call	0x206	; 0x206 <_Z10printEmptyi>
	printEmpty(1);
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 03 01 	call	0x206	; 0x206 <_Z10printEmptyi>
	
	display.setCursor(0, 0);
     470:	40 e0       	ldi	r20, 0x00	; 0
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	86 e8       	ldi	r24, 0x86	; 134
     476:	92 e0       	ldi	r25, 0x02	; 2
     478:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN13LiquidCrystal9setCursorEhh>
	display.print("Ajuste % saida");
     47c:	6a e6       	ldi	r22, 0x6A	; 106
     47e:	71 e0       	ldi	r23, 0x01	; 1
     480:	86 e8       	ldi	r24, 0x86	; 134
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN5Print5printEPKc>

	display.setCursor(0, 1);
     488:	41 e0       	ldi	r20, 0x01	; 1
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	86 e8       	ldi	r24, 0x86	; 134
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN13LiquidCrystal9setCursorEhh>
	display.print("%: ");
     494:	69 e7       	ldi	r22, 0x79	; 121
     496:	71 e0       	ldi	r23, 0x01	; 1
     498:	86 e8       	ldi	r24, 0x86	; 134
     49a:	92 e0       	ldi	r25, 0x02	; 2
     49c:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN5Print5printEPKc>

	while (true) {
		key = getButton();
     4a0:	0e 94 a8 01 	call	0x350	; 0x350 <_Z9getButtonv>

		if (tick > 1440) {
     4a4:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <tick>
     4a8:	30 91 78 02 	lds	r19, 0x0278	; 0x800278 <tick+0x1>
     4ac:	21 3a       	cpi	r18, 0xA1	; 161
     4ae:	35 40       	sbci	r19, 0x05	; 5
     4b0:	0c f4       	brge	.+2      	; 0x4b4 <_Z19ManualPercentOffsetv+0x5c>
     4b2:	42 c0       	rjmp	.+132    	; 0x538 <_Z19ManualPercentOffsetv+0xe0>
	}
	return oldTemperature;
}

void resetTick() {
	tick = 0;
     4b4:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <tick+0x1>
     4b8:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <tick>
	while (true) {
		key = getButton();

		if (tick > 1440) {
			resetTick();
			switch (key) {
     4bc:	82 30       	cpi	r24, 0x02	; 2
     4be:	91 05       	cpc	r25, r1
     4c0:	71 f0       	breq	.+28     	; 0x4de <_Z19ManualPercentOffsetv+0x86>
     4c2:	84 30       	cpi	r24, 0x04	; 4
     4c4:	91 05       	cpc	r25, r1
     4c6:	b9 f0       	breq	.+46     	; 0x4f6 <_Z19ManualPercentOffsetv+0x9e>
     4c8:	01 97       	sbiw	r24, 0x01	; 1
     4ca:	c9 f4       	brne	.+50     	; 0x4fe <_Z19ManualPercentOffsetv+0xa6>
				case BUTTON_UP:
					if (outputPercentage < 100) {
     4cc:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <outputPercentage>
     4d0:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <outputPercentage+0x1>
     4d4:	84 36       	cpi	r24, 0x64	; 100
     4d6:	91 05       	cpc	r25, r1
     4d8:	94 f4       	brge	.+36     	; 0x4fe <_Z19ManualPercentOffsetv+0xa6>
						++outputPercentage;
     4da:	01 96       	adiw	r24, 0x01	; 1
     4dc:	07 c0       	rjmp	.+14     	; 0x4ec <_Z19ManualPercentOffsetv+0x94>
					}
					break;
				case BUTTON_DOWN:
					if (outputPercentage) {
     4de:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <outputPercentage>
     4e2:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <outputPercentage+0x1>
     4e6:	00 97       	sbiw	r24, 0x00	; 0
     4e8:	51 f0       	breq	.+20     	; 0x4fe <_Z19ManualPercentOffsetv+0xa6>
						--outputPercentage;
     4ea:	01 97       	sbiw	r24, 0x01	; 1
     4ec:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <outputPercentage+0x1>
     4f0:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <outputPercentage>
     4f4:	04 c0       	rjmp	.+8      	; 0x4fe <_Z19ManualPercentOffsetv+0xa6>
					}
					break;
				case BUTTON_SELECT:
					printWelcome();
     4f6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_Z12printWelcomev>
					printMenu();
     4fa:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <_Z9printMenuv>
					return;
				default:
					break;
			}
		
			printEmpty(1);
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 03 01 	call	0x206	; 0x206 <_Z10printEmptyi>

			display.setCursor(0, 1);
     506:	41 e0       	ldi	r20, 0x01	; 1
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	86 e8       	ldi	r24, 0x86	; 134
     50c:	92 e0       	ldi	r25, 0x02	; 2
     50e:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN13LiquidCrystal9setCursorEhh>
			display.print("%: ");
     512:	69 e7       	ldi	r22, 0x79	; 121
     514:	71 e0       	ldi	r23, 0x01	; 1
     516:	86 e8       	ldi	r24, 0x86	; 134
     518:	92 e0       	ldi	r25, 0x02	; 2
     51a:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN5Print5printEPKc>
			display.print(outputPercentage);
     51e:	60 91 7d 02 	lds	r22, 0x027D	; 0x80027d <outputPercentage>
     522:	70 91 7e 02 	lds	r23, 0x027E	; 0x80027e <outputPercentage+0x1>
     526:	4a e0       	ldi	r20, 0x0A	; 10
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	86 e8       	ldi	r24, 0x86	; 134
     52c:	92 e0       	ldi	r25, 0x02	; 2
     52e:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN5Print5printEii>
			display.print("%");
     532:	6d e7       	ldi	r22, 0x7D	; 125
     534:	71 e0       	ldi	r23, 0x01	; 1
     536:	b0 cf       	rjmp	.-160    	; 0x498 <_Z19ManualPercentOffsetv+0x40>
		} else {
			incrementTick();
     538:	0e 94 2e 01 	call	0x25c	; 0x25c <_Z13incrementTickv>
     53c:	b1 cf       	rjmp	.-158    	; 0x4a0 <_Z19ManualPercentOffsetv+0x48>

0000053e <_Z10Monitoringv>:
			digitalWrite(outputPin, 0);
		}
	}
}

void Monitoring(void) {
     53e:	8f 92       	push	r8
     540:	9f 92       	push	r9
     542:	af 92       	push	r10
     544:	bf 92       	push	r11
     546:	cf 92       	push	r12
     548:	df 92       	push	r13
     54a:	ef 92       	push	r14
     54c:	ff 92       	push	r15
	}
	return oldTemperature;
}

void resetTick() {
	tick = 0;
     54e:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <tick+0x1>
     552:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <tick>
void Monitoring(void) {
	static int key = BUTTON_NONE;

	resetTick();
	
	printEmpty(0);
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 03 01 	call	0x206	; 0x206 <_Z10printEmptyi>
	printEmpty(1);
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 03 01 	call	0x206	; 0x206 <_Z10printEmptyi>

	display.setCursor(0, 0);
     566:	40 e0       	ldi	r20, 0x00	; 0
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	86 e8       	ldi	r24, 0x86	; 134
     56c:	92 e0       	ldi	r25, 0x02	; 2
     56e:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN13LiquidCrystal9setCursorEhh>
	display.print("Temp.:          ");
     572:	6f e7       	ldi	r22, 0x7F	; 127
     574:	71 e0       	ldi	r23, 0x01	; 1
     576:	86 e8       	ldi	r24, 0x86	; 134
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN5Print5printEPKc>

	display.setCursor(0, 1);
     57e:	41 e0       	ldi	r20, 0x01	; 1
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	86 e8       	ldi	r24, 0x86	; 134
     584:	92 e0       	ldi	r25, 0x02	; 2
     586:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN13LiquidCrystal9setCursorEhh>
	display.print("Max:            ");
     58a:	60 e9       	ldi	r22, 0x90	; 144
     58c:	71 e0       	ldi	r23, 0x01	; 1
     58e:	86 e8       	ldi	r24, 0x86	; 134
     590:	92 e0       	ldi	r25, 0x02	; 2
     592:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN5Print5printEPKc>
	display.print("Aquecendo:      ");
     596:	61 ea       	ldi	r22, 0xA1	; 161
     598:	71 e0       	ldi	r23, 0x01	; 1
     59a:	86 e8       	ldi	r24, 0x86	; 134
     59c:	92 e0       	ldi	r25, 0x02	; 2
     59e:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN5Print5printEPKc>

	while (true) {
		key = getButton();
     5a2:	0e 94 a8 01 	call	0x350	; 0x350 <_Z9getButtonv>
	
		if (tick > 2880) {
     5a6:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <tick>
     5aa:	30 91 78 02 	lds	r19, 0x0278	; 0x800278 <tick+0x1>
     5ae:	21 34       	cpi	r18, 0x41	; 65
     5b0:	3b 40       	sbci	r19, 0x0B	; 11
     5b2:	0c f4       	brge	.+2      	; 0x5b6 <_Z10Monitoringv+0x78>
     5b4:	89 c0       	rjmp	.+274    	; 0x6c8 <_Z10Monitoringv+0x18a>
	}
	return oldTemperature;
}

void resetTick() {
	tick = 0;
     5b6:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <tick+0x1>
     5ba:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <tick>
	while (true) {
		key = getButton();
	
		if (tick > 2880) {
			resetTick();
			switch (key) {
     5be:	04 97       	sbiw	r24, 0x04	; 4
     5c0:	61 f4       	brne	.+24     	; 0x5da <_Z10Monitoringv+0x9c>
				case BUTTON_SELECT:
					printWelcome();
     5c2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_Z12printWelcomev>
			display.print("%");			
		} else {
			incrementTick();
		}
	}
}
     5c6:	ff 90       	pop	r15
     5c8:	ef 90       	pop	r14
     5ca:	df 90       	pop	r13
     5cc:	cf 90       	pop	r12
     5ce:	bf 90       	pop	r11
     5d0:	af 90       	pop	r10
     5d2:	9f 90       	pop	r9
     5d4:	8f 90       	pop	r8
		if (tick > 2880) {
			resetTick();
			switch (key) {
				case BUTTON_SELECT:
					printWelcome();
					printMenu();
     5d6:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <_Z9printMenuv>
					return;
				default:
					break;
			}

			sensors.requestTemperatures();
     5da:	86 ea       	ldi	r24, 0xA6	; 166
     5dc:	92 e0       	ldi	r25, 0x02	; 2
     5de:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <_ZN17DallasTemperature19requestTemperaturesEv>

			float rawTemperature = getTemperature();
     5e2:	0e 94 38 01 	call	0x270	; 0x270 <_Z14getTemperaturev>
     5e6:	4b 01       	movw	r8, r22
     5e8:	5c 01       	movw	r10, r24

			printEmpty(7, 16, 0);
     5ea:	40 e0       	ldi	r20, 0x00	; 0
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	60 e1       	ldi	r22, 0x10	; 16
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	87 e0       	ldi	r24, 0x07	; 7
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 0f 01 	call	0x21e	; 0x21e <_Z10printEmptyiii>
			printEmpty(5, 16, 1);
     5fa:	41 e0       	ldi	r20, 0x01	; 1
     5fc:	50 e0       	ldi	r21, 0x00	; 0
     5fe:	60 e1       	ldi	r22, 0x10	; 16
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	85 e0       	ldi	r24, 0x05	; 5
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 0f 01 	call	0x21e	; 0x21e <_Z10printEmptyiii>

			display.setCursor(7, 0);
     60a:	40 e0       	ldi	r20, 0x00	; 0
     60c:	67 e0       	ldi	r22, 0x07	; 7
     60e:	86 e8       	ldi	r24, 0x86	; 134
     610:	92 e0       	ldi	r25, 0x02	; 2
     612:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN13LiquidCrystal9setCursorEhh>
			display.print(rawTemperature);
     616:	22 e0       	ldi	r18, 0x02	; 2
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	b5 01       	movw	r22, r10
     61c:	a4 01       	movw	r20, r8
     61e:	86 e8       	ldi	r24, 0x86	; 134
     620:	92 e0       	ldi	r25, 0x02	; 2
     622:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Print5printEdi>
			display.write(byte(0));
     626:	60 e0       	ldi	r22, 0x00	; 0
     628:	86 e8       	ldi	r24, 0x86	; 134
     62a:	92 e0       	ldi	r25, 0x02	; 2
     62c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN13LiquidCrystal5writeEh>
			display.print("C");
     630:	62 eb       	ldi	r22, 0xB2	; 178
     632:	71 e0       	ldi	r23, 0x01	; 1
     634:	86 e8       	ldi	r24, 0x86	; 134
     636:	92 e0       	ldi	r25, 0x02	; 2
     638:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN5Print5printEPKc>

			display.setCursor(5, 1);
     63c:	41 e0       	ldi	r20, 0x01	; 1
     63e:	65 e0       	ldi	r22, 0x05	; 5
     640:	86 e8       	ldi	r24, 0x86	; 134
     642:	92 e0       	ldi	r25, 0x02	; 2
     644:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN13LiquidCrystal9setCursorEhh>
			display.print(setTemperature);
     648:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <setTemperature>
     64c:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <setTemperature+0x1>
     650:	4a e0       	ldi	r20, 0x0A	; 10
     652:	50 e0       	ldi	r21, 0x00	; 0
     654:	86 e8       	ldi	r24, 0x86	; 134
     656:	92 e0       	ldi	r25, 0x02	; 2
     658:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN5Print5printEii>
			display.write(byte(0));
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	86 e8       	ldi	r24, 0x86	; 134
     660:	92 e0       	ldi	r25, 0x02	; 2
     662:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN13LiquidCrystal5writeEh>
			display.print("C");
     666:	62 eb       	ldi	r22, 0xB2	; 178
     668:	71 e0       	ldi	r23, 0x01	; 1
     66a:	86 e8       	ldi	r24, 0x86	; 134
     66c:	92 e0       	ldi	r25, 0x02	; 2
     66e:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN5Print5printEPKc>

			display.setCursor(12, 1);
     672:	41 e0       	ldi	r20, 0x01	; 1
     674:	6c e0       	ldi	r22, 0x0C	; 12
     676:	86 e8       	ldi	r24, 0x86	; 134
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN13LiquidCrystal9setCursorEhh>
			display.print((int) ((((float) setTemperature - rawTemperature) / (float) setTemperature) * 100));
     67e:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <setTemperature>
     682:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <setTemperature+0x1>
     686:	07 2e       	mov	r0, r23
     688:	00 0c       	add	r0, r0
     68a:	88 0b       	sbc	r24, r24
     68c:	99 0b       	sbc	r25, r25
     68e:	0e 94 76 06 	call	0xcec	; 0xcec <__floatsisf>
     692:	6b 01       	movw	r12, r22
     694:	7c 01       	movw	r14, r24
     696:	a5 01       	movw	r20, r10
     698:	94 01       	movw	r18, r8
     69a:	0e 94 5a 05 	call	0xab4	; 0xab4 <__subsf3>
     69e:	a7 01       	movw	r20, r14
     6a0:	96 01       	movw	r18, r12
     6a2:	0e 94 cc 05 	call	0xb98	; 0xb98 <__divsf3>
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	48 ec       	ldi	r20, 0xC8	; 200
     6ac:	52 e4       	ldi	r21, 0x42	; 66
     6ae:	0e 94 2b 07 	call	0xe56	; 0xe56 <__mulsf3>
     6b2:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__fixsfsi>
     6b6:	4a e0       	ldi	r20, 0x0A	; 10
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	86 e8       	ldi	r24, 0x86	; 134
     6bc:	92 e0       	ldi	r25, 0x02	; 2
     6be:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN5Print5printEii>
			display.print("%");			
     6c2:	6d e7       	ldi	r22, 0x7D	; 125
     6c4:	71 e0       	ldi	r23, 0x01	; 1
     6c6:	69 cf       	rjmp	.-302    	; 0x59a <_Z10Monitoringv+0x5c>
		} else {
			incrementTick();
     6c8:	0e 94 2e 01 	call	0x25c	; 0x25c <_Z13incrementTickv>
     6cc:	6a cf       	rjmp	.-300    	; 0x5a2 <_Z10Monitoringv+0x64>

000006ce <setup>:
		Serial.print(deviceAddress[i], HEX);
	}
}

void setup(void) {
	display.begin(16, 2);
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	42 e0       	ldi	r20, 0x02	; 2
     6d2:	60 e1       	ldi	r22, 0x10	; 16
     6d4:	86 e8       	ldi	r24, 0x86	; 134
     6d6:	92 e0       	ldi	r25, 0x02	; 2
     6d8:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN13LiquidCrystal5beginEhhh>
	display.setCursor(0, 0);
     6dc:	40 e0       	ldi	r20, 0x00	; 0
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	86 e8       	ldi	r24, 0x86	; 134
     6e2:	92 e0       	ldi	r25, 0x02	; 2
     6e4:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN13LiquidCrystal9setCursorEhh>
	display.print("Cont. do Cowboy");
     6e8:	64 eb       	ldi	r22, 0xB4	; 180
     6ea:	71 e0       	ldi	r23, 0x01	; 1
     6ec:	86 e8       	ldi	r24, 0x86	; 134
     6ee:	92 e0       	ldi	r25, 0x02	; 2
     6f0:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN5Print5printEPKc>

	setTemperature = 30;
     6f4:	8e e1       	ldi	r24, 0x1E	; 30
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <setTemperature+0x1>
     6fc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <setTemperature>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     700:	26 e0       	ldi	r18, 0x06	; 6
     702:	40 e8       	ldi	r20, 0x80	; 128
     704:	55 e2       	ldi	r21, 0x25	; 37
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	88 ec       	ldi	r24, 0xC8	; 200
     70c:	92 e0       	ldi	r25, 0x02	; 2
     70e:	0e 94 74 08 	call	0x10e8	; 0x10e8 <_ZN14HardwareSerial5beginEmh>

	Serial.begin(9600);
	sensors.begin();
     712:	86 ea       	ldi	r24, 0xA6	; 166
     714:	92 e0       	ldi	r25, 0x02	; 2
     716:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <_ZN17DallasTemperature5beginEv>

	sensorCount = sensors.getDeviceCount();
     71a:	86 ea       	ldi	r24, 0xA6	; 166
     71c:	92 e0       	ldi	r25, 0x02	; 2
     71e:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <_ZN17DallasTemperature14getDeviceCountEv>
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <sensorCount+0x1>
     728:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <sensorCount>

	Serial.println("Localizando sensores DS18B20...");
     72c:	64 ec       	ldi	r22, 0xC4	; 196
     72e:	71 e0       	ldi	r23, 0x01	; 1
     730:	88 ec       	ldi	r24, 0xC8	; 200
     732:	92 e0       	ldi	r25, 0x02	; 2
     734:	0e 94 c8 09 	call	0x1390	; 0x1390 <_ZN5Print7printlnEPKc>
	Serial.print("Foram encontrados ");
     738:	64 ee       	ldi	r22, 0xE4	; 228
     73a:	71 e0       	ldi	r23, 0x01	; 1
     73c:	88 ec       	ldi	r24, 0xC8	; 200
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN5Print5printEPKc>
	Serial.print(sensorCount, DEC);
     744:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <sensorCount>
     748:	70 91 80 02 	lds	r23, 0x0280	; 0x800280 <sensorCount+0x1>
     74c:	4a e0       	ldi	r20, 0x0A	; 10
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	88 ec       	ldi	r24, 0xC8	; 200
     752:	92 e0       	ldi	r25, 0x02	; 2
     754:	0e 94 37 0a 	call	0x146e	; 0x146e <_ZN5Print5printEji>
	Serial.println(" sensores.");
     758:	67 ef       	ldi	r22, 0xF7	; 247
     75a:	71 e0       	ldi	r23, 0x01	; 1
     75c:	88 ec       	ldi	r24, 0xC8	; 200
     75e:	92 e0       	ldi	r25, 0x02	; 2
     760:	0e 94 c8 09 	call	0x1390	; 0x1390 <_ZN5Print7printlnEPKc>

	if (sensorCount) {
     764:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <sensorCount>
     768:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <sensorCount+0x1>
     76c:	89 2b       	or	r24, r25
     76e:	09 f1       	breq	.+66     	; 0x7b2 <setup+0xe4>
		if (!sensors.getAddress(sensorAdress, 0)) {
     770:	40 e0       	ldi	r20, 0x00	; 0
     772:	6e e9       	ldi	r22, 0x9E	; 158
     774:	72 e0       	ldi	r23, 0x02	; 2
     776:	86 ea       	ldi	r24, 0xA6	; 166
     778:	92 e0       	ldi	r25, 0x02	; 2
     77a:	0e 94 75 0d 	call	0x1aea	; 0x1aea <_ZN17DallasTemperature10getAddressEPhh>
     77e:	81 11       	cpse	r24, r1
     780:	06 c0       	rjmp	.+12     	; 0x78e <setup+0xc0>
			Serial.println("Nenhum sensor detectado!");
     782:	62 e0       	ldi	r22, 0x02	; 2
     784:	72 e0       	ldi	r23, 0x02	; 2
     786:	88 ec       	ldi	r24, 0xC8	; 200
     788:	92 e0       	ldi	r25, 0x02	; 2
     78a:	0e 94 c8 09 	call	0x1390	; 0x1390 <_ZN5Print7printlnEPKc>
		}
		Serial.print("Endereco sensor: "); // Mostra o endereco do sensor encontrado no barramento
     78e:	6b e1       	ldi	r22, 0x1B	; 27
     790:	72 e0       	ldi	r23, 0x02	; 2
     792:	88 ec       	ldi	r24, 0xC8	; 200
     794:	92 e0       	ldi	r25, 0x02	; 2
     796:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN5Print5printEPKc>
		readSensorAdress(sensorAdress);
     79a:	8e e9       	ldi	r24, 0x9E	; 158
     79c:	92 e0       	ldi	r25, 0x02	; 2
     79e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z16readSensorAdressPh>
		Serial.println();
     7a2:	88 ec       	ldi	r24, 0xC8	; 200
     7a4:	92 e0       	ldi	r25, 0x02	; 2
     7a6:	0e 94 c4 09 	call	0x1388	; 0x1388 <_ZN5Print7printlnEv>
		Serial.println();
     7aa:	88 ec       	ldi	r24, 0xC8	; 200
     7ac:	92 e0       	ldi	r25, 0x02	; 2
     7ae:	0e 94 c4 09 	call	0x1388	; 0x1388 <_ZN5Print7printlnEv>
	}

	pinMode(outputPin, OUTPUT);
     7b2:	61 e0       	ldi	r22, 0x01	; 1
     7b4:	8d e0       	ldi	r24, 0x0D	; 13
     7b6:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <pinMode>
  public:
    //****************************
    //  Configuration
    //****************************
    void initialize(unsigned long microseconds=1000000) __attribute__((always_inline)) {
	TCCR1B = _BV(WGM13);        // set mode as phase and frequency correct pwm, stop the timer
     7ba:	80 e1       	ldi	r24, 0x10	; 16
     7bc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TCCR1A = 0;                 // clear control register A 
     7c0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	setPeriod(microseconds);
    }
    void setPeriod(unsigned long microseconds) __attribute__((always_inline)) {
	const unsigned long cycles = (F_CPU / 2000000) * microseconds;
	if (cycles < TIMER1_RESOLUTION) {
		clockSelectBits = _BV(CS10);
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = cycles;
     7ca:	20 e4       	ldi	r18, 0x40	; 64
     7cc:	3f e1       	ldi	r19, 0x1F	; 31
     7ce:	30 93 72 03 	sts	0x0372, r19	; 0x800372 <_ZN8TimerOne9pwmPeriodE+0x1>
     7d2:	20 93 71 03 	sts	0x0371, r18	; 0x800371 <_ZN8TimerOne9pwmPeriodE>
		pwmPeriod = cycles / 1024;
	} else {
		clockSelectBits = _BV(CS12) | _BV(CS10);
		pwmPeriod = TIMER1_RESOLUTION - 1;
	}
	ICR1 = pwmPeriod;
     7d6:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
     7da:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	TCCR1B = _BV(WGM13) | clockSelectBits;
     7de:	91 e1       	ldi	r25, 0x11	; 17
     7e0:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

    //****************************
    //  Interrupt Function
    //****************************
    void attachInterrupt(void (*isr)()) __attribute__((always_inline)) {
	isrCallback = isr;
     7e4:	2d e9       	ldi	r18, 0x9D	; 157
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	30 93 6f 03 	sts	0x036F, r19	; 0x80036f <_ZN8TimerOne11isrCallbackE+0x1>
     7ec:	20 93 6e 03 	sts	0x036E, r18	; 0x80036e <_ZN8TimerOne11isrCallbackE>
	TIMSK1 = _BV(TOIE1);
     7f0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>

	Timer1.initialize(1000);//Uma interrupção a cada 1 ms.
	Timer1.attachInterrupt(Timer1ms); //Cria a interrupção "Timer1ms"

	display.createChar(0, grau);//Cria o caractere customizado com o simbolo do grau
     7f4:	44 e0       	ldi	r20, 0x04	; 4
     7f6:	51 e0       	ldi	r21, 0x01	; 1
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	86 e8       	ldi	r24, 0x86	; 134
     7fc:	92 e0       	ldi	r25, 0x02	; 2
     7fe:	0e 94 31 11 	call	0x2262	; 0x2262 <_ZN13LiquidCrystal10createCharEhPh>

	Monitoring();
     802:	0c 94 9f 02 	jmp	0x53e	; 0x53e <_Z10Monitoringv>

00000806 <_Z18ManualTargetOffsetv>:
	}
	return oldTemperature;
}

void resetTick() {
	tick = 0;
     806:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <tick+0x1>
     80a:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <tick>
void ManualTargetOffset(void) {
	static int key = BUTTON_NONE;

	resetTick();

	printEmpty(0);
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	0e 94 03 01 	call	0x206	; 0x206 <_Z10printEmptyi>
	printEmpty(1);
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 03 01 	call	0x206	; 0x206 <_Z10printEmptyi>

	display.setCursor(0, 0);
     81e:	40 e0       	ldi	r20, 0x00	; 0
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	86 e8       	ldi	r24, 0x86	; 134
     824:	92 e0       	ldi	r25, 0x02	; 2
     826:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN13LiquidCrystal9setCursorEhh>
	display.print("Ajuste ");
     82a:	6d e2       	ldi	r22, 0x2D	; 45
     82c:	72 e0       	ldi	r23, 0x02	; 2
     82e:	86 e8       	ldi	r24, 0x86	; 134
     830:	92 e0       	ldi	r25, 0x02	; 2
     832:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN5Print5printEPKc>
	display.write(byte(0));
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	86 e8       	ldi	r24, 0x86	; 134
     83a:	92 e0       	ldi	r25, 0x02	; 2
     83c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN13LiquidCrystal5writeEh>
	display.print("C maximo");
     840:	65 e3       	ldi	r22, 0x35	; 53
     842:	72 e0       	ldi	r23, 0x02	; 2
     844:	86 e8       	ldi	r24, 0x86	; 134
     846:	92 e0       	ldi	r25, 0x02	; 2
     848:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN5Print5printEPKc>

	while (true) {
		key = getButton();
     84c:	0e 94 a8 01 	call	0x350	; 0x350 <_Z9getButtonv>

		if (tick > 1440) {
     850:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <tick>
     854:	30 91 78 02 	lds	r19, 0x0278	; 0x800278 <tick+0x1>
     858:	21 3a       	cpi	r18, 0xA1	; 161
     85a:	35 40       	sbci	r19, 0x05	; 5
     85c:	0c f4       	brge	.+2      	; 0x860 <_Z18ManualTargetOffsetv+0x5a>
     85e:	4d c0       	rjmp	.+154    	; 0x8fa <_Z18ManualTargetOffsetv+0xf4>
	}
	return oldTemperature;
}

void resetTick() {
	tick = 0;
     860:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <tick+0x1>
     864:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <tick>
	while (true) {
		key = getButton();

		if (tick > 1440) {
			resetTick();
			switch (key) {
     868:	82 30       	cpi	r24, 0x02	; 2
     86a:	91 05       	cpc	r25, r1
     86c:	91 f0       	breq	.+36     	; 0x892 <_Z18ManualTargetOffsetv+0x8c>
     86e:	84 30       	cpi	r24, 0x04	; 4
     870:	91 05       	cpc	r25, r1
     872:	f9 f0       	breq	.+62     	; 0x8b2 <_Z18ManualTargetOffsetv+0xac>
     874:	01 97       	sbiw	r24, 0x01	; 1
     876:	09 f5       	brne	.+66     	; 0x8ba <_Z18ManualTargetOffsetv+0xb4>
				case BUTTON_UP:
					setTemperature = setTemperature + 1 < 999 ? setTemperature + 1 : 999;
     878:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <setTemperature>
     87c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <setTemperature+0x1>
     880:	86 3e       	cpi	r24, 0xE6	; 230
     882:	23 e0       	ldi	r18, 0x03	; 3
     884:	92 07       	cpc	r25, r18
     886:	14 f4       	brge	.+4      	; 0x88c <_Z18ManualTargetOffsetv+0x86>
     888:	01 96       	adiw	r24, 0x01	; 1
     88a:	0e c0       	rjmp	.+28     	; 0x8a8 <_Z18ManualTargetOffsetv+0xa2>
     88c:	87 ee       	ldi	r24, 0xE7	; 231
     88e:	93 e0       	ldi	r25, 0x03	; 3
     890:	0b c0       	rjmp	.+22     	; 0x8a8 <_Z18ManualTargetOffsetv+0xa2>
					break;
				case BUTTON_DOWN:
					setTemperature = setTemperature - 1 > 0 ? setTemperature - 1 : -999;
     892:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <setTemperature>
     896:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <setTemperature+0x1>
     89a:	82 30       	cpi	r24, 0x02	; 2
     89c:	91 05       	cpc	r25, r1
     89e:	14 f0       	brlt	.+4      	; 0x8a4 <_Z18ManualTargetOffsetv+0x9e>
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <_Z18ManualTargetOffsetv+0xa2>
     8a4:	89 e1       	ldi	r24, 0x19	; 25
     8a6:	9c ef       	ldi	r25, 0xFC	; 252
     8a8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <setTemperature+0x1>
     8ac:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <setTemperature>
					break;
     8b0:	04 c0       	rjmp	.+8      	; 0x8ba <_Z18ManualTargetOffsetv+0xb4>
				case BUTTON_SELECT:
					printWelcome();
     8b2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_Z12printWelcomev>
					printMenu();
     8b6:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <_Z9printMenuv>
					return;
				default:
					break;
			}

			printEmpty(1);
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 03 01 	call	0x206	; 0x206 <_Z10printEmptyi>

			display.setCursor(0, 1);
     8c2:	41 e0       	ldi	r20, 0x01	; 1
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	86 e8       	ldi	r24, 0x86	; 134
     8c8:	92 e0       	ldi	r25, 0x02	; 2
     8ca:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN13LiquidCrystal9setCursorEhh>
			display.write(byte(0));
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	86 e8       	ldi	r24, 0x86	; 134
     8d2:	92 e0       	ldi	r25, 0x02	; 2
     8d4:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN13LiquidCrystal5writeEh>
			display.print("C: ");
     8d8:	6e e3       	ldi	r22, 0x3E	; 62
     8da:	72 e0       	ldi	r23, 0x02	; 2
     8dc:	86 e8       	ldi	r24, 0x86	; 134
     8de:	92 e0       	ldi	r25, 0x02	; 2
     8e0:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN5Print5printEPKc>
			display.print(setTemperature);
     8e4:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <setTemperature>
     8e8:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <setTemperature+0x1>
     8ec:	4a e0       	ldi	r20, 0x0A	; 10
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	86 e8       	ldi	r24, 0x86	; 134
     8f2:	92 e0       	ldi	r25, 0x02	; 2
     8f4:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN5Print5printEii>
     8f8:	a9 cf       	rjmp	.-174    	; 0x84c <_Z18ManualTargetOffsetv+0x46>
		} else {
			incrementTick();
     8fa:	0e 94 2e 01 	call	0x25c	; 0x25c <_Z13incrementTickv>
     8fe:	a6 cf       	rjmp	.-180    	; 0x84c <_Z18ManualTargetOffsetv+0x46>

00000900 <loop>:
	if (analogInput < 850)  return BUTTON_SELECT;

	return BUTTON_NONE;
}

void loop() {
     900:	8f 92       	push	r8
     902:	9f 92       	push	r9
     904:	af 92       	push	r10
     906:	bf 92       	push	r11
     908:	cf 92       	push	r12
     90a:	df 92       	push	r13
     90c:	ef 92       	push	r14
     90e:	ff 92       	push	r15
	static int button = BUTTON_NONE;
	static int previousButton = BUTTON_NONE;

	if (getButton() != previousButton) {
     910:	0e 94 a8 01 	call	0x350	; 0x350 <_Z9getButtonv>
     914:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     918:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     91c:	82 17       	cp	r24, r18
     91e:	93 07       	cpc	r25, r19
     920:	09 f4       	brne	.+2      	; 0x924 <loop+0x24>
     922:	47 c0       	rjmp	.+142    	; 0x9b2 <loop+0xb2>
		previousButton = getButton();
     924:	0e 94 a8 01 	call	0x350	; 0x350 <_Z9getButtonv>
     928:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     92c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		switch (getButton()) {
     930:	0e 94 a8 01 	call	0x350	; 0x350 <_Z9getButtonv>
     934:	82 30       	cpi	r24, 0x02	; 2
     936:	91 05       	cpc	r25, r1
     938:	71 f1       	breq	.+92     	; 0x996 <loop+0x96>
     93a:	84 30       	cpi	r24, 0x04	; 4
     93c:	91 05       	cpc	r25, r1
     93e:	19 f0       	breq	.+6      	; 0x946 <loop+0x46>
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	b9 f5       	brne	.+110    	; 0x9b2 <loop+0xb2>
     944:	14 c0       	rjmp	.+40     	; 0x96e <loop+0x6e>
			case BUTTON_SELECT:
				switch (selectedMenu) {
     946:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <selectedMenu>
     94a:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <selectedMenu+0x1>
     94e:	81 30       	cpi	r24, 0x01	; 1
     950:	91 05       	cpc	r25, r1
     952:	41 f0       	breq	.+16     	; 0x964 <loop+0x64>
     954:	82 30       	cpi	r24, 0x02	; 2
     956:	91 05       	cpc	r25, r1
     958:	41 f0       	breq	.+16     	; 0x96a <loop+0x6a>
     95a:	89 2b       	or	r24, r25
     95c:	41 f4       	brne	.+16     	; 0x96e <loop+0x6e>
					case 0:							// 0 -> "Oper. Aut. (PID)",
						ManualTargetOffset();		// 1 -> "Oper. Manual    ",
     95e:	0e 94 03 04 	call	0x806	; 0x806 <_Z18ManualTargetOffsetv>
						break;						// 2 -> "Conf. Temp. Max.",
     962:	05 c0       	rjmp	.+10     	; 0x96e <loop+0x6e>
					case 1:							// 3 -> "Conf. Param. PID",
						ManualPercentOffset();		// 4 -> "Mon. temp. atual"
     964:	0e 94 2c 02 	call	0x458	; 0x458 <_Z19ManualPercentOffsetv>
						break;						
     968:	02 c0       	rjmp	.+4      	; 0x96e <loop+0x6e>
					case 2:
						Monitoring();
     96a:	0e 94 9f 02 	call	0x53e	; 0x53e <_Z10Monitoringv>
					default:
						break;
					}
			case BUTTON_UP:
				selectedMenu + 1 > 2 ? selectedMenu = 0 : ++selectedMenu;
     96e:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <selectedMenu>
     972:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <selectedMenu+0x1>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	91 05       	cpc	r25, r1
     97a:	2c f0       	brlt	.+10     	; 0x986 <loop+0x86>
     97c:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <selectedMenu+0x1>
     980:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <selectedMenu>
     984:	05 c0       	rjmp	.+10     	; 0x990 <loop+0x90>
     986:	01 96       	adiw	r24, 0x01	; 1
     988:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <selectedMenu+0x1>
     98c:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <selectedMenu>
				printMenu();
     990:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <_Z9printMenuv>
				break;
     994:	0e c0       	rjmp	.+28     	; 0x9b2 <loop+0xb2>
			case BUTTON_DOWN:
				selectedMenu - 1 < 0 ? selectedMenu = 2: --selectedMenu;
     996:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <selectedMenu>
     99a:	30 91 83 02 	lds	r19, 0x0283	; 0x800283 <selectedMenu+0x1>
     99e:	12 16       	cp	r1, r18
     9a0:	13 06       	cpc	r1, r19
     9a2:	94 f7       	brge	.-28     	; 0x988 <loop+0x88>
     9a4:	21 50       	subi	r18, 0x01	; 1
     9a6:	31 09       	sbc	r19, r1
     9a8:	30 93 83 02 	sts	0x0283, r19	; 0x800283 <selectedMenu+0x1>
     9ac:	20 93 82 02 	sts	0x0282, r18	; 0x800282 <selectedMenu>
     9b0:	ef cf       	rjmp	.-34     	; 0x990 <loop+0x90>
				break;
		}
	}


	if (sensorCount && doUpdate) {
     9b2:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <sensorCount>
     9b6:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <sensorCount+0x1>
     9ba:	89 2b       	or	r24, r25
     9bc:	09 f4       	brne	.+2      	; 0x9c0 <loop+0xc0>
     9be:	71 c0       	rjmp	.+226    	; 0xaa2 <loop+0x1a2>
     9c0:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <doUpdate>
     9c4:	88 23       	and	r24, r24
     9c6:	09 f4       	brne	.+2      	; 0x9ca <loop+0xca>
     9c8:	6c c0       	rjmp	.+216    	; 0xaa2 <loop+0x1a2>
		doUpdate = 0;
     9ca:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <doUpdate>
		
		sensors.requestTemperatures();
     9ce:	86 ea       	ldi	r24, 0xA6	; 166
     9d0:	92 e0       	ldi	r25, 0x02	; 2
     9d2:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <_ZN17DallasTemperature19requestTemperaturesEv>

		float rawTemperature = getTemperature();
     9d6:	0e 94 38 01 	call	0x270	; 0x270 <_Z14getTemperaturev>
     9da:	6b 01       	movw	r12, r22
     9dc:	7c 01       	movw	r14, r24

		if ((int) rawTemperature < setTemperature) {
     9de:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__fixsfsi>
     9e2:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <setTemperature>
     9e6:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <setTemperature+0x1>
     9ea:	62 17       	cp	r22, r18
     9ec:	73 07       	cpc	r23, r19
     9ee:	0c f0       	brlt	.+2      	; 0x9f2 <loop+0xf2>
     9f0:	4c c0       	rjmp	.+152    	; 0xa8a <loop+0x18a>
			Serial.println(rawTemperature);
     9f2:	22 e0       	ldi	r18, 0x02	; 2
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	b7 01       	movw	r22, r14
     9f8:	a6 01       	movw	r20, r12
     9fa:	88 ec       	ldi	r24, 0xC8	; 200
     9fc:	92 e0       	ldi	r25, 0x02	; 2
     9fe:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN5Print7printlnEdi>
			Serial.println(setTemperature);
     a02:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <setTemperature>
     a06:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <setTemperature+0x1>
     a0a:	4a e0       	ldi	r20, 0x0A	; 10
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	88 ec       	ldi	r24, 0xC8	; 200
     a10:	92 e0       	ldi	r25, 0x02	; 2
     a12:	0e 94 8c 0a 	call	0x1518	; 0x1518 <_ZN5Print7printlnEii>
			outputPercentage = (int) ((((float) setTemperature - rawTemperature) / (float) setTemperature) * 100);
     a16:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <setTemperature>
     a1a:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <setTemperature+0x1>
     a1e:	07 2e       	mov	r0, r23
     a20:	00 0c       	add	r0, r0
     a22:	88 0b       	sbc	r24, r24
     a24:	99 0b       	sbc	r25, r25
     a26:	0e 94 76 06 	call	0xcec	; 0xcec <__floatsisf>
     a2a:	4b 01       	movw	r8, r22
     a2c:	5c 01       	movw	r10, r24
     a2e:	a7 01       	movw	r20, r14
     a30:	96 01       	movw	r18, r12
     a32:	0e 94 5a 05 	call	0xab4	; 0xab4 <__subsf3>
     a36:	a5 01       	movw	r20, r10
     a38:	94 01       	movw	r18, r8
     a3a:	0e 94 cc 05 	call	0xb98	; 0xb98 <__divsf3>
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	48 ec       	ldi	r20, 0xC8	; 200
     a44:	52 e4       	ldi	r21, 0x42	; 66
     a46:	0e 94 2b 07 	call	0xe56	; 0xe56 <__mulsf3>
     a4a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__fixsfsi>
     a4e:	70 93 7e 02 	sts	0x027E, r23	; 0x80027e <outputPercentage+0x1>
     a52:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <outputPercentage>
			Serial.println(outputPercentage);
     a56:	4a e0       	ldi	r20, 0x0A	; 10
     a58:	50 e0       	ldi	r21, 0x00	; 0
     a5a:	88 ec       	ldi	r24, 0xC8	; 200
     a5c:	92 e0       	ldi	r25, 0x02	; 2
     a5e:	0e 94 8c 0a 	call	0x1518	; 0x1518 <_ZN5Print7printlnEii>
			Serial.println();Serial.println();Serial.println();
     a62:	88 ec       	ldi	r24, 0xC8	; 200
     a64:	92 e0       	ldi	r25, 0x02	; 2
     a66:	0e 94 c4 09 	call	0x1388	; 0x1388 <_ZN5Print7printlnEv>
     a6a:	88 ec       	ldi	r24, 0xC8	; 200
     a6c:	92 e0       	ldi	r25, 0x02	; 2
     a6e:	0e 94 c4 09 	call	0x1388	; 0x1388 <_ZN5Print7printlnEv>
     a72:	88 ec       	ldi	r24, 0xC8	; 200
     a74:	92 e0       	ldi	r25, 0x02	; 2
		} else {
			digitalWrite(outputPin, 0);
		}
	}
}
     a76:	ff 90       	pop	r15
     a78:	ef 90       	pop	r14
     a7a:	df 90       	pop	r13
     a7c:	cf 90       	pop	r12
     a7e:	bf 90       	pop	r11
     a80:	af 90       	pop	r10
     a82:	9f 90       	pop	r9
     a84:	8f 90       	pop	r8
		if ((int) rawTemperature < setTemperature) {
			Serial.println(rawTemperature);
			Serial.println(setTemperature);
			outputPercentage = (int) ((((float) setTemperature - rawTemperature) / (float) setTemperature) * 100);
			Serial.println(outputPercentage);
			Serial.println();Serial.println();Serial.println();
     a86:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <_ZN5Print7printlnEv>
		} else {
			digitalWrite(outputPin, 0);
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	8d e0       	ldi	r24, 0x0D	; 13
		}
	}
}
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	df 90       	pop	r13
     a94:	cf 90       	pop	r12
     a96:	bf 90       	pop	r11
     a98:	af 90       	pop	r10
     a9a:	9f 90       	pop	r9
     a9c:	8f 90       	pop	r8
			Serial.println(setTemperature);
			outputPercentage = (int) ((((float) setTemperature - rawTemperature) / (float) setTemperature) * 100);
			Serial.println(outputPercentage);
			Serial.println();Serial.println();Serial.println();
		} else {
			digitalWrite(outputPin, 0);
     a9e:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <digitalWrite>
		}
	}
}
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	df 90       	pop	r13
     aa8:	cf 90       	pop	r12
     aaa:	bf 90       	pop	r11
     aac:	af 90       	pop	r10
     aae:	9f 90       	pop	r9
     ab0:	8f 90       	pop	r8
     ab2:	08 95       	ret

00000ab4 <__subsf3>:
     ab4:	50 58       	subi	r21, 0x80	; 128

00000ab6 <__addsf3>:
     ab6:	bb 27       	eor	r27, r27
     ab8:	aa 27       	eor	r26, r26
     aba:	0e 94 72 05 	call	0xae4	; 0xae4 <__addsf3x>
     abe:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__fp_round>
     ac2:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fp_pscA>
     ac6:	38 f0       	brcs	.+14     	; 0xad6 <__addsf3+0x20>
     ac8:	0e 94 e5 06 	call	0xdca	; 0xdca <__fp_pscB>
     acc:	20 f0       	brcs	.+8      	; 0xad6 <__addsf3+0x20>
     ace:	39 f4       	brne	.+14     	; 0xade <__addsf3+0x28>
     ad0:	9f 3f       	cpi	r25, 0xFF	; 255
     ad2:	19 f4       	brne	.+6      	; 0xada <__addsf3+0x24>
     ad4:	26 f4       	brtc	.+8      	; 0xade <__addsf3+0x28>
     ad6:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_nan>
     ada:	0e f4       	brtc	.+2      	; 0xade <__addsf3+0x28>
     adc:	e0 95       	com	r30
     ade:	e7 fb       	bst	r30, 7
     ae0:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_inf>

00000ae4 <__addsf3x>:
     ae4:	e9 2f       	mov	r30, r25
     ae6:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__fp_split3>
     aea:	58 f3       	brcs	.-42     	; 0xac2 <__addsf3+0xc>
     aec:	ba 17       	cp	r27, r26
     aee:	62 07       	cpc	r22, r18
     af0:	73 07       	cpc	r23, r19
     af2:	84 07       	cpc	r24, r20
     af4:	95 07       	cpc	r25, r21
     af6:	20 f0       	brcs	.+8      	; 0xb00 <__addsf3x+0x1c>
     af8:	79 f4       	brne	.+30     	; 0xb18 <__addsf3x+0x34>
     afa:	a6 f5       	brtc	.+104    	; 0xb64 <__addsf3x+0x80>
     afc:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__fp_zero>
     b00:	0e f4       	brtc	.+2      	; 0xb04 <__addsf3x+0x20>
     b02:	e0 95       	com	r30
     b04:	0b 2e       	mov	r0, r27
     b06:	ba 2f       	mov	r27, r26
     b08:	a0 2d       	mov	r26, r0
     b0a:	0b 01       	movw	r0, r22
     b0c:	b9 01       	movw	r22, r18
     b0e:	90 01       	movw	r18, r0
     b10:	0c 01       	movw	r0, r24
     b12:	ca 01       	movw	r24, r20
     b14:	a0 01       	movw	r20, r0
     b16:	11 24       	eor	r1, r1
     b18:	ff 27       	eor	r31, r31
     b1a:	59 1b       	sub	r21, r25
     b1c:	99 f0       	breq	.+38     	; 0xb44 <__addsf3x+0x60>
     b1e:	59 3f       	cpi	r21, 0xF9	; 249
     b20:	50 f4       	brcc	.+20     	; 0xb36 <__addsf3x+0x52>
     b22:	50 3e       	cpi	r21, 0xE0	; 224
     b24:	68 f1       	brcs	.+90     	; 0xb80 <__addsf3x+0x9c>
     b26:	1a 16       	cp	r1, r26
     b28:	f0 40       	sbci	r31, 0x00	; 0
     b2a:	a2 2f       	mov	r26, r18
     b2c:	23 2f       	mov	r18, r19
     b2e:	34 2f       	mov	r19, r20
     b30:	44 27       	eor	r20, r20
     b32:	58 5f       	subi	r21, 0xF8	; 248
     b34:	f3 cf       	rjmp	.-26     	; 0xb1c <__addsf3x+0x38>
     b36:	46 95       	lsr	r20
     b38:	37 95       	ror	r19
     b3a:	27 95       	ror	r18
     b3c:	a7 95       	ror	r26
     b3e:	f0 40       	sbci	r31, 0x00	; 0
     b40:	53 95       	inc	r21
     b42:	c9 f7       	brne	.-14     	; 0xb36 <__addsf3x+0x52>
     b44:	7e f4       	brtc	.+30     	; 0xb64 <__addsf3x+0x80>
     b46:	1f 16       	cp	r1, r31
     b48:	ba 0b       	sbc	r27, r26
     b4a:	62 0b       	sbc	r22, r18
     b4c:	73 0b       	sbc	r23, r19
     b4e:	84 0b       	sbc	r24, r20
     b50:	ba f0       	brmi	.+46     	; 0xb80 <__addsf3x+0x9c>
     b52:	91 50       	subi	r25, 0x01	; 1
     b54:	a1 f0       	breq	.+40     	; 0xb7e <__addsf3x+0x9a>
     b56:	ff 0f       	add	r31, r31
     b58:	bb 1f       	adc	r27, r27
     b5a:	66 1f       	adc	r22, r22
     b5c:	77 1f       	adc	r23, r23
     b5e:	88 1f       	adc	r24, r24
     b60:	c2 f7       	brpl	.-16     	; 0xb52 <__addsf3x+0x6e>
     b62:	0e c0       	rjmp	.+28     	; 0xb80 <__addsf3x+0x9c>
     b64:	ba 0f       	add	r27, r26
     b66:	62 1f       	adc	r22, r18
     b68:	73 1f       	adc	r23, r19
     b6a:	84 1f       	adc	r24, r20
     b6c:	48 f4       	brcc	.+18     	; 0xb80 <__addsf3x+0x9c>
     b6e:	87 95       	ror	r24
     b70:	77 95       	ror	r23
     b72:	67 95       	ror	r22
     b74:	b7 95       	ror	r27
     b76:	f7 95       	ror	r31
     b78:	9e 3f       	cpi	r25, 0xFE	; 254
     b7a:	08 f0       	brcs	.+2      	; 0xb7e <__addsf3x+0x9a>
     b7c:	b0 cf       	rjmp	.-160    	; 0xade <__addsf3+0x28>
     b7e:	93 95       	inc	r25
     b80:	88 0f       	add	r24, r24
     b82:	08 f0       	brcs	.+2      	; 0xb86 <__addsf3x+0xa2>
     b84:	99 27       	eor	r25, r25
     b86:	ee 0f       	add	r30, r30
     b88:	97 95       	ror	r25
     b8a:	87 95       	ror	r24
     b8c:	08 95       	ret

00000b8e <__cmpsf2>:
     b8e:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fp_cmp>
     b92:	08 f4       	brcc	.+2      	; 0xb96 <__cmpsf2+0x8>
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	08 95       	ret

00000b98 <__divsf3>:
     b98:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__divsf3x>
     b9c:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__fp_round>
     ba0:	0e 94 e5 06 	call	0xdca	; 0xdca <__fp_pscB>
     ba4:	58 f0       	brcs	.+22     	; 0xbbc <__divsf3+0x24>
     ba6:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fp_pscA>
     baa:	40 f0       	brcs	.+16     	; 0xbbc <__divsf3+0x24>
     bac:	29 f4       	brne	.+10     	; 0xbb8 <__divsf3+0x20>
     bae:	5f 3f       	cpi	r21, 0xFF	; 255
     bb0:	29 f0       	breq	.+10     	; 0xbbc <__divsf3+0x24>
     bb2:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_inf>
     bb6:	51 11       	cpse	r21, r1
     bb8:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_szero>
     bbc:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_nan>

00000bc0 <__divsf3x>:
     bc0:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__fp_split3>
     bc4:	68 f3       	brcs	.-38     	; 0xba0 <__divsf3+0x8>

00000bc6 <__divsf3_pse>:
     bc6:	99 23       	and	r25, r25
     bc8:	b1 f3       	breq	.-20     	; 0xbb6 <__divsf3+0x1e>
     bca:	55 23       	and	r21, r21
     bcc:	91 f3       	breq	.-28     	; 0xbb2 <__divsf3+0x1a>
     bce:	95 1b       	sub	r25, r21
     bd0:	55 0b       	sbc	r21, r21
     bd2:	bb 27       	eor	r27, r27
     bd4:	aa 27       	eor	r26, r26
     bd6:	62 17       	cp	r22, r18
     bd8:	73 07       	cpc	r23, r19
     bda:	84 07       	cpc	r24, r20
     bdc:	38 f0       	brcs	.+14     	; 0xbec <__divsf3_pse+0x26>
     bde:	9f 5f       	subi	r25, 0xFF	; 255
     be0:	5f 4f       	sbci	r21, 0xFF	; 255
     be2:	22 0f       	add	r18, r18
     be4:	33 1f       	adc	r19, r19
     be6:	44 1f       	adc	r20, r20
     be8:	aa 1f       	adc	r26, r26
     bea:	a9 f3       	breq	.-22     	; 0xbd6 <__divsf3_pse+0x10>
     bec:	35 d0       	rcall	.+106    	; 0xc58 <__divsf3_pse+0x92>
     bee:	0e 2e       	mov	r0, r30
     bf0:	3a f0       	brmi	.+14     	; 0xc00 <__divsf3_pse+0x3a>
     bf2:	e0 e8       	ldi	r30, 0x80	; 128
     bf4:	32 d0       	rcall	.+100    	; 0xc5a <__divsf3_pse+0x94>
     bf6:	91 50       	subi	r25, 0x01	; 1
     bf8:	50 40       	sbci	r21, 0x00	; 0
     bfa:	e6 95       	lsr	r30
     bfc:	00 1c       	adc	r0, r0
     bfe:	ca f7       	brpl	.-14     	; 0xbf2 <__divsf3_pse+0x2c>
     c00:	2b d0       	rcall	.+86     	; 0xc58 <__divsf3_pse+0x92>
     c02:	fe 2f       	mov	r31, r30
     c04:	29 d0       	rcall	.+82     	; 0xc58 <__divsf3_pse+0x92>
     c06:	66 0f       	add	r22, r22
     c08:	77 1f       	adc	r23, r23
     c0a:	88 1f       	adc	r24, r24
     c0c:	bb 1f       	adc	r27, r27
     c0e:	26 17       	cp	r18, r22
     c10:	37 07       	cpc	r19, r23
     c12:	48 07       	cpc	r20, r24
     c14:	ab 07       	cpc	r26, r27
     c16:	b0 e8       	ldi	r27, 0x80	; 128
     c18:	09 f0       	breq	.+2      	; 0xc1c <__divsf3_pse+0x56>
     c1a:	bb 0b       	sbc	r27, r27
     c1c:	80 2d       	mov	r24, r0
     c1e:	bf 01       	movw	r22, r30
     c20:	ff 27       	eor	r31, r31
     c22:	93 58       	subi	r25, 0x83	; 131
     c24:	5f 4f       	sbci	r21, 0xFF	; 255
     c26:	3a f0       	brmi	.+14     	; 0xc36 <__divsf3_pse+0x70>
     c28:	9e 3f       	cpi	r25, 0xFE	; 254
     c2a:	51 05       	cpc	r21, r1
     c2c:	78 f0       	brcs	.+30     	; 0xc4c <__divsf3_pse+0x86>
     c2e:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_inf>
     c32:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_szero>
     c36:	5f 3f       	cpi	r21, 0xFF	; 255
     c38:	e4 f3       	brlt	.-8      	; 0xc32 <__divsf3_pse+0x6c>
     c3a:	98 3e       	cpi	r25, 0xE8	; 232
     c3c:	d4 f3       	brlt	.-12     	; 0xc32 <__divsf3_pse+0x6c>
     c3e:	86 95       	lsr	r24
     c40:	77 95       	ror	r23
     c42:	67 95       	ror	r22
     c44:	b7 95       	ror	r27
     c46:	f7 95       	ror	r31
     c48:	9f 5f       	subi	r25, 0xFF	; 255
     c4a:	c9 f7       	brne	.-14     	; 0xc3e <__divsf3_pse+0x78>
     c4c:	88 0f       	add	r24, r24
     c4e:	91 1d       	adc	r25, r1
     c50:	96 95       	lsr	r25
     c52:	87 95       	ror	r24
     c54:	97 f9       	bld	r25, 7
     c56:	08 95       	ret
     c58:	e1 e0       	ldi	r30, 0x01	; 1
     c5a:	66 0f       	add	r22, r22
     c5c:	77 1f       	adc	r23, r23
     c5e:	88 1f       	adc	r24, r24
     c60:	bb 1f       	adc	r27, r27
     c62:	62 17       	cp	r22, r18
     c64:	73 07       	cpc	r23, r19
     c66:	84 07       	cpc	r24, r20
     c68:	ba 07       	cpc	r27, r26
     c6a:	20 f0       	brcs	.+8      	; 0xc74 <__divsf3_pse+0xae>
     c6c:	62 1b       	sub	r22, r18
     c6e:	73 0b       	sbc	r23, r19
     c70:	84 0b       	sbc	r24, r20
     c72:	ba 0b       	sbc	r27, r26
     c74:	ee 1f       	adc	r30, r30
     c76:	88 f7       	brcc	.-30     	; 0xc5a <__divsf3_pse+0x94>
     c78:	e0 95       	com	r30
     c7a:	08 95       	ret

00000c7c <__fixsfsi>:
     c7c:	0e 94 45 06 	call	0xc8a	; 0xc8a <__fixunssfsi>
     c80:	68 94       	set
     c82:	b1 11       	cpse	r27, r1
     c84:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_szero>
     c88:	08 95       	ret

00000c8a <__fixunssfsi>:
     c8a:	0e 94 05 07 	call	0xe0a	; 0xe0a <__fp_splitA>
     c8e:	88 f0       	brcs	.+34     	; 0xcb2 <__fixunssfsi+0x28>
     c90:	9f 57       	subi	r25, 0x7F	; 127
     c92:	98 f0       	brcs	.+38     	; 0xcba <__fixunssfsi+0x30>
     c94:	b9 2f       	mov	r27, r25
     c96:	99 27       	eor	r25, r25
     c98:	b7 51       	subi	r27, 0x17	; 23
     c9a:	b0 f0       	brcs	.+44     	; 0xcc8 <__fixunssfsi+0x3e>
     c9c:	e1 f0       	breq	.+56     	; 0xcd6 <__fixunssfsi+0x4c>
     c9e:	66 0f       	add	r22, r22
     ca0:	77 1f       	adc	r23, r23
     ca2:	88 1f       	adc	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	1a f0       	brmi	.+6      	; 0xcae <__fixunssfsi+0x24>
     ca8:	ba 95       	dec	r27
     caa:	c9 f7       	brne	.-14     	; 0xc9e <__fixunssfsi+0x14>
     cac:	14 c0       	rjmp	.+40     	; 0xcd6 <__fixunssfsi+0x4c>
     cae:	b1 30       	cpi	r27, 0x01	; 1
     cb0:	91 f0       	breq	.+36     	; 0xcd6 <__fixunssfsi+0x4c>
     cb2:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fp_zero>
     cb6:	b1 e0       	ldi	r27, 0x01	; 1
     cb8:	08 95       	ret
     cba:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__fp_zero>
     cbe:	67 2f       	mov	r22, r23
     cc0:	78 2f       	mov	r23, r24
     cc2:	88 27       	eor	r24, r24
     cc4:	b8 5f       	subi	r27, 0xF8	; 248
     cc6:	39 f0       	breq	.+14     	; 0xcd6 <__fixunssfsi+0x4c>
     cc8:	b9 3f       	cpi	r27, 0xF9	; 249
     cca:	cc f3       	brlt	.-14     	; 0xcbe <__fixunssfsi+0x34>
     ccc:	86 95       	lsr	r24
     cce:	77 95       	ror	r23
     cd0:	67 95       	ror	r22
     cd2:	b3 95       	inc	r27
     cd4:	d9 f7       	brne	.-10     	; 0xccc <__fixunssfsi+0x42>
     cd6:	3e f4       	brtc	.+14     	; 0xce6 <__fixunssfsi+0x5c>
     cd8:	90 95       	com	r25
     cda:	80 95       	com	r24
     cdc:	70 95       	com	r23
     cde:	61 95       	neg	r22
     ce0:	7f 4f       	sbci	r23, 0xFF	; 255
     ce2:	8f 4f       	sbci	r24, 0xFF	; 255
     ce4:	9f 4f       	sbci	r25, 0xFF	; 255
     ce6:	08 95       	ret

00000ce8 <__floatunsisf>:
     ce8:	e8 94       	clt
     cea:	09 c0       	rjmp	.+18     	; 0xcfe <__floatsisf+0x12>

00000cec <__floatsisf>:
     cec:	97 fb       	bst	r25, 7
     cee:	3e f4       	brtc	.+14     	; 0xcfe <__floatsisf+0x12>
     cf0:	90 95       	com	r25
     cf2:	80 95       	com	r24
     cf4:	70 95       	com	r23
     cf6:	61 95       	neg	r22
     cf8:	7f 4f       	sbci	r23, 0xFF	; 255
     cfa:	8f 4f       	sbci	r24, 0xFF	; 255
     cfc:	9f 4f       	sbci	r25, 0xFF	; 255
     cfe:	99 23       	and	r25, r25
     d00:	a9 f0       	breq	.+42     	; 0xd2c <__floatsisf+0x40>
     d02:	f9 2f       	mov	r31, r25
     d04:	96 e9       	ldi	r25, 0x96	; 150
     d06:	bb 27       	eor	r27, r27
     d08:	93 95       	inc	r25
     d0a:	f6 95       	lsr	r31
     d0c:	87 95       	ror	r24
     d0e:	77 95       	ror	r23
     d10:	67 95       	ror	r22
     d12:	b7 95       	ror	r27
     d14:	f1 11       	cpse	r31, r1
     d16:	f8 cf       	rjmp	.-16     	; 0xd08 <__floatsisf+0x1c>
     d18:	fa f4       	brpl	.+62     	; 0xd58 <__floatsisf+0x6c>
     d1a:	bb 0f       	add	r27, r27
     d1c:	11 f4       	brne	.+4      	; 0xd22 <__floatsisf+0x36>
     d1e:	60 ff       	sbrs	r22, 0
     d20:	1b c0       	rjmp	.+54     	; 0xd58 <__floatsisf+0x6c>
     d22:	6f 5f       	subi	r22, 0xFF	; 255
     d24:	7f 4f       	sbci	r23, 0xFF	; 255
     d26:	8f 4f       	sbci	r24, 0xFF	; 255
     d28:	9f 4f       	sbci	r25, 0xFF	; 255
     d2a:	16 c0       	rjmp	.+44     	; 0xd58 <__floatsisf+0x6c>
     d2c:	88 23       	and	r24, r24
     d2e:	11 f0       	breq	.+4      	; 0xd34 <__floatsisf+0x48>
     d30:	96 e9       	ldi	r25, 0x96	; 150
     d32:	11 c0       	rjmp	.+34     	; 0xd56 <__floatsisf+0x6a>
     d34:	77 23       	and	r23, r23
     d36:	21 f0       	breq	.+8      	; 0xd40 <__floatsisf+0x54>
     d38:	9e e8       	ldi	r25, 0x8E	; 142
     d3a:	87 2f       	mov	r24, r23
     d3c:	76 2f       	mov	r23, r22
     d3e:	05 c0       	rjmp	.+10     	; 0xd4a <__floatsisf+0x5e>
     d40:	66 23       	and	r22, r22
     d42:	71 f0       	breq	.+28     	; 0xd60 <__floatsisf+0x74>
     d44:	96 e8       	ldi	r25, 0x86	; 134
     d46:	86 2f       	mov	r24, r22
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	2a f0       	brmi	.+10     	; 0xd58 <__floatsisf+0x6c>
     d4e:	9a 95       	dec	r25
     d50:	66 0f       	add	r22, r22
     d52:	77 1f       	adc	r23, r23
     d54:	88 1f       	adc	r24, r24
     d56:	da f7       	brpl	.-10     	; 0xd4e <__floatsisf+0x62>
     d58:	88 0f       	add	r24, r24
     d5a:	96 95       	lsr	r25
     d5c:	87 95       	ror	r24
     d5e:	97 f9       	bld	r25, 7
     d60:	08 95       	ret

00000d62 <__fp_cmp>:
     d62:	99 0f       	add	r25, r25
     d64:	00 08       	sbc	r0, r0
     d66:	55 0f       	add	r21, r21
     d68:	aa 0b       	sbc	r26, r26
     d6a:	e0 e8       	ldi	r30, 0x80	; 128
     d6c:	fe ef       	ldi	r31, 0xFE	; 254
     d6e:	16 16       	cp	r1, r22
     d70:	17 06       	cpc	r1, r23
     d72:	e8 07       	cpc	r30, r24
     d74:	f9 07       	cpc	r31, r25
     d76:	c0 f0       	brcs	.+48     	; 0xda8 <__fp_cmp+0x46>
     d78:	12 16       	cp	r1, r18
     d7a:	13 06       	cpc	r1, r19
     d7c:	e4 07       	cpc	r30, r20
     d7e:	f5 07       	cpc	r31, r21
     d80:	98 f0       	brcs	.+38     	; 0xda8 <__fp_cmp+0x46>
     d82:	62 1b       	sub	r22, r18
     d84:	73 0b       	sbc	r23, r19
     d86:	84 0b       	sbc	r24, r20
     d88:	95 0b       	sbc	r25, r21
     d8a:	39 f4       	brne	.+14     	; 0xd9a <__fp_cmp+0x38>
     d8c:	0a 26       	eor	r0, r26
     d8e:	61 f0       	breq	.+24     	; 0xda8 <__fp_cmp+0x46>
     d90:	23 2b       	or	r18, r19
     d92:	24 2b       	or	r18, r20
     d94:	25 2b       	or	r18, r21
     d96:	21 f4       	brne	.+8      	; 0xda0 <__fp_cmp+0x3e>
     d98:	08 95       	ret
     d9a:	0a 26       	eor	r0, r26
     d9c:	09 f4       	brne	.+2      	; 0xda0 <__fp_cmp+0x3e>
     d9e:	a1 40       	sbci	r26, 0x01	; 1
     da0:	a6 95       	lsr	r26
     da2:	8f ef       	ldi	r24, 0xFF	; 255
     da4:	81 1d       	adc	r24, r1
     da6:	81 1d       	adc	r24, r1
     da8:	08 95       	ret

00000daa <__fp_inf>:
     daa:	97 f9       	bld	r25, 7
     dac:	9f 67       	ori	r25, 0x7F	; 127
     dae:	80 e8       	ldi	r24, 0x80	; 128
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	08 95       	ret

00000db6 <__fp_nan>:
     db6:	9f ef       	ldi	r25, 0xFF	; 255
     db8:	80 ec       	ldi	r24, 0xC0	; 192
     dba:	08 95       	ret

00000dbc <__fp_pscA>:
     dbc:	00 24       	eor	r0, r0
     dbe:	0a 94       	dec	r0
     dc0:	16 16       	cp	r1, r22
     dc2:	17 06       	cpc	r1, r23
     dc4:	18 06       	cpc	r1, r24
     dc6:	09 06       	cpc	r0, r25
     dc8:	08 95       	ret

00000dca <__fp_pscB>:
     dca:	00 24       	eor	r0, r0
     dcc:	0a 94       	dec	r0
     dce:	12 16       	cp	r1, r18
     dd0:	13 06       	cpc	r1, r19
     dd2:	14 06       	cpc	r1, r20
     dd4:	05 06       	cpc	r0, r21
     dd6:	08 95       	ret

00000dd8 <__fp_round>:
     dd8:	09 2e       	mov	r0, r25
     dda:	03 94       	inc	r0
     ddc:	00 0c       	add	r0, r0
     dde:	11 f4       	brne	.+4      	; 0xde4 <__fp_round+0xc>
     de0:	88 23       	and	r24, r24
     de2:	52 f0       	brmi	.+20     	; 0xdf8 <__fp_round+0x20>
     de4:	bb 0f       	add	r27, r27
     de6:	40 f4       	brcc	.+16     	; 0xdf8 <__fp_round+0x20>
     de8:	bf 2b       	or	r27, r31
     dea:	11 f4       	brne	.+4      	; 0xdf0 <__fp_round+0x18>
     dec:	60 ff       	sbrs	r22, 0
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <__fp_round+0x20>
     df0:	6f 5f       	subi	r22, 0xFF	; 255
     df2:	7f 4f       	sbci	r23, 0xFF	; 255
     df4:	8f 4f       	sbci	r24, 0xFF	; 255
     df6:	9f 4f       	sbci	r25, 0xFF	; 255
     df8:	08 95       	ret

00000dfa <__fp_split3>:
     dfa:	57 fd       	sbrc	r21, 7
     dfc:	90 58       	subi	r25, 0x80	; 128
     dfe:	44 0f       	add	r20, r20
     e00:	55 1f       	adc	r21, r21
     e02:	59 f0       	breq	.+22     	; 0xe1a <__fp_splitA+0x10>
     e04:	5f 3f       	cpi	r21, 0xFF	; 255
     e06:	71 f0       	breq	.+28     	; 0xe24 <__fp_splitA+0x1a>
     e08:	47 95       	ror	r20

00000e0a <__fp_splitA>:
     e0a:	88 0f       	add	r24, r24
     e0c:	97 fb       	bst	r25, 7
     e0e:	99 1f       	adc	r25, r25
     e10:	61 f0       	breq	.+24     	; 0xe2a <__fp_splitA+0x20>
     e12:	9f 3f       	cpi	r25, 0xFF	; 255
     e14:	79 f0       	breq	.+30     	; 0xe34 <__fp_splitA+0x2a>
     e16:	87 95       	ror	r24
     e18:	08 95       	ret
     e1a:	12 16       	cp	r1, r18
     e1c:	13 06       	cpc	r1, r19
     e1e:	14 06       	cpc	r1, r20
     e20:	55 1f       	adc	r21, r21
     e22:	f2 cf       	rjmp	.-28     	; 0xe08 <__fp_split3+0xe>
     e24:	46 95       	lsr	r20
     e26:	f1 df       	rcall	.-30     	; 0xe0a <__fp_splitA>
     e28:	08 c0       	rjmp	.+16     	; 0xe3a <__fp_splitA+0x30>
     e2a:	16 16       	cp	r1, r22
     e2c:	17 06       	cpc	r1, r23
     e2e:	18 06       	cpc	r1, r24
     e30:	99 1f       	adc	r25, r25
     e32:	f1 cf       	rjmp	.-30     	; 0xe16 <__fp_splitA+0xc>
     e34:	86 95       	lsr	r24
     e36:	71 05       	cpc	r23, r1
     e38:	61 05       	cpc	r22, r1
     e3a:	08 94       	sec
     e3c:	08 95       	ret

00000e3e <__fp_zero>:
     e3e:	e8 94       	clt

00000e40 <__fp_szero>:
     e40:	bb 27       	eor	r27, r27
     e42:	66 27       	eor	r22, r22
     e44:	77 27       	eor	r23, r23
     e46:	cb 01       	movw	r24, r22
     e48:	97 f9       	bld	r25, 7
     e4a:	08 95       	ret

00000e4c <__gesf2>:
     e4c:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fp_cmp>
     e50:	08 f4       	brcc	.+2      	; 0xe54 <__gesf2+0x8>
     e52:	8f ef       	ldi	r24, 0xFF	; 255
     e54:	08 95       	ret

00000e56 <__mulsf3>:
     e56:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__mulsf3x>
     e5a:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__fp_round>
     e5e:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fp_pscA>
     e62:	38 f0       	brcs	.+14     	; 0xe72 <__mulsf3+0x1c>
     e64:	0e 94 e5 06 	call	0xdca	; 0xdca <__fp_pscB>
     e68:	20 f0       	brcs	.+8      	; 0xe72 <__mulsf3+0x1c>
     e6a:	95 23       	and	r25, r21
     e6c:	11 f0       	breq	.+4      	; 0xe72 <__mulsf3+0x1c>
     e6e:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_inf>
     e72:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_nan>
     e76:	11 24       	eor	r1, r1
     e78:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_szero>

00000e7c <__mulsf3x>:
     e7c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__fp_split3>
     e80:	70 f3       	brcs	.-36     	; 0xe5e <__mulsf3+0x8>

00000e82 <__mulsf3_pse>:
     e82:	95 9f       	mul	r25, r21
     e84:	c1 f3       	breq	.-16     	; 0xe76 <__mulsf3+0x20>
     e86:	95 0f       	add	r25, r21
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	55 1f       	adc	r21, r21
     e8c:	62 9f       	mul	r22, r18
     e8e:	f0 01       	movw	r30, r0
     e90:	72 9f       	mul	r23, r18
     e92:	bb 27       	eor	r27, r27
     e94:	f0 0d       	add	r31, r0
     e96:	b1 1d       	adc	r27, r1
     e98:	63 9f       	mul	r22, r19
     e9a:	aa 27       	eor	r26, r26
     e9c:	f0 0d       	add	r31, r0
     e9e:	b1 1d       	adc	r27, r1
     ea0:	aa 1f       	adc	r26, r26
     ea2:	64 9f       	mul	r22, r20
     ea4:	66 27       	eor	r22, r22
     ea6:	b0 0d       	add	r27, r0
     ea8:	a1 1d       	adc	r26, r1
     eaa:	66 1f       	adc	r22, r22
     eac:	82 9f       	mul	r24, r18
     eae:	22 27       	eor	r18, r18
     eb0:	b0 0d       	add	r27, r0
     eb2:	a1 1d       	adc	r26, r1
     eb4:	62 1f       	adc	r22, r18
     eb6:	73 9f       	mul	r23, r19
     eb8:	b0 0d       	add	r27, r0
     eba:	a1 1d       	adc	r26, r1
     ebc:	62 1f       	adc	r22, r18
     ebe:	83 9f       	mul	r24, r19
     ec0:	a0 0d       	add	r26, r0
     ec2:	61 1d       	adc	r22, r1
     ec4:	22 1f       	adc	r18, r18
     ec6:	74 9f       	mul	r23, r20
     ec8:	33 27       	eor	r19, r19
     eca:	a0 0d       	add	r26, r0
     ecc:	61 1d       	adc	r22, r1
     ece:	23 1f       	adc	r18, r19
     ed0:	84 9f       	mul	r24, r20
     ed2:	60 0d       	add	r22, r0
     ed4:	21 1d       	adc	r18, r1
     ed6:	82 2f       	mov	r24, r18
     ed8:	76 2f       	mov	r23, r22
     eda:	6a 2f       	mov	r22, r26
     edc:	11 24       	eor	r1, r1
     ede:	9f 57       	subi	r25, 0x7F	; 127
     ee0:	50 40       	sbci	r21, 0x00	; 0
     ee2:	9a f0       	brmi	.+38     	; 0xf0a <__mulsf3_pse+0x88>
     ee4:	f1 f0       	breq	.+60     	; 0xf22 <__mulsf3_pse+0xa0>
     ee6:	88 23       	and	r24, r24
     ee8:	4a f0       	brmi	.+18     	; 0xefc <__mulsf3_pse+0x7a>
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	bb 1f       	adc	r27, r27
     ef0:	66 1f       	adc	r22, r22
     ef2:	77 1f       	adc	r23, r23
     ef4:	88 1f       	adc	r24, r24
     ef6:	91 50       	subi	r25, 0x01	; 1
     ef8:	50 40       	sbci	r21, 0x00	; 0
     efa:	a9 f7       	brne	.-22     	; 0xee6 <__mulsf3_pse+0x64>
     efc:	9e 3f       	cpi	r25, 0xFE	; 254
     efe:	51 05       	cpc	r21, r1
     f00:	80 f0       	brcs	.+32     	; 0xf22 <__mulsf3_pse+0xa0>
     f02:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_inf>
     f06:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_szero>
     f0a:	5f 3f       	cpi	r21, 0xFF	; 255
     f0c:	e4 f3       	brlt	.-8      	; 0xf06 <__mulsf3_pse+0x84>
     f0e:	98 3e       	cpi	r25, 0xE8	; 232
     f10:	d4 f3       	brlt	.-12     	; 0xf06 <__mulsf3_pse+0x84>
     f12:	86 95       	lsr	r24
     f14:	77 95       	ror	r23
     f16:	67 95       	ror	r22
     f18:	b7 95       	ror	r27
     f1a:	f7 95       	ror	r31
     f1c:	e7 95       	ror	r30
     f1e:	9f 5f       	subi	r25, 0xFF	; 255
     f20:	c1 f7       	brne	.-16     	; 0xf12 <__mulsf3_pse+0x90>
     f22:	fe 2b       	or	r31, r30
     f24:	88 0f       	add	r24, r24
     f26:	91 1d       	adc	r25, r1
     f28:	96 95       	lsr	r25
     f2a:	87 95       	ror	r24
     f2c:	97 f9       	bld	r25, 7
     f2e:	08 95       	ret

00000f30 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     f30:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     f32:	91 8d       	ldd	r25, Z+25	; 0x19
     f34:	22 8d       	ldd	r18, Z+26	; 0x1a
     f36:	89 2f       	mov	r24, r25
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	80 5c       	subi	r24, 0xC0	; 192
     f3c:	9f 4f       	sbci	r25, 0xFF	; 255
     f3e:	82 1b       	sub	r24, r18
     f40:	91 09       	sbc	r25, r1
}
     f42:	8f 73       	andi	r24, 0x3F	; 63
     f44:	99 27       	eor	r25, r25
     f46:	08 95       	ret

00000f48 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     f48:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     f4a:	91 8d       	ldd	r25, Z+25	; 0x19
     f4c:	82 8d       	ldd	r24, Z+26	; 0x1a
     f4e:	98 17       	cp	r25, r24
     f50:	31 f0       	breq	.+12     	; 0xf5e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     f52:	82 8d       	ldd	r24, Z+26	; 0x1a
     f54:	e8 0f       	add	r30, r24
     f56:	f1 1d       	adc	r31, r1
     f58:	85 8d       	ldd	r24, Z+29	; 0x1d
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     f5e:	8f ef       	ldi	r24, 0xFF	; 255
     f60:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     f62:	08 95       	ret

00000f64 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     f64:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     f66:	91 8d       	ldd	r25, Z+25	; 0x19
     f68:	82 8d       	ldd	r24, Z+26	; 0x1a
     f6a:	98 17       	cp	r25, r24
     f6c:	61 f0       	breq	.+24     	; 0xf86 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     f6e:	82 8d       	ldd	r24, Z+26	; 0x1a
     f70:	df 01       	movw	r26, r30
     f72:	a8 0f       	add	r26, r24
     f74:	b1 1d       	adc	r27, r1
     f76:	5d 96       	adiw	r26, 0x1d	; 29
     f78:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     f7a:	92 8d       	ldd	r25, Z+26	; 0x1a
     f7c:	9f 5f       	subi	r25, 0xFF	; 255
     f7e:	9f 73       	andi	r25, 0x3F	; 63
     f80:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     f86:	8f ef       	ldi	r24, 0xFF	; 255
     f88:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     f8a:	08 95       	ret

00000f8c <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     f8c:	fc 01       	movw	r30, r24
     f8e:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     f90:	44 8d       	ldd	r20, Z+28	; 0x1c
     f92:	25 2f       	mov	r18, r21
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	84 2f       	mov	r24, r20
     f98:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     f9a:	82 1b       	sub	r24, r18
     f9c:	93 0b       	sbc	r25, r19
     f9e:	54 17       	cp	r21, r20
     fa0:	10 f0       	brcs	.+4      	; 0xfa6 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     fa2:	cf 96       	adiw	r24, 0x3f	; 63
     fa4:	08 95       	ret
  return tail - head - 1;
     fa6:	01 97       	sbiw	r24, 0x01	; 1
}
     fa8:	08 95       	ret

00000faa <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     faa:	85 e3       	ldi	r24, 0x35	; 53
     fac:	99 e0       	ldi	r25, 0x09	; 9
     fae:	89 2b       	or	r24, r25
     fb0:	49 f0       	breq	.+18     	; 0xfc4 <_Z14serialEventRunv+0x1a>
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	89 2b       	or	r24, r25
     fb8:	29 f0       	breq	.+10     	; 0xfc4 <_Z14serialEventRunv+0x1a>
     fba:	0e 94 35 09 	call	0x126a	; 0x126a <_Z17Serial0_availablev>
     fbe:	81 11       	cpse	r24, r1
     fc0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     fc4:	08 95       	ret

00000fc6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     fc6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     fc8:	84 8d       	ldd	r24, Z+28	; 0x1c
     fca:	df 01       	movw	r26, r30
     fcc:	a8 0f       	add	r26, r24
     fce:	b1 1d       	adc	r27, r1
     fd0:	a3 5a       	subi	r26, 0xA3	; 163
     fd2:	bf 4f       	sbci	r27, 0xFF	; 255
     fd4:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     fd6:	84 8d       	ldd	r24, Z+28	; 0x1c
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	8f 73       	andi	r24, 0x3F	; 63
     fde:	99 27       	eor	r25, r25
     fe0:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     fe2:	a6 89       	ldd	r26, Z+22	; 0x16
     fe4:	b7 89       	ldd	r27, Z+23	; 0x17
     fe6:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     fe8:	a0 89       	ldd	r26, Z+16	; 0x10
     fea:	b1 89       	ldd	r27, Z+17	; 0x11
     fec:	8c 91       	ld	r24, X
     fee:	83 70       	andi	r24, 0x03	; 3
     ff0:	80 64       	ori	r24, 0x40	; 64
     ff2:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     ff4:	93 8d       	ldd	r25, Z+27	; 0x1b
     ff6:	84 8d       	ldd	r24, Z+28	; 0x1c
     ff8:	98 13       	cpse	r25, r24
     ffa:	06 c0       	rjmp	.+12     	; 0x1008 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     ffc:	02 88       	ldd	r0, Z+18	; 0x12
     ffe:	f3 89       	ldd	r31, Z+19	; 0x13
    1000:	e0 2d       	mov	r30, r0
    1002:	80 81       	ld	r24, Z
    1004:	8f 7d       	andi	r24, 0xDF	; 223
    1006:	80 83       	st	Z, r24
    1008:	08 95       	ret

0000100a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    100a:	ef 92       	push	r14
    100c:	ff 92       	push	r15
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	ec 01       	movw	r28, r24
  _written = true;
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    101c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    101e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1020:	98 13       	cpse	r25, r24
    1022:	05 c0       	rjmp	.+10     	; 0x102e <_ZN14HardwareSerial5writeEh+0x24>
    1024:	e8 89       	ldd	r30, Y+16	; 0x10
    1026:	f9 89       	ldd	r31, Y+17	; 0x11
    1028:	80 81       	ld	r24, Z
    102a:	85 fd       	sbrc	r24, 5
    102c:	26 c0       	rjmp	.+76     	; 0x107a <_ZN14HardwareSerial5writeEh+0x70>
    102e:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1030:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1032:	10 e0       	ldi	r17, 0x00	; 0
    1034:	0f 5f       	subi	r16, 0xFF	; 255
    1036:	1f 4f       	sbci	r17, 0xFF	; 255
    1038:	0f 73       	andi	r16, 0x3F	; 63
    103a:	11 27       	eor	r17, r17
    103c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    103e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1040:	e8 12       	cpse	r14, r24
    1042:	0c c0       	rjmp	.+24     	; 0x105c <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	07 fc       	sbrc	r0, 7
    1048:	fa cf       	rjmp	.-12     	; 0x103e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    104a:	e8 89       	ldd	r30, Y+16	; 0x10
    104c:	f9 89       	ldd	r31, Y+17	; 0x11
    104e:	80 81       	ld	r24, Z
    1050:	85 ff       	sbrs	r24, 5
    1052:	f5 cf       	rjmp	.-22     	; 0x103e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1054:	ce 01       	movw	r24, r28
    1056:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    105a:	f1 cf       	rjmp	.-30     	; 0x103e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    105c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    105e:	fe 01       	movw	r30, r28
    1060:	e8 0f       	add	r30, r24
    1062:	f1 1d       	adc	r31, r1
    1064:	e3 5a       	subi	r30, 0xA3	; 163
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    106a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    106c:	f8 94       	cli
    _tx_buffer_head = i;
    106e:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1070:	ea 89       	ldd	r30, Y+18	; 0x12
    1072:	fb 89       	ldd	r31, Y+19	; 0x13
    1074:	80 81       	ld	r24, Z
    1076:	80 62       	ori	r24, 0x20	; 32
    1078:	0a c0       	rjmp	.+20     	; 0x108e <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    107a:	9f b7       	in	r25, 0x3f	; 63
    107c:	f8 94       	cli
      *_udr = c;
    107e:	ee 89       	ldd	r30, Y+22	; 0x16
    1080:	ff 89       	ldd	r31, Y+23	; 0x17
    1082:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1084:	e8 89       	ldd	r30, Y+16	; 0x10
    1086:	f9 89       	ldd	r31, Y+17	; 0x11
    1088:	80 81       	ld	r24, Z
    108a:	83 70       	andi	r24, 0x03	; 3
    108c:	80 64       	ori	r24, 0x40	; 64
    108e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1090:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	ff 90       	pop	r15
    10a0:	ef 90       	pop	r14
    10a2:	08 95       	ret

000010a4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    10aa:	88 8d       	ldd	r24, Y+24	; 0x18
    10ac:	88 23       	and	r24, r24
    10ae:	c9 f0       	breq	.+50     	; 0x10e2 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    10b0:	ea 89       	ldd	r30, Y+18	; 0x12
    10b2:	fb 89       	ldd	r31, Y+19	; 0x13
    10b4:	80 81       	ld	r24, Z
    10b6:	85 fd       	sbrc	r24, 5
    10b8:	05 c0       	rjmp	.+10     	; 0x10c4 <_ZN14HardwareSerial5flushEv+0x20>
    10ba:	a8 89       	ldd	r26, Y+16	; 0x10
    10bc:	b9 89       	ldd	r27, Y+17	; 0x11
    10be:	8c 91       	ld	r24, X
    10c0:	86 fd       	sbrc	r24, 6
    10c2:	0f c0       	rjmp	.+30     	; 0x10e2 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	07 fc       	sbrc	r0, 7
    10c8:	f5 cf       	rjmp	.-22     	; 0x10b4 <_ZN14HardwareSerial5flushEv+0x10>
    10ca:	80 81       	ld	r24, Z
    10cc:	85 ff       	sbrs	r24, 5
    10ce:	f2 cf       	rjmp	.-28     	; 0x10b4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    10d0:	a8 89       	ldd	r26, Y+16	; 0x10
    10d2:	b9 89       	ldd	r27, Y+17	; 0x11
    10d4:	8c 91       	ld	r24, X
    10d6:	85 ff       	sbrs	r24, 5
    10d8:	ed cf       	rjmp	.-38     	; 0x10b4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    10da:	ce 01       	movw	r24, r28
    10dc:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    10e0:	e7 cf       	rjmp	.-50     	; 0x10b0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	08 95       	ret

000010e8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    10e8:	cf 92       	push	r12
    10ea:	df 92       	push	r13
    10ec:	ef 92       	push	r14
    10ee:	ff 92       	push	r15
    10f0:	1f 93       	push	r17
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	ec 01       	movw	r28, r24
    10f8:	6a 01       	movw	r12, r20
    10fa:	7b 01       	movw	r14, r22
    10fc:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    10fe:	e8 89       	ldd	r30, Y+16	; 0x10
    1100:	f9 89       	ldd	r31, Y+17	; 0x11
    1102:	82 e0       	ldi	r24, 0x02	; 2
    1104:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1106:	41 15       	cp	r20, r1
    1108:	51 4e       	sbci	r21, 0xE1	; 225
    110a:	61 05       	cpc	r22, r1
    110c:	71 05       	cpc	r23, r1
    110e:	b1 f0       	breq	.+44     	; 0x113c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	79 e0       	ldi	r23, 0x09	; 9
    1114:	8d e3       	ldi	r24, 0x3D	; 61
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	a7 01       	movw	r20, r14
    111a:	96 01       	movw	r18, r12
    111c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__udivmodsi4>
    1120:	da 01       	movw	r26, r20
    1122:	c9 01       	movw	r24, r18
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	a1 09       	sbc	r26, r1
    1128:	b1 09       	sbc	r27, r1
    112a:	b6 95       	lsr	r27
    112c:	a7 95       	ror	r26
    112e:	97 95       	ror	r25
    1130:	87 95       	ror	r24
    1132:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1134:	21 15       	cp	r18, r1
    1136:	80 e1       	ldi	r24, 0x10	; 16
    1138:	38 07       	cpc	r19, r24
    113a:	a8 f0       	brcs	.+42     	; 0x1166 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    113c:	e8 89       	ldd	r30, Y+16	; 0x10
    113e:	f9 89       	ldd	r31, Y+17	; 0x11
    1140:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1142:	60 e8       	ldi	r22, 0x80	; 128
    1144:	74 e8       	ldi	r23, 0x84	; 132
    1146:	8e e1       	ldi	r24, 0x1E	; 30
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	a7 01       	movw	r20, r14
    114c:	96 01       	movw	r18, r12
    114e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__udivmodsi4>
    1152:	da 01       	movw	r26, r20
    1154:	c9 01       	movw	r24, r18
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	a1 09       	sbc	r26, r1
    115a:	b1 09       	sbc	r27, r1
    115c:	b6 95       	lsr	r27
    115e:	a7 95       	ror	r26
    1160:	97 95       	ror	r25
    1162:	87 95       	ror	r24
    1164:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1166:	ec 85       	ldd	r30, Y+12	; 0x0c
    1168:	fd 85       	ldd	r31, Y+13	; 0x0d
    116a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    116c:	ee 85       	ldd	r30, Y+14	; 0x0e
    116e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1170:	20 83       	st	Z, r18

  _written = false;
    1172:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1174:	ec 89       	ldd	r30, Y+20	; 0x14
    1176:	fd 89       	ldd	r31, Y+21	; 0x15
    1178:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    117a:	ea 89       	ldd	r30, Y+18	; 0x12
    117c:	fb 89       	ldd	r31, Y+19	; 0x13
    117e:	80 81       	ld	r24, Z
    1180:	80 61       	ori	r24, 0x10	; 16
    1182:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1184:	ea 89       	ldd	r30, Y+18	; 0x12
    1186:	fb 89       	ldd	r31, Y+19	; 0x13
    1188:	80 81       	ld	r24, Z
    118a:	88 60       	ori	r24, 0x08	; 8
    118c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    118e:	ea 89       	ldd	r30, Y+18	; 0x12
    1190:	fb 89       	ldd	r31, Y+19	; 0x13
    1192:	80 81       	ld	r24, Z
    1194:	80 68       	ori	r24, 0x80	; 128
    1196:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1198:	ea 89       	ldd	r30, Y+18	; 0x12
    119a:	fb 89       	ldd	r31, Y+19	; 0x13
    119c:	80 81       	ld	r24, Z
    119e:	8f 7d       	andi	r24, 0xDF	; 223
    11a0:	80 83       	st	Z, r24
}
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	ff 90       	pop	r15
    11aa:	ef 90       	pop	r14
    11ac:	df 90       	pop	r13
    11ae:	cf 90       	pop	r12
    11b0:	08 95       	ret

000011b2 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	08 95       	ret

000011b8 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    11b8:	08 95       	ret

000011ba <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    11ba:	1f 92       	push	r1
    11bc:	0f 92       	push	r0
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	0f 92       	push	r0
    11c2:	11 24       	eor	r1, r1
    11c4:	2f 93       	push	r18
    11c6:	8f 93       	push	r24
    11c8:	9f 93       	push	r25
    11ca:	ef 93       	push	r30
    11cc:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    11ce:	e0 91 d8 02 	lds	r30, 0x02D8	; 0x8002d8 <Serial+0x10>
    11d2:	f0 91 d9 02 	lds	r31, 0x02D9	; 0x8002d9 <Serial+0x11>
    11d6:	80 81       	ld	r24, Z
    11d8:	e0 91 de 02 	lds	r30, 0x02DE	; 0x8002de <Serial+0x16>
    11dc:	f0 91 df 02 	lds	r31, 0x02DF	; 0x8002df <Serial+0x17>
    11e0:	82 fd       	sbrc	r24, 2
    11e2:	12 c0       	rjmp	.+36     	; 0x1208 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    11e4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    11e6:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <Serial+0x19>
    11ea:	8f 5f       	subi	r24, 0xFF	; 255
    11ec:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    11ee:	20 91 e2 02 	lds	r18, 0x02E2	; 0x8002e2 <Serial+0x1a>
    11f2:	82 17       	cp	r24, r18
    11f4:	51 f0       	breq	.+20     	; 0x120a <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    11f6:	e0 91 e1 02 	lds	r30, 0x02E1	; 0x8002e1 <Serial+0x19>
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	e8 53       	subi	r30, 0x38	; 56
    11fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1200:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1202:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <Serial+0x19>
    1206:	01 c0       	rjmp	.+2      	; 0x120a <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1208:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    120a:	ff 91       	pop	r31
    120c:	ef 91       	pop	r30
    120e:	9f 91       	pop	r25
    1210:	8f 91       	pop	r24
    1212:	2f 91       	pop	r18
    1214:	0f 90       	pop	r0
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	0f 90       	pop	r0
    121a:	1f 90       	pop	r1
    121c:	18 95       	reti

0000121e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    121e:	1f 92       	push	r1
    1220:	0f 92       	push	r0
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	0f 92       	push	r0
    1226:	11 24       	eor	r1, r1
    1228:	2f 93       	push	r18
    122a:	3f 93       	push	r19
    122c:	4f 93       	push	r20
    122e:	5f 93       	push	r21
    1230:	6f 93       	push	r22
    1232:	7f 93       	push	r23
    1234:	8f 93       	push	r24
    1236:	9f 93       	push	r25
    1238:	af 93       	push	r26
    123a:	bf 93       	push	r27
    123c:	ef 93       	push	r30
    123e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1240:	88 ec       	ldi	r24, 0xC8	; 200
    1242:	92 e0       	ldi	r25, 0x02	; 2
    1244:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1248:	ff 91       	pop	r31
    124a:	ef 91       	pop	r30
    124c:	bf 91       	pop	r27
    124e:	af 91       	pop	r26
    1250:	9f 91       	pop	r25
    1252:	8f 91       	pop	r24
    1254:	7f 91       	pop	r23
    1256:	6f 91       	pop	r22
    1258:	5f 91       	pop	r21
    125a:	4f 91       	pop	r20
    125c:	3f 91       	pop	r19
    125e:	2f 91       	pop	r18
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	0f 90       	pop	r0
    1266:	1f 90       	pop	r1
    1268:	18 95       	reti

0000126a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    126a:	88 ec       	ldi	r24, 0xC8	; 200
    126c:	92 e0       	ldi	r25, 0x02	; 2
    126e:	0e 94 98 07 	call	0xf30	; 0xf30 <_ZN14HardwareSerial9availableEv>
    1272:	21 e0       	ldi	r18, 0x01	; 1
    1274:	89 2b       	or	r24, r25
    1276:	09 f4       	brne	.+2      	; 0x127a <_Z17Serial0_availablev+0x10>
    1278:	20 e0       	ldi	r18, 0x00	; 0
}
    127a:	82 2f       	mov	r24, r18
    127c:	08 95       	ret

0000127e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    127e:	e8 ec       	ldi	r30, 0xC8	; 200
    1280:	f2 e0       	ldi	r31, 0x02	; 2
    1282:	13 82       	std	Z+3, r1	; 0x03
    1284:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1286:	88 ee       	ldi	r24, 0xE8	; 232
    1288:	93 e0       	ldi	r25, 0x03	; 3
    128a:	a0 e0       	ldi	r26, 0x00	; 0
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	84 83       	std	Z+4, r24	; 0x04
    1290:	95 83       	std	Z+5, r25	; 0x05
    1292:	a6 83       	std	Z+6, r26	; 0x06
    1294:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1296:	86 e4       	ldi	r24, 0x46	; 70
    1298:	92 e0       	ldi	r25, 0x02	; 2
    129a:	91 83       	std	Z+1, r25	; 0x01
    129c:	80 83       	st	Z, r24
    129e:	85 ec       	ldi	r24, 0xC5	; 197
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	95 87       	std	Z+13, r25	; 0x0d
    12a4:	84 87       	std	Z+12, r24	; 0x0c
    12a6:	84 ec       	ldi	r24, 0xC4	; 196
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	97 87       	std	Z+15, r25	; 0x0f
    12ac:	86 87       	std	Z+14, r24	; 0x0e
    12ae:	80 ec       	ldi	r24, 0xC0	; 192
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	91 8b       	std	Z+17, r25	; 0x11
    12b4:	80 8b       	std	Z+16, r24	; 0x10
    12b6:	81 ec       	ldi	r24, 0xC1	; 193
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	93 8b       	std	Z+19, r25	; 0x13
    12bc:	82 8b       	std	Z+18, r24	; 0x12
    12be:	82 ec       	ldi	r24, 0xC2	; 194
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	95 8b       	std	Z+21, r25	; 0x15
    12c4:	84 8b       	std	Z+20, r24	; 0x14
    12c6:	86 ec       	ldi	r24, 0xC6	; 198
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	97 8b       	std	Z+23, r25	; 0x17
    12cc:	86 8b       	std	Z+22, r24	; 0x16
    12ce:	11 8e       	std	Z+25, r1	; 0x19
    12d0:	12 8e       	std	Z+26, r1	; 0x1a
    12d2:	13 8e       	std	Z+27, r1	; 0x1b
    12d4:	14 8e       	std	Z+28, r1	; 0x1c
    12d6:	08 95       	ret

000012d8 <initVariant>:
    12d8:	08 95       	ret

000012da <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    12da:	0e 94 4f 0c 	call	0x189e	; 0x189e <init>

	initVariant();
    12de:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    12e2:	0e 94 67 03 	call	0x6ce	; 0x6ce <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    12e6:	c5 ed       	ldi	r28, 0xD5	; 213
    12e8:	d7 e0       	ldi	r29, 0x07	; 7
#endif
	
	setup();
    
	for (;;) {
		loop();
    12ea:	0e 94 80 04 	call	0x900	; 0x900 <loop>
		if (serialEventRun) serialEventRun();
    12ee:	20 97       	sbiw	r28, 0x00	; 0
    12f0:	e1 f3       	breq	.-8      	; 0x12ea <main+0x10>
    12f2:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_Z14serialEventRunv>
    12f6:	f9 cf       	rjmp	.-14     	; 0x12ea <main+0x10>

000012f8 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    12f8:	cf 92       	push	r12
    12fa:	df 92       	push	r13
    12fc:	ef 92       	push	r14
    12fe:	ff 92       	push	r15
    1300:	0f 93       	push	r16
    1302:	1f 93       	push	r17
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
    1308:	6c 01       	movw	r12, r24
    130a:	7a 01       	movw	r14, r20
    130c:	8b 01       	movw	r16, r22
    130e:	c0 e0       	ldi	r28, 0x00	; 0
    1310:	d0 e0       	ldi	r29, 0x00	; 0
    1312:	ce 15       	cp	r28, r14
    1314:	df 05       	cpc	r29, r15
    1316:	81 f0       	breq	.+32     	; 0x1338 <_ZN5Print5writeEPKhj+0x40>
    1318:	d8 01       	movw	r26, r16
    131a:	6d 91       	ld	r22, X+
    131c:	8d 01       	movw	r16, r26
    131e:	d6 01       	movw	r26, r12
    1320:	ed 91       	ld	r30, X+
    1322:	fc 91       	ld	r31, X
    1324:	01 90       	ld	r0, Z+
    1326:	f0 81       	ld	r31, Z
    1328:	e0 2d       	mov	r30, r0
    132a:	c6 01       	movw	r24, r12
    132c:	09 95       	icall
    132e:	89 2b       	or	r24, r25
    1330:	11 f0       	breq	.+4      	; 0x1336 <_ZN5Print5writeEPKhj+0x3e>
    1332:	21 96       	adiw	r28, 0x01	; 1
    1334:	ee cf       	rjmp	.-36     	; 0x1312 <_ZN5Print5writeEPKhj+0x1a>
    1336:	7e 01       	movw	r14, r28
    1338:	c7 01       	movw	r24, r14
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	1f 91       	pop	r17
    1340:	0f 91       	pop	r16
    1342:	ff 90       	pop	r15
    1344:	ef 90       	pop	r14
    1346:	df 90       	pop	r13
    1348:	cf 90       	pop	r12
    134a:	08 95       	ret

0000134c <_ZN5Print5writeEPKc>:
    134c:	61 15       	cp	r22, r1
    134e:	71 05       	cpc	r23, r1
    1350:	79 f0       	breq	.+30     	; 0x1370 <_ZN5Print5writeEPKc+0x24>
    1352:	fb 01       	movw	r30, r22
    1354:	01 90       	ld	r0, Z+
    1356:	00 20       	and	r0, r0
    1358:	e9 f7       	brne	.-6      	; 0x1354 <_ZN5Print5writeEPKc+0x8>
    135a:	31 97       	sbiw	r30, 0x01	; 1
    135c:	af 01       	movw	r20, r30
    135e:	46 1b       	sub	r20, r22
    1360:	57 0b       	sbc	r21, r23
    1362:	dc 01       	movw	r26, r24
    1364:	ed 91       	ld	r30, X+
    1366:	fc 91       	ld	r31, X
    1368:	02 80       	ldd	r0, Z+2	; 0x02
    136a:	f3 81       	ldd	r31, Z+3	; 0x03
    136c:	e0 2d       	mov	r30, r0
    136e:	09 94       	ijmp
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	08 95       	ret

00001376 <_ZN5Print5printEPKc>:
    1376:	0c 94 a6 09 	jmp	0x134c	; 0x134c <_ZN5Print5writeEPKc>

0000137a <_ZN5Print5printEc>:
    137a:	dc 01       	movw	r26, r24
    137c:	ed 91       	ld	r30, X+
    137e:	fc 91       	ld	r31, X
    1380:	01 90       	ld	r0, Z+
    1382:	f0 81       	ld	r31, Z
    1384:	e0 2d       	mov	r30, r0
    1386:	09 94       	ijmp

00001388 <_ZN5Print7printlnEv>:
    1388:	64 e5       	ldi	r22, 0x54	; 84
    138a:	72 e0       	ldi	r23, 0x02	; 2
    138c:	0c 94 a6 09 	jmp	0x134c	; 0x134c <_ZN5Print5writeEPKc>

00001390 <_ZN5Print7printlnEPKc>:
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	ec 01       	movw	r28, r24
    139a:	0e 94 a6 09 	call	0x134c	; 0x134c <_ZN5Print5writeEPKc>
    139e:	8c 01       	movw	r16, r24
    13a0:	ce 01       	movw	r24, r28
    13a2:	0e 94 c4 09 	call	0x1388	; 0x1388 <_ZN5Print7printlnEv>
    13a6:	80 0f       	add	r24, r16
    13a8:	91 1f       	adc	r25, r17
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	1f 91       	pop	r17
    13b0:	0f 91       	pop	r16
    13b2:	08 95       	ret

000013b4 <_ZN5Print11printNumberEmh>:
    13b4:	8f 92       	push	r8
    13b6:	9f 92       	push	r9
    13b8:	af 92       	push	r10
    13ba:	bf 92       	push	r11
    13bc:	ef 92       	push	r14
    13be:	ff 92       	push	r15
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	a1 97       	sbiw	r28, 0x21	; 33
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	7c 01       	movw	r14, r24
    13da:	fa 01       	movw	r30, r20
    13dc:	cb 01       	movw	r24, r22
    13de:	19 a2       	std	Y+33, r1	; 0x21
    13e0:	22 30       	cpi	r18, 0x02	; 2
    13e2:	08 f4       	brcc	.+2      	; 0x13e6 <_ZN5Print11printNumberEmh+0x32>
    13e4:	2a e0       	ldi	r18, 0x0A	; 10
    13e6:	8e 01       	movw	r16, r28
    13e8:	0f 5d       	subi	r16, 0xDF	; 223
    13ea:	1f 4f       	sbci	r17, 0xFF	; 255
    13ec:	82 2e       	mov	r8, r18
    13ee:	91 2c       	mov	r9, r1
    13f0:	a1 2c       	mov	r10, r1
    13f2:	b1 2c       	mov	r11, r1
    13f4:	bf 01       	movw	r22, r30
    13f6:	a5 01       	movw	r20, r10
    13f8:	94 01       	movw	r18, r8
    13fa:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__udivmodsi4>
    13fe:	f9 01       	movw	r30, r18
    1400:	ca 01       	movw	r24, r20
    1402:	01 50       	subi	r16, 0x01	; 1
    1404:	11 09       	sbc	r17, r1
    1406:	6a 30       	cpi	r22, 0x0A	; 10
    1408:	10 f4       	brcc	.+4      	; 0x140e <_ZN5Print11printNumberEmh+0x5a>
    140a:	60 5d       	subi	r22, 0xD0	; 208
    140c:	01 c0       	rjmp	.+2      	; 0x1410 <_ZN5Print11printNumberEmh+0x5c>
    140e:	69 5c       	subi	r22, 0xC9	; 201
    1410:	d8 01       	movw	r26, r16
    1412:	6c 93       	st	X, r22
    1414:	23 2b       	or	r18, r19
    1416:	24 2b       	or	r18, r20
    1418:	25 2b       	or	r18, r21
    141a:	61 f7       	brne	.-40     	; 0x13f4 <_ZN5Print11printNumberEmh+0x40>
    141c:	b8 01       	movw	r22, r16
    141e:	c7 01       	movw	r24, r14
    1420:	0e 94 a6 09 	call	0x134c	; 0x134c <_ZN5Print5writeEPKc>
    1424:	a1 96       	adiw	r28, 0x21	; 33
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16
    1438:	ff 90       	pop	r15
    143a:	ef 90       	pop	r14
    143c:	bf 90       	pop	r11
    143e:	af 90       	pop	r10
    1440:	9f 90       	pop	r9
    1442:	8f 90       	pop	r8
    1444:	08 95       	ret

00001446 <_ZN5Print5printEmi>:
    1446:	21 15       	cp	r18, r1
    1448:	31 05       	cpc	r19, r1
    144a:	41 f4       	brne	.+16     	; 0x145c <_ZN5Print5printEmi+0x16>
    144c:	dc 01       	movw	r26, r24
    144e:	ed 91       	ld	r30, X+
    1450:	fc 91       	ld	r31, X
    1452:	01 90       	ld	r0, Z+
    1454:	f0 81       	ld	r31, Z
    1456:	e0 2d       	mov	r30, r0
    1458:	64 2f       	mov	r22, r20
    145a:	09 94       	ijmp
    145c:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <_ZN5Print11printNumberEmh>

00001460 <_ZN5Print5printEhi>:
    1460:	9a 01       	movw	r18, r20
    1462:	46 2f       	mov	r20, r22
    1464:	50 e0       	ldi	r21, 0x00	; 0
    1466:	60 e0       	ldi	r22, 0x00	; 0
    1468:	70 e0       	ldi	r23, 0x00	; 0
    146a:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <_ZN5Print5printEmi>

0000146e <_ZN5Print5printEji>:
    146e:	9a 01       	movw	r18, r20
    1470:	ab 01       	movw	r20, r22
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <_ZN5Print5printEmi>

0000147a <_ZN5Print5printEli>:
    147a:	cf 92       	push	r12
    147c:	df 92       	push	r13
    147e:	ef 92       	push	r14
    1480:	ff 92       	push	r15
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	21 15       	cp	r18, r1
    148c:	31 05       	cpc	r19, r1
    148e:	81 f4       	brne	.+32     	; 0x14b0 <_ZN5Print5printEli+0x36>
    1490:	dc 01       	movw	r26, r24
    1492:	ed 91       	ld	r30, X+
    1494:	fc 91       	ld	r31, X
    1496:	01 90       	ld	r0, Z+
    1498:	f0 81       	ld	r31, Z
    149a:	e0 2d       	mov	r30, r0
    149c:	64 2f       	mov	r22, r20
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	1f 91       	pop	r17
    14a4:	0f 91       	pop	r16
    14a6:	ff 90       	pop	r15
    14a8:	ef 90       	pop	r14
    14aa:	df 90       	pop	r13
    14ac:	cf 90       	pop	r12
    14ae:	09 94       	ijmp
    14b0:	2a 30       	cpi	r18, 0x0A	; 10
    14b2:	31 05       	cpc	r19, r1
    14b4:	01 f5       	brne	.+64     	; 0x14f6 <_ZN5Print5printEli+0x7c>
    14b6:	77 ff       	sbrs	r23, 7
    14b8:	1d c0       	rjmp	.+58     	; 0x14f4 <_ZN5Print5printEli+0x7a>
    14ba:	6a 01       	movw	r12, r20
    14bc:	7b 01       	movw	r14, r22
    14be:	ec 01       	movw	r28, r24
    14c0:	6d e2       	ldi	r22, 0x2D	; 45
    14c2:	0e 94 bd 09 	call	0x137a	; 0x137a <_ZN5Print5printEc>
    14c6:	8c 01       	movw	r16, r24
    14c8:	44 27       	eor	r20, r20
    14ca:	55 27       	eor	r21, r21
    14cc:	ba 01       	movw	r22, r20
    14ce:	4c 19       	sub	r20, r12
    14d0:	5d 09       	sbc	r21, r13
    14d2:	6e 09       	sbc	r22, r14
    14d4:	7f 09       	sbc	r23, r15
    14d6:	2a e0       	ldi	r18, 0x0A	; 10
    14d8:	ce 01       	movw	r24, r28
    14da:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_ZN5Print11printNumberEmh>
    14de:	80 0f       	add	r24, r16
    14e0:	91 1f       	adc	r25, r17
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	ff 90       	pop	r15
    14ec:	ef 90       	pop	r14
    14ee:	df 90       	pop	r13
    14f0:	cf 90       	pop	r12
    14f2:	08 95       	ret
    14f4:	2a e0       	ldi	r18, 0x0A	; 10
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	1f 91       	pop	r17
    14fc:	0f 91       	pop	r16
    14fe:	ff 90       	pop	r15
    1500:	ef 90       	pop	r14
    1502:	df 90       	pop	r13
    1504:	cf 90       	pop	r12
    1506:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <_ZN5Print11printNumberEmh>

0000150a <_ZN5Print5printEii>:
    150a:	9a 01       	movw	r18, r20
    150c:	ab 01       	movw	r20, r22
    150e:	77 0f       	add	r23, r23
    1510:	66 0b       	sbc	r22, r22
    1512:	77 0b       	sbc	r23, r23
    1514:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <_ZN5Print5printEli>

00001518 <_ZN5Print7printlnEii>:
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	ec 01       	movw	r28, r24
    1522:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN5Print5printEii>
    1526:	8c 01       	movw	r16, r24
    1528:	ce 01       	movw	r24, r28
    152a:	0e 94 c4 09 	call	0x1388	; 0x1388 <_ZN5Print7printlnEv>
    152e:	80 0f       	add	r24, r16
    1530:	91 1f       	adc	r25, r17
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	08 95       	ret

0000153c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    153c:	7f 92       	push	r7
    153e:	8f 92       	push	r8
    1540:	9f 92       	push	r9
    1542:	af 92       	push	r10
    1544:	bf 92       	push	r11
    1546:	cf 92       	push	r12
    1548:	df 92       	push	r13
    154a:	ef 92       	push	r14
    154c:	ff 92       	push	r15
    154e:	0f 93       	push	r16
    1550:	1f 93       	push	r17
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	8c 01       	movw	r16, r24
    1558:	6a 01       	movw	r12, r20
    155a:	7b 01       	movw	r14, r22
    155c:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    155e:	9a 01       	movw	r18, r20
    1560:	ab 01       	movw	r20, r22
    1562:	c7 01       	movw	r24, r14
    1564:	b6 01       	movw	r22, r12
    1566:	0e 94 65 13 	call	0x26ca	; 0x26ca <__unordsf2>
    156a:	88 23       	and	r24, r24
    156c:	19 f0       	breq	.+6      	; 0x1574 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    156e:	67 e5       	ldi	r22, 0x57	; 87
    1570:	72 e0       	ldi	r23, 0x02	; 2
    1572:	27 c0       	rjmp	.+78     	; 0x15c2 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    1574:	46 01       	movw	r8, r12
    1576:	57 01       	movw	r10, r14
    1578:	e8 94       	clt
    157a:	b7 f8       	bld	r11, 7
    157c:	2f ef       	ldi	r18, 0xFF	; 255
    157e:	3f ef       	ldi	r19, 0xFF	; 255
    1580:	4f e7       	ldi	r20, 0x7F	; 127
    1582:	5f e7       	ldi	r21, 0x7F	; 127
    1584:	c5 01       	movw	r24, r10
    1586:	b4 01       	movw	r22, r8
    1588:	0e 94 65 13 	call	0x26ca	; 0x26ca <__unordsf2>
    158c:	81 11       	cpse	r24, r1
    158e:	0d c0       	rjmp	.+26     	; 0x15aa <_ZN5Print10printFloatEdh+0x6e>
    1590:	2f ef       	ldi	r18, 0xFF	; 255
    1592:	3f ef       	ldi	r19, 0xFF	; 255
    1594:	4f e7       	ldi	r20, 0x7F	; 127
    1596:	5f e7       	ldi	r21, 0x7F	; 127
    1598:	c5 01       	movw	r24, r10
    159a:	b4 01       	movw	r22, r8
    159c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__cmpsf2>
    15a0:	18 16       	cp	r1, r24
    15a2:	1c f4       	brge	.+6      	; 0x15aa <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    15a4:	6b e5       	ldi	r22, 0x5B	; 91
    15a6:	72 e0       	ldi	r23, 0x02	; 2
    15a8:	0c c0       	rjmp	.+24     	; 0x15c2 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    15aa:	2f ef       	ldi	r18, 0xFF	; 255
    15ac:	3f ef       	ldi	r19, 0xFF	; 255
    15ae:	4f e7       	ldi	r20, 0x7F	; 127
    15b0:	5f e4       	ldi	r21, 0x4F	; 79
    15b2:	c7 01       	movw	r24, r14
    15b4:	b6 01       	movw	r22, r12
    15b6:	0e 94 26 07 	call	0xe4c	; 0xe4c <__gesf2>
    15ba:	18 16       	cp	r1, r24
    15bc:	94 f4       	brge	.+36     	; 0x15e2 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    15be:	6f e5       	ldi	r22, 0x5F	; 95
    15c0:	72 e0       	ldi	r23, 0x02	; 2
    15c2:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	1f 91       	pop	r17
    15ca:	0f 91       	pop	r16
    15cc:	ff 90       	pop	r15
    15ce:	ef 90       	pop	r14
    15d0:	df 90       	pop	r13
    15d2:	cf 90       	pop	r12
    15d4:	bf 90       	pop	r11
    15d6:	af 90       	pop	r10
    15d8:	9f 90       	pop	r9
    15da:	8f 90       	pop	r8
    15dc:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    15de:	0c 94 a6 09 	jmp	0x134c	; 0x134c <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    15e2:	2f ef       	ldi	r18, 0xFF	; 255
    15e4:	3f ef       	ldi	r19, 0xFF	; 255
    15e6:	4f e7       	ldi	r20, 0x7F	; 127
    15e8:	5f ec       	ldi	r21, 0xCF	; 207
    15ea:	c7 01       	movw	r24, r14
    15ec:	b6 01       	movw	r22, r12
    15ee:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__cmpsf2>
    15f2:	87 fd       	sbrc	r24, 7
    15f4:	e4 cf       	rjmp	.-56     	; 0x15be <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	a9 01       	movw	r20, r18
    15fc:	c7 01       	movw	r24, r14
    15fe:	b6 01       	movw	r22, r12
    1600:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__cmpsf2>
    1604:	87 ff       	sbrs	r24, 7
    1606:	0a c0       	rjmp	.+20     	; 0x161c <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    1608:	6d e2       	ldi	r22, 0x2D	; 45
    160a:	c8 01       	movw	r24, r16
    160c:	0e 94 bd 09 	call	0x137a	; 0x137a <_ZN5Print5printEc>
    1610:	ec 01       	movw	r28, r24
     number = -number;
    1612:	f7 fa       	bst	r15, 7
    1614:	f0 94       	com	r15
    1616:	f7 f8       	bld	r15, 7
    1618:	f0 94       	com	r15
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    161c:	c0 e0       	ldi	r28, 0x00	; 0
    161e:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1620:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	70 e0       	ldi	r23, 0x00	; 0
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    162a:	7b 14       	cp	r7, r11
    162c:	41 f0       	breq	.+16     	; 0x163e <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e2       	ldi	r20, 0x20	; 32
    1634:	51 e4       	ldi	r21, 0x41	; 65
    1636:	0e 94 cc 05 	call	0xb98	; 0xb98 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    163a:	b3 94       	inc	r11
    163c:	f6 cf       	rjmp	.-20     	; 0x162a <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    163e:	a7 01       	movw	r20, r14
    1640:	96 01       	movw	r18, r12
    1642:	0e 94 5b 05 	call	0xab6	; 0xab6 <__addsf3>
    1646:	6b 01       	movw	r12, r22
    1648:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    164a:	0e 94 45 06 	call	0xc8a	; 0xc8a <__fixunssfsi>
    164e:	4b 01       	movw	r8, r22
    1650:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1652:	2a e0       	ldi	r18, 0x0A	; 10
    1654:	ab 01       	movw	r20, r22
    1656:	bc 01       	movw	r22, r24
    1658:	c8 01       	movw	r24, r16
    165a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    165e:	c8 0f       	add	r28, r24
    1660:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1662:	77 20       	and	r7, r7
    1664:	b9 f1       	breq	.+110    	; 0x16d4 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1666:	c5 01       	movw	r24, r10
    1668:	b4 01       	movw	r22, r8
    166a:	0e 94 74 06 	call	0xce8	; 0xce8 <__floatunsisf>
    166e:	9b 01       	movw	r18, r22
    1670:	ac 01       	movw	r20, r24
    1672:	c7 01       	movw	r24, r14
    1674:	b6 01       	movw	r22, r12
    1676:	0e 94 5a 05 	call	0xab4	; 0xab4 <__subsf3>
    167a:	6b 01       	movw	r12, r22
    167c:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    167e:	6e e2       	ldi	r22, 0x2E	; 46
    1680:	c8 01       	movw	r24, r16
    1682:	0e 94 bd 09 	call	0x137a	; 0x137a <_ZN5Print5printEc>
    1686:	c8 0f       	add	r28, r24
    1688:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 e2       	ldi	r20, 0x20	; 32
    1690:	51 e4       	ldi	r21, 0x41	; 65
    1692:	c7 01       	movw	r24, r14
    1694:	b6 01       	movw	r22, r12
    1696:	0e 94 2b 07 	call	0xe56	; 0xe56 <__mulsf3>
    169a:	4b 01       	movw	r8, r22
    169c:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    169e:	0e 94 45 06 	call	0xc8a	; 0xc8a <__fixunssfsi>
    16a2:	6b 01       	movw	r12, r22
    16a4:	7c 01       	movw	r14, r24
    n += print(toPrint);
    16a6:	4a e0       	ldi	r20, 0x0A	; 10
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	c8 01       	movw	r24, r16
    16ac:	0e 94 37 0a 	call	0x146e	; 0x146e <_ZN5Print5printEji>
    16b0:	c8 0f       	add	r28, r24
    16b2:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    16b4:	b6 01       	movw	r22, r12
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	0e 94 74 06 	call	0xce8	; 0xce8 <__floatunsisf>
    16be:	9b 01       	movw	r18, r22
    16c0:	ac 01       	movw	r20, r24
    16c2:	c5 01       	movw	r24, r10
    16c4:	b4 01       	movw	r22, r8
    16c6:	0e 94 5a 05 	call	0xab4	; 0xab4 <__subsf3>
    16ca:	6b 01       	movw	r12, r22
    16cc:	7c 01       	movw	r14, r24
    16ce:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    16d0:	71 10       	cpse	r7, r1
    16d2:	db cf       	rjmp	.-74     	; 0x168a <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    16d4:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	ff 90       	pop	r15
    16e0:	ef 90       	pop	r14
    16e2:	df 90       	pop	r13
    16e4:	cf 90       	pop	r12
    16e6:	bf 90       	pop	r11
    16e8:	af 90       	pop	r10
    16ea:	9f 90       	pop	r9
    16ec:	8f 90       	pop	r8
    16ee:	7f 90       	pop	r7
    16f0:	08 95       	ret

000016f2 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    16f2:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <_ZN5Print10printFloatEdh>

000016f6 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1700:	0e 94 9e 0a 	call	0x153c	; 0x153c <_ZN5Print10printFloatEdh>
    1704:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1706:	ce 01       	movw	r24, r28
    1708:	0e 94 c4 09 	call	0x1388	; 0x1388 <_ZN5Print7printlnEv>
  return n;
}
    170c:	80 0f       	add	r24, r16
    170e:	91 1f       	adc	r25, r17
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	1f 91       	pop	r17
    1716:	0f 91       	pop	r16
    1718:	08 95       	ret

0000171a <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    171a:	1f 92       	push	r1
    171c:	0f 92       	push	r0
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	0f 92       	push	r0
    1722:	11 24       	eor	r1, r1
    1724:	2f 93       	push	r18
    1726:	3f 93       	push	r19
    1728:	8f 93       	push	r24
    172a:	9f 93       	push	r25
    172c:	af 93       	push	r26
    172e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1730:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <timer0_millis>
    1734:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <timer0_millis+0x1>
    1738:	a0 91 68 03 	lds	r26, 0x0368	; 0x800368 <timer0_millis+0x2>
    173c:	b0 91 69 03 	lds	r27, 0x0369	; 0x800369 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1740:	30 91 65 03 	lds	r19, 0x0365	; 0x800365 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1744:	23 e0       	ldi	r18, 0x03	; 3
    1746:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1748:	2d 37       	cpi	r18, 0x7D	; 125
    174a:	20 f4       	brcc	.+8      	; 0x1754 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    174c:	01 96       	adiw	r24, 0x01	; 1
    174e:	a1 1d       	adc	r26, r1
    1750:	b1 1d       	adc	r27, r1
    1752:	05 c0       	rjmp	.+10     	; 0x175e <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1754:	26 e8       	ldi	r18, 0x86	; 134
    1756:	23 0f       	add	r18, r19
		m += 1;
    1758:	02 96       	adiw	r24, 0x02	; 2
    175a:	a1 1d       	adc	r26, r1
    175c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    175e:	20 93 65 03 	sts	0x0365, r18	; 0x800365 <timer0_fract>
	timer0_millis = m;
    1762:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <timer0_millis>
    1766:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <timer0_millis+0x1>
    176a:	a0 93 68 03 	sts	0x0368, r26	; 0x800368 <timer0_millis+0x2>
    176e:	b0 93 69 03 	sts	0x0369, r27	; 0x800369 <timer0_millis+0x3>
	timer0_overflow_count++;
    1772:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <timer0_overflow_count>
    1776:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <timer0_overflow_count+0x1>
    177a:	a0 91 6c 03 	lds	r26, 0x036C	; 0x80036c <timer0_overflow_count+0x2>
    177e:	b0 91 6d 03 	lds	r27, 0x036D	; 0x80036d <timer0_overflow_count+0x3>
    1782:	01 96       	adiw	r24, 0x01	; 1
    1784:	a1 1d       	adc	r26, r1
    1786:	b1 1d       	adc	r27, r1
    1788:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <timer0_overflow_count>
    178c:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <timer0_overflow_count+0x1>
    1790:	a0 93 6c 03 	sts	0x036C, r26	; 0x80036c <timer0_overflow_count+0x2>
    1794:	b0 93 6d 03 	sts	0x036D, r27	; 0x80036d <timer0_overflow_count+0x3>
}
    1798:	bf 91       	pop	r27
    179a:	af 91       	pop	r26
    179c:	9f 91       	pop	r25
    179e:	8f 91       	pop	r24
    17a0:	3f 91       	pop	r19
    17a2:	2f 91       	pop	r18
    17a4:	0f 90       	pop	r0
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	0f 90       	pop	r0
    17aa:	1f 90       	pop	r1
    17ac:	18 95       	reti

000017ae <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    17ae:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    17b0:	f8 94       	cli
	m = timer0_millis;
    17b2:	60 91 66 03 	lds	r22, 0x0366	; 0x800366 <timer0_millis>
    17b6:	70 91 67 03 	lds	r23, 0x0367	; 0x800367 <timer0_millis+0x1>
    17ba:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <timer0_millis+0x2>
    17be:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <timer0_millis+0x3>
	SREG = oldSREG;
    17c2:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    17c4:	08 95       	ret

000017c6 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    17c6:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    17c8:	f8 94       	cli
	m = timer0_overflow_count;
    17ca:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <timer0_overflow_count>
    17ce:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <timer0_overflow_count+0x1>
    17d2:	a0 91 6c 03 	lds	r26, 0x036C	; 0x80036c <timer0_overflow_count+0x2>
    17d6:	b0 91 6d 03 	lds	r27, 0x036D	; 0x80036d <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    17da:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    17dc:	a8 9b       	sbis	0x15, 0	; 21
    17de:	05 c0       	rjmp	.+10     	; 0x17ea <micros+0x24>
    17e0:	2f 3f       	cpi	r18, 0xFF	; 255
    17e2:	19 f0       	breq	.+6      	; 0x17ea <micros+0x24>
		m++;
    17e4:	01 96       	adiw	r24, 0x01	; 1
    17e6:	a1 1d       	adc	r26, r1
    17e8:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    17ea:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    17ec:	ba 2f       	mov	r27, r26
    17ee:	a9 2f       	mov	r26, r25
    17f0:	98 2f       	mov	r25, r24
    17f2:	88 27       	eor	r24, r24
    17f4:	82 0f       	add	r24, r18
    17f6:	91 1d       	adc	r25, r1
    17f8:	a1 1d       	adc	r26, r1
    17fa:	b1 1d       	adc	r27, r1
    17fc:	bc 01       	movw	r22, r24
    17fe:	cd 01       	movw	r24, r26
    1800:	42 e0       	ldi	r20, 0x02	; 2
    1802:	66 0f       	add	r22, r22
    1804:	77 1f       	adc	r23, r23
    1806:	88 1f       	adc	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	4a 95       	dec	r20
    180c:	d1 f7       	brne	.-12     	; 0x1802 <micros+0x3c>
}
    180e:	08 95       	ret

00001810 <delay>:

void delay(unsigned long ms)
{
    1810:	8f 92       	push	r8
    1812:	9f 92       	push	r9
    1814:	af 92       	push	r10
    1816:	bf 92       	push	r11
    1818:	cf 92       	push	r12
    181a:	df 92       	push	r13
    181c:	ef 92       	push	r14
    181e:	ff 92       	push	r15
    1820:	6b 01       	movw	r12, r22
    1822:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    1824:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <micros>
    1828:	4b 01       	movw	r8, r22
    182a:	5c 01       	movw	r10, r24

	while (ms > 0) {
    182c:	c1 14       	cp	r12, r1
    182e:	d1 04       	cpc	r13, r1
    1830:	e1 04       	cpc	r14, r1
    1832:	f1 04       	cpc	r15, r1
    1834:	01 f1       	breq	.+64     	; 0x1876 <delay+0x66>
		yield();
    1836:	0e 94 64 13 	call	0x26c8	; 0x26c8 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    183a:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <micros>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	88 19       	sub	r24, r8
    1844:	99 09       	sbc	r25, r9
    1846:	aa 09       	sbc	r26, r10
    1848:	bb 09       	sbc	r27, r11
    184a:	88 3e       	cpi	r24, 0xE8	; 232
    184c:	93 40       	sbci	r25, 0x03	; 3
    184e:	a1 05       	cpc	r26, r1
    1850:	b1 05       	cpc	r27, r1
    1852:	60 f3       	brcs	.-40     	; 0x182c <delay+0x1c>
			ms--;
    1854:	21 e0       	ldi	r18, 0x01	; 1
    1856:	c2 1a       	sub	r12, r18
    1858:	d1 08       	sbc	r13, r1
    185a:	e1 08       	sbc	r14, r1
    185c:	f1 08       	sbc	r15, r1
			start += 1000;
    185e:	88 ee       	ldi	r24, 0xE8	; 232
    1860:	88 0e       	add	r8, r24
    1862:	83 e0       	ldi	r24, 0x03	; 3
    1864:	98 1e       	adc	r9, r24
    1866:	a1 1c       	adc	r10, r1
    1868:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    186a:	c1 14       	cp	r12, r1
    186c:	d1 04       	cpc	r13, r1
    186e:	e1 04       	cpc	r14, r1
    1870:	f1 04       	cpc	r15, r1
    1872:	19 f7       	brne	.-58     	; 0x183a <delay+0x2a>
    1874:	db cf       	rjmp	.-74     	; 0x182c <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    1876:	ff 90       	pop	r15
    1878:	ef 90       	pop	r14
    187a:	df 90       	pop	r13
    187c:	cf 90       	pop	r12
    187e:	bf 90       	pop	r11
    1880:	af 90       	pop	r10
    1882:	9f 90       	pop	r9
    1884:	8f 90       	pop	r8
    1886:	08 95       	ret

00001888 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1888:	82 30       	cpi	r24, 0x02	; 2
    188a:	91 05       	cpc	r25, r1
    188c:	38 f0       	brcs	.+14     	; 0x189c <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1896:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <delayMicroseconds+0x10>
    189c:	08 95       	ret

0000189e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    189e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    18a0:	84 b5       	in	r24, 0x24	; 36
    18a2:	82 60       	ori	r24, 0x02	; 2
    18a4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    18a6:	84 b5       	in	r24, 0x24	; 36
    18a8:	81 60       	ori	r24, 0x01	; 1
    18aa:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    18ac:	85 b5       	in	r24, 0x25	; 37
    18ae:	82 60       	ori	r24, 0x02	; 2
    18b0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    18b2:	85 b5       	in	r24, 0x25	; 37
    18b4:	81 60       	ori	r24, 0x01	; 1
    18b6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    18b8:	ee e6       	ldi	r30, 0x6E	; 110
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	81 60       	ori	r24, 0x01	; 1
    18c0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    18c2:	e1 e8       	ldi	r30, 0x81	; 129
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    18c8:	80 81       	ld	r24, Z
    18ca:	82 60       	ori	r24, 0x02	; 2
    18cc:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    18ce:	80 81       	ld	r24, Z
    18d0:	81 60       	ori	r24, 0x01	; 1
    18d2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    18d4:	e0 e8       	ldi	r30, 0x80	; 128
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	81 60       	ori	r24, 0x01	; 1
    18dc:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    18de:	e1 eb       	ldi	r30, 0xB1	; 177
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	84 60       	ori	r24, 0x04	; 4
    18e6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    18e8:	e0 eb       	ldi	r30, 0xB0	; 176
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	81 60       	ori	r24, 0x01	; 1
    18f0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    18f2:	ea e7       	ldi	r30, 0x7A	; 122
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	84 60       	ori	r24, 0x04	; 4
    18fa:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    18fc:	80 81       	ld	r24, Z
    18fe:	82 60       	ori	r24, 0x02	; 2
    1900:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1902:	80 81       	ld	r24, Z
    1904:	81 60       	ori	r24, 0x01	; 1
    1906:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1908:	80 81       	ld	r24, Z
    190a:	80 68       	ori	r24, 0x80	; 128
    190c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    190e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    1912:	08 95       	ret

00001914 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    1914:	8e 30       	cpi	r24, 0x0E	; 14
    1916:	08 f0       	brcs	.+2      	; 0x191a <analogRead+0x6>
    1918:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    191a:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <analog_reference>
    191e:	90 e4       	ldi	r25, 0x40	; 64
    1920:	29 9f       	mul	r18, r25
    1922:	90 01       	movw	r18, r0
    1924:	11 24       	eor	r1, r1
    1926:	87 70       	andi	r24, 0x07	; 7
    1928:	82 2b       	or	r24, r18
    192a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    192e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1932:	80 64       	ori	r24, 0x40	; 64
    1934:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1938:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    193c:	86 fd       	sbrc	r24, 6
    193e:	fc cf       	rjmp	.-8      	; 0x1938 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1940:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    1944:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    1948:	90 e0       	ldi	r25, 0x00	; 0
}
    194a:	92 2b       	or	r25, r18
    194c:	08 95       	ret

0000194e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    194e:	83 30       	cpi	r24, 0x03	; 3
    1950:	81 f0       	breq	.+32     	; 0x1972 <turnOffPWM+0x24>
    1952:	28 f4       	brcc	.+10     	; 0x195e <turnOffPWM+0x10>
    1954:	81 30       	cpi	r24, 0x01	; 1
    1956:	99 f0       	breq	.+38     	; 0x197e <turnOffPWM+0x30>
    1958:	82 30       	cpi	r24, 0x02	; 2
    195a:	a1 f0       	breq	.+40     	; 0x1984 <turnOffPWM+0x36>
    195c:	08 95       	ret
    195e:	87 30       	cpi	r24, 0x07	; 7
    1960:	a9 f0       	breq	.+42     	; 0x198c <turnOffPWM+0x3e>
    1962:	88 30       	cpi	r24, 0x08	; 8
    1964:	b9 f0       	breq	.+46     	; 0x1994 <turnOffPWM+0x46>
    1966:	84 30       	cpi	r24, 0x04	; 4
    1968:	d1 f4       	brne	.+52     	; 0x199e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    196a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    196e:	8f 7d       	andi	r24, 0xDF	; 223
    1970:	03 c0       	rjmp	.+6      	; 0x1978 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1972:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1976:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1978:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    197c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    197e:	84 b5       	in	r24, 0x24	; 36
    1980:	8f 77       	andi	r24, 0x7F	; 127
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1984:	84 b5       	in	r24, 0x24	; 36
    1986:	8f 7d       	andi	r24, 0xDF	; 223
    1988:	84 bd       	out	0x24, r24	; 36
    198a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    198c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1990:	8f 77       	andi	r24, 0x7F	; 127
    1992:	03 c0       	rjmp	.+6      	; 0x199a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1994:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1998:	8f 7d       	andi	r24, 0xDF	; 223
    199a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    199e:	08 95       	ret

000019a0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	fc 01       	movw	r30, r24
    19a8:	e4 58       	subi	r30, 0x84	; 132
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    19ae:	fc 01       	movw	r30, r24
    19b0:	e0 57       	subi	r30, 0x70	; 112
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    19b6:	88 23       	and	r24, r24
    19b8:	61 f1       	breq	.+88     	; 0x1a12 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	fc 01       	movw	r30, r24
    19c2:	e8 54       	subi	r30, 0x48	; 72
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	c5 91       	lpm	r28, Z+
    19c8:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    19ca:	fc 01       	movw	r30, r24
    19cc:	e2 55       	subi	r30, 0x52	; 82
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	a5 91       	lpm	r26, Z+
    19d2:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    19d4:	61 11       	cpse	r22, r1
    19d6:	09 c0       	rjmp	.+18     	; 0x19ea <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    19d8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    19da:	f8 94       	cli
		*reg &= ~bit;
    19dc:	88 81       	ld	r24, Y
    19de:	20 95       	com	r18
    19e0:	82 23       	and	r24, r18
    19e2:	88 83       	st	Y, r24
		*out &= ~bit;
    19e4:	ec 91       	ld	r30, X
    19e6:	2e 23       	and	r18, r30
    19e8:	0b c0       	rjmp	.+22     	; 0x1a00 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    19ea:	62 30       	cpi	r22, 0x02	; 2
    19ec:	61 f4       	brne	.+24     	; 0x1a06 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    19ee:	9f b7       	in	r25, 0x3f	; 63
                cli();
    19f0:	f8 94       	cli
		*reg &= ~bit;
    19f2:	88 81       	ld	r24, Y
    19f4:	32 2f       	mov	r19, r18
    19f6:	30 95       	com	r19
    19f8:	83 23       	and	r24, r19
    19fa:	88 83       	st	Y, r24
		*out |= bit;
    19fc:	ec 91       	ld	r30, X
    19fe:	2e 2b       	or	r18, r30
    1a00:	2c 93       	st	X, r18
		SREG = oldSREG;
    1a02:	9f bf       	out	0x3f, r25	; 63
    1a04:	06 c0       	rjmp	.+12     	; 0x1a12 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1a06:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1a08:	f8 94       	cli
		*reg |= bit;
    1a0a:	e8 81       	ld	r30, Y
    1a0c:	2e 2b       	or	r18, r30
    1a0e:	28 83       	st	Y, r18
		SREG = oldSREG;
    1a10:	8f bf       	out	0x3f, r24	; 63
	}
}
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	08 95       	ret

00001a18 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1a18:	1f 93       	push	r17
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	f9 01       	movw	r30, r18
    1a24:	e8 59       	subi	r30, 0x98	; 152
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1a2a:	f9 01       	movw	r30, r18
    1a2c:	e4 58       	subi	r30, 0x84	; 132
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1a32:	f9 01       	movw	r30, r18
    1a34:	e0 57       	subi	r30, 0x70	; 112
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1a3a:	cc 23       	and	r28, r28
    1a3c:	c1 f0       	breq	.+48     	; 0x1a6e <digitalWrite+0x56>
    1a3e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1a40:	81 11       	cpse	r24, r1
    1a42:	0e 94 a7 0c 	call	0x194e	; 0x194e <turnOffPWM>

	out = portOutputRegister(port);
    1a46:	ec 2f       	mov	r30, r28
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	ee 0f       	add	r30, r30
    1a4c:	ff 1f       	adc	r31, r31
    1a4e:	e2 55       	subi	r30, 0x52	; 82
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	a5 91       	lpm	r26, Z+
    1a54:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1a56:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1a58:	f8 94       	cli

	if (val == LOW) {
    1a5a:	11 11       	cpse	r17, r1
    1a5c:	04 c0       	rjmp	.+8      	; 0x1a66 <digitalWrite+0x4e>
		*out &= ~bit;
    1a5e:	8c 91       	ld	r24, X
    1a60:	d0 95       	com	r29
    1a62:	d8 23       	and	r29, r24
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <digitalWrite+0x52>
	} else {
		*out |= bit;
    1a66:	ec 91       	ld	r30, X
    1a68:	de 2b       	or	r29, r30
    1a6a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1a6c:	9f bf       	out	0x3f, r25	; 63
}
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	1f 91       	pop	r17
    1a74:	08 95       	ret

00001a76 <_ZN17DallasTemperature11validFamilyEPKh>:
	DeviceAddress deviceAddress;
	getAddress(deviceAddress, deviceIndex);

	return requestTemperaturesByAddress(deviceAddress);

}
    1a76:	fb 01       	movw	r30, r22
    1a78:	80 81       	ld	r24, Z
    1a7a:	88 32       	cpi	r24, 0x28	; 40
    1a7c:	61 f0       	breq	.+24     	; 0x1a96 <_ZN17DallasTemperature11validFamilyEPKh+0x20>
    1a7e:	28 f4       	brcc	.+10     	; 0x1a8a <_ZN17DallasTemperature11validFamilyEPKh+0x14>
    1a80:	80 31       	cpi	r24, 0x10	; 16
    1a82:	49 f0       	breq	.+18     	; 0x1a96 <_ZN17DallasTemperature11validFamilyEPKh+0x20>
    1a84:	82 32       	cpi	r24, 0x22	; 34
    1a86:	29 f4       	brne	.+10     	; 0x1a92 <_ZN17DallasTemperature11validFamilyEPKh+0x1c>
    1a88:	06 c0       	rjmp	.+12     	; 0x1a96 <_ZN17DallasTemperature11validFamilyEPKh+0x20>
    1a8a:	8b 33       	cpi	r24, 0x3B	; 59
    1a8c:	21 f0       	breq	.+8      	; 0x1a96 <_ZN17DallasTemperature11validFamilyEPKh+0x20>
    1a8e:	82 34       	cpi	r24, 0x42	; 66
    1a90:	11 f0       	breq	.+4      	; 0x1a96 <_ZN17DallasTemperature11validFamilyEPKh+0x20>
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	08 95       	ret
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	08 95       	ret

00001a9a <_ZN17DallasTemperature10setOneWireEP7OneWire>:
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	77 83       	std	Z+7, r23	; 0x07
    1a9e:	66 83       	std	Z+6, r22	; 0x06
    1aa0:	14 82       	std	Z+4, r1	; 0x04
    1aa2:	15 82       	std	Z+5, r1	; 0x05
    1aa4:	10 82       	st	Z, r1
    1aa6:	89 e0       	ldi	r24, 0x09	; 9
    1aa8:	81 83       	std	Z+1, r24	; 0x01
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	82 83       	std	Z+2, r24	; 0x02
    1aae:	83 83       	std	Z+3, r24	; 0x03
    1ab0:	08 95       	ret

00001ab2 <_ZN17DallasTemperatureC1EP7OneWire>:
    1ab2:	cf 93       	push	r28
    1ab4:	df 93       	push	r29
    1ab6:	ec 01       	movw	r28, r24
    1ab8:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <_ZN17DallasTemperature10setOneWireEP7OneWire>
    1abc:	1b 8a       	std	Y+19, r1	; 0x13
    1abe:	1a 8a       	std	Y+18, r1	; 0x12
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	08 95       	ret

00001ac6 <_ZN17DallasTemperature14getDeviceCountEv>:
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	84 81       	ldd	r24, Z+4	; 0x04
    1aca:	08 95       	ret

00001acc <_ZN17DallasTemperature12validAddressEPKh>:
    1acc:	cf 93       	push	r28
    1ace:	df 93       	push	r29
    1ad0:	eb 01       	movw	r28, r22
    1ad2:	67 e0       	ldi	r22, 0x07	; 7
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	0e 94 25 13 	call	0x264a	; 0x264a <_ZN7OneWire4crc8EPKhh>
    1ada:	91 e0       	ldi	r25, 0x01	; 1
    1adc:	2f 81       	ldd	r18, Y+7	; 0x07
    1ade:	28 13       	cpse	r18, r24
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	89 2f       	mov	r24, r25
    1ae4:	df 91       	pop	r29
    1ae6:	cf 91       	pop	r28
    1ae8:	08 95       	ret

00001aea <_ZN17DallasTemperature10getAddressEPhh>:
    1aea:	ef 92       	push	r14
    1aec:	ff 92       	push	r15
    1aee:	0f 93       	push	r16
    1af0:	1f 93       	push	r17
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	8c 01       	movw	r16, r24
    1af8:	7b 01       	movw	r14, r22
    1afa:	d4 2f       	mov	r29, r20
    1afc:	fc 01       	movw	r30, r24
    1afe:	86 81       	ldd	r24, Z+6	; 0x06
    1b00:	97 81       	ldd	r25, Z+7	; 0x07
    1b02:	0e 94 6f 12 	call	0x24de	; 0x24de <_ZN7OneWire12reset_searchEv>
    1b06:	c0 e0       	ldi	r28, 0x00	; 0
    1b08:	41 e0       	ldi	r20, 0x01	; 1
    1b0a:	b7 01       	movw	r22, r14
    1b0c:	f8 01       	movw	r30, r16
    1b0e:	86 81       	ldd	r24, Z+6	; 0x06
    1b10:	97 81       	ldd	r25, Z+7	; 0x07
    1b12:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN7OneWire6searchEPhb>
    1b16:	88 23       	and	r24, r24
    1b18:	59 f0       	breq	.+22     	; 0x1b30 <_ZN17DallasTemperature10getAddressEPhh+0x46>
    1b1a:	dc 13       	cpse	r29, r28
    1b1c:	06 c0       	rjmp	.+12     	; 0x1b2a <_ZN17DallasTemperature10getAddressEPhh+0x40>
    1b1e:	b7 01       	movw	r22, r14
    1b20:	c8 01       	movw	r24, r16
    1b22:	0e 94 66 0d 	call	0x1acc	; 0x1acc <_ZN17DallasTemperature12validAddressEPKh>
    1b26:	81 11       	cpse	r24, r1
    1b28:	04 c0       	rjmp	.+8      	; 0x1b32 <_ZN17DallasTemperature10getAddressEPhh+0x48>
    1b2a:	cf 5f       	subi	r28, 0xFF	; 255
    1b2c:	dc 17       	cp	r29, r28
    1b2e:	60 f7       	brcc	.-40     	; 0x1b08 <_ZN17DallasTemperature10getAddressEPhh+0x1e>
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	df 91       	pop	r29
    1b34:	cf 91       	pop	r28
    1b36:	1f 91       	pop	r17
    1b38:	0f 91       	pop	r16
    1b3a:	ff 90       	pop	r15
    1b3c:	ef 90       	pop	r14
    1b3e:	08 95       	ret

00001b40 <_ZN17DallasTemperature14readScratchPadEPKhPh>:
    1b40:	ef 92       	push	r14
    1b42:	ff 92       	push	r15
    1b44:	0f 93       	push	r16
    1b46:	1f 93       	push	r17
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	8c 01       	movw	r16, r24
    1b4e:	eb 01       	movw	r28, r22
    1b50:	7a 01       	movw	r14, r20
    1b52:	fc 01       	movw	r30, r24
    1b54:	86 81       	ldd	r24, Z+6	; 0x06
    1b56:	97 81       	ldd	r25, Z+7	; 0x07
    1b58:	0e 94 5f 11 	call	0x22be	; 0x22be <_ZN7OneWire5resetEv>
    1b5c:	88 23       	and	r24, r24
    1b5e:	11 f1       	breq	.+68     	; 0x1ba4 <_ZN17DallasTemperature14readScratchPadEPKhPh+0x64>
    1b60:	be 01       	movw	r22, r28
    1b62:	f8 01       	movw	r30, r16
    1b64:	86 81       	ldd	r24, Z+6	; 0x06
    1b66:	97 81       	ldd	r25, Z+7	; 0x07
    1b68:	0e 94 4c 12 	call	0x2498	; 0x2498 <_ZN7OneWire6selectEPKh>
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	6e eb       	ldi	r22, 0xBE	; 190
    1b70:	f8 01       	movw	r30, r16
    1b72:	86 81       	ldd	r24, Z+6	; 0x06
    1b74:	97 81       	ldd	r25, Z+7	; 0x07
    1b76:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <_ZN7OneWire5writeEhh>
    1b7a:	e7 01       	movw	r28, r14
    1b7c:	f9 e0       	ldi	r31, 0x09	; 9
    1b7e:	ef 0e       	add	r14, r31
    1b80:	f1 1c       	adc	r15, r1
    1b82:	f8 01       	movw	r30, r16
    1b84:	86 81       	ldd	r24, Z+6	; 0x06
    1b86:	97 81       	ldd	r25, Z+7	; 0x07
    1b88:	0e 94 30 12 	call	0x2460	; 0x2460 <_ZN7OneWire4readEv>
    1b8c:	89 93       	st	Y+, r24
    1b8e:	ce 15       	cp	r28, r14
    1b90:	df 05       	cpc	r29, r15
    1b92:	b9 f7       	brne	.-18     	; 0x1b82 <_ZN17DallasTemperature14readScratchPadEPKhPh+0x42>
    1b94:	f8 01       	movw	r30, r16
    1b96:	86 81       	ldd	r24, Z+6	; 0x06
    1b98:	97 81       	ldd	r25, Z+7	; 0x07
    1b9a:	0e 94 5f 11 	call	0x22be	; 0x22be <_ZN7OneWire5resetEv>
    1b9e:	91 e0       	ldi	r25, 0x01	; 1
    1ba0:	81 30       	cpi	r24, 0x01	; 1
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <_ZN17DallasTemperature14readScratchPadEPKhPh+0x66>
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	89 2f       	mov	r24, r25
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	1f 91       	pop	r17
    1bae:	0f 91       	pop	r16
    1bb0:	ff 90       	pop	r15
    1bb2:	ef 90       	pop	r14
    1bb4:	08 95       	ret

00001bb6 <_ZN17DallasTemperature11isConnectedEPKhPh>:
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
    1bba:	ea 01       	movw	r28, r20
    1bbc:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <_ZN17DallasTemperature14readScratchPadEPKhPh>
    1bc0:	88 23       	and	r24, r24
    1bc2:	39 f0       	breq	.+14     	; 0x1bd2 <_ZN17DallasTemperature11isConnectedEPKhPh+0x1c>
    1bc4:	68 e0       	ldi	r22, 0x08	; 8
    1bc6:	ce 01       	movw	r24, r28
    1bc8:	0e 94 25 13 	call	0x264a	; 0x264a <_ZN7OneWire4crc8EPKhh>
    1bcc:	91 e0       	ldi	r25, 0x01	; 1
    1bce:	28 85       	ldd	r18, Y+8	; 0x08
    1bd0:	28 13       	cpse	r18, r24
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	89 2f       	mov	r24, r25
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	08 95       	ret

00001bdc <_ZN17DallasTemperature15readPowerSupplyEPKh>:
    1bdc:	0f 93       	push	r16
    1bde:	1f 93       	push	r17
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	ec 01       	movw	r28, r24
    1be6:	8b 01       	movw	r16, r22
    1be8:	8e 81       	ldd	r24, Y+6	; 0x06
    1bea:	9f 81       	ldd	r25, Y+7	; 0x07
    1bec:	0e 94 5f 11 	call	0x22be	; 0x22be <_ZN7OneWire5resetEv>
    1bf0:	b8 01       	movw	r22, r16
    1bf2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf4:	9f 81       	ldd	r25, Y+7	; 0x07
    1bf6:	0e 94 4c 12 	call	0x2498	; 0x2498 <_ZN7OneWire6selectEPKh>
    1bfa:	40 e0       	ldi	r20, 0x00	; 0
    1bfc:	64 eb       	ldi	r22, 0xB4	; 180
    1bfe:	8e 81       	ldd	r24, Y+6	; 0x06
    1c00:	9f 81       	ldd	r25, Y+7	; 0x07
    1c02:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <_ZN7OneWire5writeEhh>
    1c06:	8e 81       	ldd	r24, Y+6	; 0x06
    1c08:	9f 81       	ldd	r25, Y+7	; 0x07
    1c0a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <_ZN7OneWire8read_bitEv>
    1c0e:	18 2f       	mov	r17, r24
    1c10:	8e 81       	ldd	r24, Y+6	; 0x06
    1c12:	9f 81       	ldd	r25, Y+7	; 0x07
    1c14:	0e 94 5f 11 	call	0x22be	; 0x22be <_ZN7OneWire5resetEv>
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	11 11       	cpse	r17, r1
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	1f 91       	pop	r17
    1c24:	0f 91       	pop	r16
    1c26:	08 95       	ret

00001c28 <_ZN17DallasTemperature13getResolutionEPKh>:
    1c28:	cf 93       	push	r28
    1c2a:	df 93       	push	r29
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	29 97       	sbiw	r28, 0x09	; 9
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
    1c3c:	fb 01       	movw	r30, r22
    1c3e:	20 81       	ld	r18, Z
    1c40:	20 31       	cpi	r18, 0x10	; 16
    1c42:	d1 f0       	breq	.+52     	; 0x1c78 <_ZN17DallasTemperature13getResolutionEPKh+0x50>
    1c44:	ae 01       	movw	r20, r28
    1c46:	4f 5f       	subi	r20, 0xFF	; 255
    1c48:	5f 4f       	sbci	r21, 0xFF	; 255
    1c4a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <_ZN17DallasTemperature11isConnectedEPKhPh>
    1c4e:	88 23       	and	r24, r24
    1c50:	89 f0       	breq	.+34     	; 0x1c74 <_ZN17DallasTemperature13getResolutionEPKh+0x4c>
    1c52:	8d 81       	ldd	r24, Y+5	; 0x05
    1c54:	8f 33       	cpi	r24, 0x3F	; 63
    1c56:	61 f0       	breq	.+24     	; 0x1c70 <_ZN17DallasTemperature13getResolutionEPKh+0x48>
    1c58:	20 f4       	brcc	.+8      	; 0x1c62 <_ZN17DallasTemperature13getResolutionEPKh+0x3a>
    1c5a:	8f 31       	cpi	r24, 0x1F	; 31
    1c5c:	59 f4       	brne	.+22     	; 0x1c74 <_ZN17DallasTemperature13getResolutionEPKh+0x4c>
    1c5e:	89 e0       	ldi	r24, 0x09	; 9
    1c60:	0c c0       	rjmp	.+24     	; 0x1c7a <_ZN17DallasTemperature13getResolutionEPKh+0x52>
    1c62:	8f 35       	cpi	r24, 0x5F	; 95
    1c64:	19 f0       	breq	.+6      	; 0x1c6c <_ZN17DallasTemperature13getResolutionEPKh+0x44>
    1c66:	8f 37       	cpi	r24, 0x7F	; 127
    1c68:	39 f0       	breq	.+14     	; 0x1c78 <_ZN17DallasTemperature13getResolutionEPKh+0x50>
    1c6a:	04 c0       	rjmp	.+8      	; 0x1c74 <_ZN17DallasTemperature13getResolutionEPKh+0x4c>
    1c6c:	8b e0       	ldi	r24, 0x0B	; 11
    1c6e:	05 c0       	rjmp	.+10     	; 0x1c7a <_ZN17DallasTemperature13getResolutionEPKh+0x52>
    1c70:	8a e0       	ldi	r24, 0x0A	; 10
    1c72:	03 c0       	rjmp	.+6      	; 0x1c7a <_ZN17DallasTemperature13getResolutionEPKh+0x52>
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	01 c0       	rjmp	.+2      	; 0x1c7a <_ZN17DallasTemperature13getResolutionEPKh+0x52>
    1c78:	8c e0       	ldi	r24, 0x0C	; 12
    1c7a:	29 96       	adiw	r28, 0x09	; 9
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	08 95       	ret

00001c8c <_ZN17DallasTemperature5beginEv>:
    1c8c:	ff 92       	push	r15
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	28 97       	sbiw	r28, 0x08	; 8
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	8c 01       	movw	r16, r24
    1ca8:	fc 01       	movw	r30, r24
    1caa:	86 81       	ldd	r24, Z+6	; 0x06
    1cac:	97 81       	ldd	r25, Z+7	; 0x07
    1cae:	0e 94 6f 12 	call	0x24de	; 0x24de <_ZN7OneWire12reset_searchEv>
    1cb2:	f8 01       	movw	r30, r16
    1cb4:	14 82       	std	Z+4, r1	; 0x04
    1cb6:	15 82       	std	Z+5, r1	; 0x05
    1cb8:	41 e0       	ldi	r20, 0x01	; 1
    1cba:	be 01       	movw	r22, r28
    1cbc:	6f 5f       	subi	r22, 0xFF	; 255
    1cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc0:	f8 01       	movw	r30, r16
    1cc2:	86 81       	ldd	r24, Z+6	; 0x06
    1cc4:	97 81       	ldd	r25, Z+7	; 0x07
    1cc6:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN7OneWire6searchEPhb>
    1cca:	88 23       	and	r24, r24
    1ccc:	e9 f1       	breq	.+122    	; 0x1d48 <_ZN17DallasTemperature5beginEv+0xbc>
    1cce:	be 01       	movw	r22, r28
    1cd0:	6f 5f       	subi	r22, 0xFF	; 255
    1cd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd4:	c8 01       	movw	r24, r16
    1cd6:	0e 94 66 0d 	call	0x1acc	; 0x1acc <_ZN17DallasTemperature12validAddressEPKh>
    1cda:	88 23       	and	r24, r24
    1cdc:	69 f3       	breq	.-38     	; 0x1cb8 <_ZN17DallasTemperature5beginEv+0x2c>
    1cde:	f8 01       	movw	r30, r16
    1ce0:	80 81       	ld	r24, Z
    1ce2:	81 11       	cpse	r24, r1
    1ce4:	08 c0       	rjmp	.+16     	; 0x1cf6 <_ZN17DallasTemperature5beginEv+0x6a>
    1ce6:	be 01       	movw	r22, r28
    1ce8:	6f 5f       	subi	r22, 0xFF	; 255
    1cea:	7f 4f       	sbci	r23, 0xFF	; 255
    1cec:	c8 01       	movw	r24, r16
    1cee:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_ZN17DallasTemperature15readPowerSupplyEPKh>
    1cf2:	81 11       	cpse	r24, r1
    1cf4:	25 c0       	rjmp	.+74     	; 0x1d40 <_ZN17DallasTemperature5beginEv+0xb4>
    1cf6:	f8 01       	movw	r30, r16
    1cf8:	f1 80       	ldd	r15, Z+1	; 0x01
    1cfa:	be 01       	movw	r22, r28
    1cfc:	6f 5f       	subi	r22, 0xFF	; 255
    1cfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1d00:	c8 01       	movw	r24, r16
    1d02:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN17DallasTemperature13getResolutionEPKh>
    1d06:	8f 15       	cp	r24, r15
    1d08:	18 f4       	brcc	.+6      	; 0x1d10 <_ZN17DallasTemperature5beginEv+0x84>
    1d0a:	f8 01       	movw	r30, r16
    1d0c:	81 81       	ldd	r24, Z+1	; 0x01
    1d0e:	06 c0       	rjmp	.+12     	; 0x1d1c <_ZN17DallasTemperature5beginEv+0x90>
    1d10:	be 01       	movw	r22, r28
    1d12:	6f 5f       	subi	r22, 0xFF	; 255
    1d14:	7f 4f       	sbci	r23, 0xFF	; 255
    1d16:	c8 01       	movw	r24, r16
    1d18:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN17DallasTemperature13getResolutionEPKh>
    1d1c:	f8 01       	movw	r30, r16
    1d1e:	81 83       	std	Z+1, r24	; 0x01
    1d20:	84 81       	ldd	r24, Z+4	; 0x04
    1d22:	8f 5f       	subi	r24, 0xFF	; 255
    1d24:	84 83       	std	Z+4, r24	; 0x04
    1d26:	be 01       	movw	r22, r28
    1d28:	6f 5f       	subi	r22, 0xFF	; 255
    1d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2c:	c8 01       	movw	r24, r16
    1d2e:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <_ZN17DallasTemperature11validFamilyEPKh>
    1d32:	88 23       	and	r24, r24
    1d34:	09 f2       	breq	.-126    	; 0x1cb8 <_ZN17DallasTemperature5beginEv+0x2c>
    1d36:	f8 01       	movw	r30, r16
    1d38:	85 81       	ldd	r24, Z+5	; 0x05
    1d3a:	8f 5f       	subi	r24, 0xFF	; 255
    1d3c:	85 83       	std	Z+5, r24	; 0x05
    1d3e:	bc cf       	rjmp	.-136    	; 0x1cb8 <_ZN17DallasTemperature5beginEv+0x2c>
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	f8 01       	movw	r30, r16
    1d44:	80 83       	st	Z, r24
    1d46:	d7 cf       	rjmp	.-82     	; 0x1cf6 <_ZN17DallasTemperature5beginEv+0x6a>
    1d48:	28 96       	adiw	r28, 0x08	; 8
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	f8 94       	cli
    1d4e:	de bf       	out	0x3e, r29	; 62
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	cd bf       	out	0x3d, r28	; 61
    1d54:	df 91       	pop	r29
    1d56:	cf 91       	pop	r28
    1d58:	1f 91       	pop	r17
    1d5a:	0f 91       	pop	r16
    1d5c:	ff 90       	pop	r15
    1d5e:	08 95       	ret

00001d60 <_ZN17DallasTemperature20isConversionCompleteEv>:
    1d60:	fc 01       	movw	r30, r24
    1d62:	86 81       	ldd	r24, Z+6	; 0x06
    1d64:	97 81       	ldd	r25, Z+7	; 0x07
    1d66:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <_ZN7OneWire8read_bitEv>
    1d6a:	91 e0       	ldi	r25, 0x01	; 1
    1d6c:	81 30       	cpi	r24, 0x01	; 1
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <_ZN17DallasTemperature20isConversionCompleteEv+0x12>
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	89 2f       	mov	r24, r25
    1d74:	08 95       	ret

00001d76 <_ZN17DallasTemperature27blockTillConversionCompleteEh>:
    1d76:	8f 92       	push	r8
    1d78:	9f 92       	push	r9
    1d7a:	af 92       	push	r10
    1d7c:	bf 92       	push	r11
    1d7e:	cf 92       	push	r12
    1d80:	df 92       	push	r13
    1d82:	ef 92       	push	r14
    1d84:	ff 92       	push	r15
    1d86:	0f 93       	push	r16
    1d88:	1f 93       	push	r17
    1d8a:	cf 93       	push	r28
    1d8c:	df 93       	push	r29
    1d8e:	ec 01       	movw	r28, r24
    1d90:	69 50       	subi	r22, 0x09	; 9
    1d92:	63 30       	cpi	r22, 0x03	; 3
    1d94:	48 f4       	brcc	.+18     	; 0x1da8 <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x32>
    1d96:	e6 2f       	mov	r30, r22
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	ee 0f       	add	r30, r30
    1d9c:	ff 1f       	adc	r31, r31
    1d9e:	ed 59       	subi	r30, 0x9D	; 157
    1da0:	fd 4f       	sbci	r31, 0xFD	; 253
    1da2:	00 81       	ld	r16, Z
    1da4:	11 81       	ldd	r17, Z+1	; 0x01
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x36>
    1da8:	0e ee       	ldi	r16, 0xEE	; 238
    1daa:	12 e0       	ldi	r17, 0x02	; 2
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	88 23       	and	r24, r24
    1db0:	f1 f0       	breq	.+60     	; 0x1dee <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x78>
    1db2:	88 81       	ld	r24, Y
    1db4:	81 11       	cpse	r24, r1
    1db6:	1b c0       	rjmp	.+54     	; 0x1dee <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x78>
    1db8:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <millis>
    1dbc:	4b 01       	movw	r8, r22
    1dbe:	5c 01       	movw	r10, r24
    1dc0:	68 01       	movw	r12, r16
    1dc2:	11 0f       	add	r17, r17
    1dc4:	ee 08       	sbc	r14, r14
    1dc6:	ff 08       	sbc	r15, r15
    1dc8:	ce 01       	movw	r24, r28
    1dca:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <_ZN17DallasTemperature20isConversionCompleteEv>
    1dce:	81 11       	cpse	r24, r1
    1dd0:	20 c0       	rjmp	.+64     	; 0x1e12 <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x9c>
    1dd2:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <millis>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	8c 19       	sub	r24, r12
    1ddc:	9d 09       	sbc	r25, r13
    1dde:	ae 09       	sbc	r26, r14
    1de0:	bf 09       	sbc	r27, r15
    1de2:	88 15       	cp	r24, r8
    1de4:	99 05       	cpc	r25, r9
    1de6:	aa 05       	cpc	r26, r10
    1de8:	bb 05       	cpc	r27, r11
    1dea:	70 f3       	brcs	.-36     	; 0x1dc8 <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x52>
    1dec:	12 c0       	rjmp	.+36     	; 0x1e12 <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x9c>
    1dee:	b8 01       	movw	r22, r16
    1df0:	11 0f       	add	r17, r17
    1df2:	88 0b       	sbc	r24, r24
    1df4:	99 0b       	sbc	r25, r25
    1df6:	df 91       	pop	r29
    1df8:	cf 91       	pop	r28
    1dfa:	1f 91       	pop	r17
    1dfc:	0f 91       	pop	r16
    1dfe:	ff 90       	pop	r15
    1e00:	ef 90       	pop	r14
    1e02:	df 90       	pop	r13
    1e04:	cf 90       	pop	r12
    1e06:	bf 90       	pop	r11
    1e08:	af 90       	pop	r10
    1e0a:	9f 90       	pop	r9
    1e0c:	8f 90       	pop	r8
    1e0e:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <delay>
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	1f 91       	pop	r17
    1e18:	0f 91       	pop	r16
    1e1a:	ff 90       	pop	r15
    1e1c:	ef 90       	pop	r14
    1e1e:	df 90       	pop	r13
    1e20:	cf 90       	pop	r12
    1e22:	bf 90       	pop	r11
    1e24:	af 90       	pop	r10
    1e26:	9f 90       	pop	r9
    1e28:	8f 90       	pop	r8
    1e2a:	08 95       	ret

00001e2c <_ZN17DallasTemperature19requestTemperaturesEv>:
    1e2c:	cf 93       	push	r28
    1e2e:	df 93       	push	r29
    1e30:	ec 01       	movw	r28, r24
    1e32:	8e 81       	ldd	r24, Y+6	; 0x06
    1e34:	9f 81       	ldd	r25, Y+7	; 0x07
    1e36:	0e 94 5f 11 	call	0x22be	; 0x22be <_ZN7OneWire5resetEv>
    1e3a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e3c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e3e:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <_ZN7OneWire4skipEv>
    1e42:	48 81       	ld	r20, Y
    1e44:	64 e4       	ldi	r22, 0x44	; 68
    1e46:	8e 81       	ldd	r24, Y+6	; 0x06
    1e48:	9f 81       	ldd	r25, Y+7	; 0x07
    1e4a:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <_ZN7OneWire5writeEhh>
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	88 23       	and	r24, r24
    1e52:	31 f0       	breq	.+12     	; 0x1e60 <_ZN17DallasTemperature19requestTemperaturesEv+0x34>
    1e54:	69 81       	ldd	r22, Y+1	; 0x01
    1e56:	ce 01       	movw	r24, r28
    1e58:	df 91       	pop	r29
    1e5a:	cf 91       	pop	r28
    1e5c:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <_ZN17DallasTemperature27blockTillConversionCompleteEh>
    1e60:	df 91       	pop	r29
    1e62:	cf 91       	pop	r28
    1e64:	08 95       	ret

00001e66 <_ZN17DallasTemperature20calculateTemperatureEPKhPh>:

}

// reads scratchpad and returns fixed-point temperature, scaling factor 2^-7
int16_t DallasTemperature::calculateTemperature(const uint8_t* deviceAddress,
		uint8_t* scratchPad) {
    1e66:	fa 01       	movw	r30, r20

	int16_t fpTemperature = (((int16_t) scratchPad[TEMP_MSB]) << 11)
			| (((int16_t) scratchPad[TEMP_LSB]) << 3);
    1e68:	21 81       	ldd	r18, Z+1	; 0x01
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	c9 01       	movw	r24, r18
    1e6e:	98 2f       	mov	r25, r24
    1e70:	88 27       	eor	r24, r24
    1e72:	99 0f       	add	r25, r25
    1e74:	99 0f       	add	r25, r25
    1e76:	99 0f       	add	r25, r25
    1e78:	20 81       	ld	r18, Z
    1e7a:	48 e0       	ldi	r20, 0x08	; 8
    1e7c:	24 9f       	mul	r18, r20
    1e7e:	90 01       	movw	r18, r0
    1e80:	11 24       	eor	r1, r1
    1e82:	28 2b       	or	r18, r24
    1e84:	39 2b       	or	r19, r25
	 value for a DS18S20, and James Cameron added legacy DS1820 support.

	 See - http://myarduinotoy.blogspot.co.uk/2013/02/12bit-result-from-ds18s20.html
	 */

	if (deviceAddress[0] == DS18S20MODEL) {
    1e86:	db 01       	movw	r26, r22
    1e88:	8c 91       	ld	r24, X
    1e8a:	80 31       	cpi	r24, 0x10	; 16
    1e8c:	c1 f4       	brne	.+48     	; 0x1ebe <_ZN17DallasTemperature20calculateTemperatureEPKhPh+0x58>
		fpTemperature = ((fpTemperature & 0xfff0) << 3) - 16
				+ (((scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) << 7)
    1e8e:	67 81       	ldd	r22, Z+7	; 0x07
    1e90:	70 e0       	ldi	r23, 0x00	; 0
    1e92:	86 81       	ldd	r24, Z+6	; 0x06
    1e94:	ab 01       	movw	r20, r22
    1e96:	48 1b       	sub	r20, r24
    1e98:	51 09       	sbc	r21, r1
    1e9a:	ca 01       	movw	r24, r20
    1e9c:	96 95       	lsr	r25
    1e9e:	98 2f       	mov	r25, r24
    1ea0:	88 27       	eor	r24, r24
    1ea2:	97 95       	ror	r25
    1ea4:	87 95       	ror	r24
    1ea6:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__divmodhi4>
    1eaa:	60 51       	subi	r22, 0x10	; 16
    1eac:	71 09       	sbc	r23, r1
    1eae:	20 7f       	andi	r18, 0xF0	; 240
    1eb0:	53 e0       	ldi	r21, 0x03	; 3
    1eb2:	22 0f       	add	r18, r18
    1eb4:	33 1f       	adc	r19, r19
    1eb6:	5a 95       	dec	r21
    1eb8:	e1 f7       	brne	.-8      	; 0x1eb2 <_ZN17DallasTemperature20calculateTemperatureEPKhPh+0x4c>
    1eba:	26 0f       	add	r18, r22
    1ebc:	37 1f       	adc	r19, r23
						/ scratchPad[COUNT_PER_C]);
	}

	return fpTemperature;
}
    1ebe:	c9 01       	movw	r24, r18
    1ec0:	08 95       	ret

00001ec2 <_ZN17DallasTemperature7getTempEPKh>:
// returns temperature in 1/128 degrees C or DEVICE_DISCONNECTED_RAW if the
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED_RAW is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
int16_t DallasTemperature::getTemp(const uint8_t* deviceAddress) {
    1ec2:	ef 92       	push	r14
    1ec4:	ff 92       	push	r15
    1ec6:	0f 93       	push	r16
    1ec8:	1f 93       	push	r17
    1eca:	cf 93       	push	r28
    1ecc:	df 93       	push	r29
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	29 97       	sbiw	r28, 0x09	; 9
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	de bf       	out	0x3e, r29	; 62
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	cd bf       	out	0x3d, r28	; 61
    1ede:	8c 01       	movw	r16, r24
    1ee0:	7b 01       	movw	r14, r22

	ScratchPad scratchPad;
	if (isConnected(deviceAddress, scratchPad))
    1ee2:	ae 01       	movw	r20, r28
    1ee4:	4f 5f       	subi	r20, 0xFF	; 255
    1ee6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee8:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <_ZN17DallasTemperature11isConnectedEPKhPh>
    1eec:	88 23       	and	r24, r24
    1eee:	41 f0       	breq	.+16     	; 0x1f00 <_ZN17DallasTemperature7getTempEPKh+0x3e>
		return calculateTemperature(deviceAddress, scratchPad);
    1ef0:	ae 01       	movw	r20, r28
    1ef2:	4f 5f       	subi	r20, 0xFF	; 255
    1ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef6:	b7 01       	movw	r22, r14
    1ef8:	c8 01       	movw	r24, r16
    1efa:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <_ZN17DallasTemperature20calculateTemperatureEPKhPh>
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <_ZN17DallasTemperature7getTempEPKh+0x42>
	return DEVICE_DISCONNECTED_RAW;
    1f00:	80 e8       	ldi	r24, 0x80	; 128
    1f02:	94 ee       	ldi	r25, 0xE4	; 228

}
    1f04:	29 96       	adiw	r28, 0x09	; 9
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	f8 94       	cli
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	cd bf       	out	0x3d, r28	; 61
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
    1f14:	1f 91       	pop	r17
    1f16:	0f 91       	pop	r16
    1f18:	ff 90       	pop	r15
    1f1a:	ef 90       	pop	r14
    1f1c:	08 95       	ret

00001f1e <_ZN17DallasTemperature8getTempCEPKh>:
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED_C is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(const uint8_t* deviceAddress) {
	return rawToCelsius(getTemp(deviceAddress));
    1f1e:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_ZN17DallasTemperature7getTempEPKh>
}

// convert from raw to Celsius
float DallasTemperature::rawToCelsius(int16_t raw) {

	if (raw <= DEVICE_DISCONNECTED_RAW)
    1f22:	81 38       	cpi	r24, 0x81	; 129
    1f24:	24 ee       	ldi	r18, 0xE4	; 228
    1f26:	92 07       	cpc	r25, r18
    1f28:	6c f0       	brlt	.+26     	; 0x1f44 <_ZN17DallasTemperature8getTempCEPKh+0x26>
		return DEVICE_DISCONNECTED_C;
	// C = RAW/128
	return (float) raw * 0.0078125;
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	99 0f       	add	r25, r25
    1f2e:	88 0b       	sbc	r24, r24
    1f30:	99 0b       	sbc	r25, r25
    1f32:	0e 94 76 06 	call	0xcec	; 0xcec <__floatsisf>
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e0       	ldi	r20, 0x00	; 0
    1f3c:	5c e3       	ldi	r21, 0x3C	; 60
    1f3e:	0e 94 2b 07 	call	0xe56	; 0xe56 <__mulsf3>
    1f42:	08 95       	ret

// convert from raw to Celsius
float DallasTemperature::rawToCelsius(int16_t raw) {

	if (raw <= DEVICE_DISCONNECTED_RAW)
		return DEVICE_DISCONNECTED_C;
    1f44:	60 e0       	ldi	r22, 0x00	; 0
    1f46:	70 e0       	ldi	r23, 0x00	; 0
    1f48:	8e ef       	ldi	r24, 0xFE	; 254
    1f4a:	92 ec       	ldi	r25, 0xC2	; 194
// the numeric value of DEVICE_DISCONNECTED_C is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(const uint8_t* deviceAddress) {
	return rawToCelsius(getTemp(deviceAddress));
}
    1f4c:	08 95       	ret

00001f4e <_ZN13LiquidCrystal11pulseEnableEv>:
}

// This will 'left justify' text from the cursor
void LiquidCrystal::noAutoscroll(void) {
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
    1f4e:	cf 93       	push	r28
    1f50:	df 93       	push	r29
    1f52:	ec 01       	movw	r28, r24
    1f54:	60 e0       	ldi	r22, 0x00	; 0
    1f56:	8e 81       	ldd	r24, Y+6	; 0x06
    1f58:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <digitalWrite>
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	0e 94 44 0c 	call	0x1888	; 0x1888 <delayMicroseconds>
    1f64:	61 e0       	ldi	r22, 0x01	; 1
    1f66:	8e 81       	ldd	r24, Y+6	; 0x06
    1f68:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <digitalWrite>
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	0e 94 44 0c 	call	0x1888	; 0x1888 <delayMicroseconds>
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	8e 81       	ldd	r24, Y+6	; 0x06
    1f78:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <digitalWrite>
    1f7c:	84 e6       	ldi	r24, 0x64	; 100
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	df 91       	pop	r29
    1f82:	cf 91       	pop	r28
    1f84:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <delayMicroseconds>

00001f88 <_ZN13LiquidCrystal10write4bitsEh>:
    1f88:	cf 92       	push	r12
    1f8a:	df 92       	push	r13
    1f8c:	ef 92       	push	r14
    1f8e:	ff 92       	push	r15
    1f90:	0f 93       	push	r16
    1f92:	1f 93       	push	r17
    1f94:	cf 93       	push	r28
    1f96:	df 93       	push	r29
    1f98:	6c 01       	movw	r12, r24
    1f9a:	7c 01       	movw	r14, r24
    1f9c:	87 e0       	ldi	r24, 0x07	; 7
    1f9e:	e8 0e       	add	r14, r24
    1fa0:	f1 1c       	adc	r15, r1
    1fa2:	c0 e0       	ldi	r28, 0x00	; 0
    1fa4:	d0 e0       	ldi	r29, 0x00	; 0
    1fa6:	06 2f       	mov	r16, r22
    1fa8:	10 e0       	ldi	r17, 0x00	; 0
    1faa:	b8 01       	movw	r22, r16
    1fac:	0c 2e       	mov	r0, r28
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
    1fb0:	75 95       	asr	r23
    1fb2:	67 95       	ror	r22
    1fb4:	0a 94       	dec	r0
    1fb6:	e2 f7       	brpl	.-8      	; 0x1fb0 <_ZN13LiquidCrystal10write4bitsEh+0x28>
    1fb8:	61 70       	andi	r22, 0x01	; 1
    1fba:	f7 01       	movw	r30, r14
    1fbc:	81 91       	ld	r24, Z+
    1fbe:	7f 01       	movw	r14, r30
    1fc0:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <digitalWrite>
    1fc4:	21 96       	adiw	r28, 0x01	; 1
    1fc6:	c4 30       	cpi	r28, 0x04	; 4
    1fc8:	d1 05       	cpc	r29, r1
    1fca:	79 f7       	brne	.-34     	; 0x1faa <_ZN13LiquidCrystal10write4bitsEh+0x22>
    1fcc:	c6 01       	movw	r24, r12
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	1f 91       	pop	r17
    1fd4:	0f 91       	pop	r16
    1fd6:	ff 90       	pop	r15
    1fd8:	ef 90       	pop	r14
    1fda:	df 90       	pop	r13
    1fdc:	cf 90       	pop	r12
    1fde:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <_ZN13LiquidCrystal11pulseEnableEv>

00001fe2 <_ZN13LiquidCrystal10write8bitsEh>:
    1fe2:	cf 92       	push	r12
    1fe4:	df 92       	push	r13
    1fe6:	ef 92       	push	r14
    1fe8:	ff 92       	push	r15
    1fea:	0f 93       	push	r16
    1fec:	1f 93       	push	r17
    1fee:	cf 93       	push	r28
    1ff0:	df 93       	push	r29
    1ff2:	6c 01       	movw	r12, r24
    1ff4:	7c 01       	movw	r14, r24
    1ff6:	87 e0       	ldi	r24, 0x07	; 7
    1ff8:	e8 0e       	add	r14, r24
    1ffa:	f1 1c       	adc	r15, r1
    1ffc:	c0 e0       	ldi	r28, 0x00	; 0
    1ffe:	d0 e0       	ldi	r29, 0x00	; 0
    2000:	06 2f       	mov	r16, r22
    2002:	10 e0       	ldi	r17, 0x00	; 0
    2004:	b8 01       	movw	r22, r16
    2006:	0c 2e       	mov	r0, r28
    2008:	02 c0       	rjmp	.+4      	; 0x200e <_ZN13LiquidCrystal10write8bitsEh+0x2c>
    200a:	75 95       	asr	r23
    200c:	67 95       	ror	r22
    200e:	0a 94       	dec	r0
    2010:	e2 f7       	brpl	.-8      	; 0x200a <_ZN13LiquidCrystal10write8bitsEh+0x28>
    2012:	61 70       	andi	r22, 0x01	; 1
    2014:	f7 01       	movw	r30, r14
    2016:	81 91       	ld	r24, Z+
    2018:	7f 01       	movw	r14, r30
    201a:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <digitalWrite>
    201e:	21 96       	adiw	r28, 0x01	; 1
    2020:	c8 30       	cpi	r28, 0x08	; 8
    2022:	d1 05       	cpc	r29, r1
    2024:	79 f7       	brne	.-34     	; 0x2004 <_ZN13LiquidCrystal10write8bitsEh+0x22>
    2026:	c6 01       	movw	r24, r12
    2028:	df 91       	pop	r29
    202a:	cf 91       	pop	r28
    202c:	1f 91       	pop	r17
    202e:	0f 91       	pop	r16
    2030:	ff 90       	pop	r15
    2032:	ef 90       	pop	r14
    2034:	df 90       	pop	r13
    2036:	cf 90       	pop	r12
    2038:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <_ZN13LiquidCrystal11pulseEnableEv>

0000203c <_ZN13LiquidCrystal4sendEhh>:
    203c:	1f 93       	push	r17
    203e:	cf 93       	push	r28
    2040:	df 93       	push	r29
    2042:	ec 01       	movw	r28, r24
    2044:	16 2f       	mov	r17, r22
    2046:	64 2f       	mov	r22, r20
    2048:	8c 81       	ldd	r24, Y+4	; 0x04
    204a:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <digitalWrite>
    204e:	8d 81       	ldd	r24, Y+5	; 0x05
    2050:	8f 3f       	cpi	r24, 0xFF	; 255
    2052:	19 f0       	breq	.+6      	; 0x205a <_ZN13LiquidCrystal4sendEhh+0x1e>
    2054:	60 e0       	ldi	r22, 0x00	; 0
    2056:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <digitalWrite>
    205a:	8f 85       	ldd	r24, Y+15	; 0x0f
    205c:	61 2f       	mov	r22, r17
    205e:	84 ff       	sbrs	r24, 4
    2060:	06 c0       	rjmp	.+12     	; 0x206e <_ZN13LiquidCrystal4sendEhh+0x32>
    2062:	ce 01       	movw	r24, r28
    2064:	df 91       	pop	r29
    2066:	cf 91       	pop	r28
    2068:	1f 91       	pop	r17
    206a:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <_ZN13LiquidCrystal10write8bitsEh>
    206e:	70 e0       	ldi	r23, 0x00	; 0
    2070:	84 e0       	ldi	r24, 0x04	; 4
    2072:	75 95       	asr	r23
    2074:	67 95       	ror	r22
    2076:	8a 95       	dec	r24
    2078:	e1 f7       	brne	.-8      	; 0x2072 <_ZN13LiquidCrystal4sendEhh+0x36>
    207a:	ce 01       	movw	r24, r28
    207c:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <_ZN13LiquidCrystal10write4bitsEh>
    2080:	61 2f       	mov	r22, r17
    2082:	ce 01       	movw	r24, r28
    2084:	df 91       	pop	r29
    2086:	cf 91       	pop	r28
    2088:	1f 91       	pop	r17
    208a:	0c 94 c4 0f 	jmp	0x1f88	; 0x1f88 <_ZN13LiquidCrystal10write4bitsEh>

0000208e <_ZN13LiquidCrystal7commandEh>:
    208e:	40 e0       	ldi	r20, 0x00	; 0
    2090:	0c 94 1e 10 	jmp	0x203c	; 0x203c <_ZN13LiquidCrystal4sendEhh>

00002094 <_ZN13LiquidCrystal5clearEv>:
    2094:	61 e0       	ldi	r22, 0x01	; 1
    2096:	0e 94 47 10 	call	0x208e	; 0x208e <_ZN13LiquidCrystal7commandEh>
    209a:	80 ed       	ldi	r24, 0xD0	; 208
    209c:	97 e0       	ldi	r25, 0x07	; 7
    209e:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <delayMicroseconds>

000020a2 <_ZN13LiquidCrystal9setCursorEhh>:
    20a2:	fc 01       	movw	r30, r24
    20a4:	44 30       	cpi	r20, 0x04	; 4
    20a6:	08 f0       	brcs	.+2      	; 0x20aa <_ZN13LiquidCrystal9setCursorEhh+0x8>
    20a8:	43 e0       	ldi	r20, 0x03	; 3
    20aa:	83 89       	ldd	r24, Z+19	; 0x13
    20ac:	48 17       	cp	r20, r24
    20ae:	10 f0       	brcs	.+4      	; 0x20b4 <_ZN13LiquidCrystal9setCursorEhh+0x12>
    20b0:	4f ef       	ldi	r20, 0xFF	; 255
    20b2:	48 0f       	add	r20, r24
    20b4:	df 01       	movw	r26, r30
    20b6:	a4 0f       	add	r26, r20
    20b8:	b1 1d       	adc	r27, r1
    20ba:	54 96       	adiw	r26, 0x14	; 20
    20bc:	9c 91       	ld	r25, X
    20be:	69 0f       	add	r22, r25
    20c0:	60 68       	ori	r22, 0x80	; 128
    20c2:	cf 01       	movw	r24, r30
    20c4:	0c 94 47 10 	jmp	0x208e	; 0x208e <_ZN13LiquidCrystal7commandEh>

000020c8 <_ZN13LiquidCrystal7displayEv>:
    20c8:	fc 01       	movw	r30, r24
    20ca:	60 89       	ldd	r22, Z+16	; 0x10
    20cc:	26 2f       	mov	r18, r22
    20ce:	24 60       	ori	r18, 0x04	; 4
    20d0:	20 8b       	std	Z+16, r18	; 0x10
    20d2:	6c 60       	ori	r22, 0x0C	; 12
    20d4:	0c 94 47 10 	jmp	0x208e	; 0x208e <_ZN13LiquidCrystal7commandEh>

000020d8 <_ZN13LiquidCrystal5beginEhhh>:
    20d8:	ef 92       	push	r14
    20da:	ff 92       	push	r15
    20dc:	0f 93       	push	r16
    20de:	1f 93       	push	r17
    20e0:	cf 93       	push	r28
    20e2:	df 93       	push	r29
    20e4:	ec 01       	movw	r28, r24
    20e6:	42 30       	cpi	r20, 0x02	; 2
    20e8:	18 f0       	brcs	.+6      	; 0x20f0 <_ZN13LiquidCrystal5beginEhhh+0x18>
    20ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ec:	88 60       	ori	r24, 0x08	; 8
    20ee:	8f 87       	std	Y+15, r24	; 0x0f
    20f0:	4b 8b       	std	Y+19, r20	; 0x13
    20f2:	1c 8a       	std	Y+20, r1	; 0x14
    20f4:	80 e4       	ldi	r24, 0x40	; 64
    20f6:	8d 8b       	std	Y+21, r24	; 0x15
    20f8:	6e 8b       	std	Y+22, r22	; 0x16
    20fa:	70 e0       	ldi	r23, 0x00	; 0
    20fc:	60 5c       	subi	r22, 0xC0	; 192
    20fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2100:	6f 8b       	std	Y+23, r22	; 0x17
    2102:	22 23       	and	r18, r18
    2104:	29 f0       	breq	.+10     	; 0x2110 <_ZN13LiquidCrystal5beginEhhh+0x38>
    2106:	41 30       	cpi	r20, 0x01	; 1
    2108:	19 f4       	brne	.+6      	; 0x2110 <_ZN13LiquidCrystal5beginEhhh+0x38>
    210a:	8f 85       	ldd	r24, Y+15	; 0x0f
    210c:	84 60       	ori	r24, 0x04	; 4
    210e:	8f 87       	std	Y+15, r24	; 0x0f
    2110:	61 e0       	ldi	r22, 0x01	; 1
    2112:	8c 81       	ldd	r24, Y+4	; 0x04
    2114:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <pinMode>
    2118:	8d 81       	ldd	r24, Y+5	; 0x05
    211a:	8f 3f       	cpi	r24, 0xFF	; 255
    211c:	19 f0       	breq	.+6      	; 0x2124 <_ZN13LiquidCrystal5beginEhhh+0x4c>
    211e:	61 e0       	ldi	r22, 0x01	; 1
    2120:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <pinMode>
    2124:	61 e0       	ldi	r22, 0x01	; 1
    2126:	8e 81       	ldd	r24, Y+6	; 0x06
    2128:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <pinMode>
    212c:	7e 01       	movw	r14, r28
    212e:	87 e0       	ldi	r24, 0x07	; 7
    2130:	e8 0e       	add	r14, r24
    2132:	f1 1c       	adc	r15, r1
    2134:	00 e0       	ldi	r16, 0x00	; 0
    2136:	10 e0       	ldi	r17, 0x00	; 0
    2138:	8f 85       	ldd	r24, Y+15	; 0x0f
    213a:	84 fd       	sbrc	r24, 4
    213c:	03 c0       	rjmp	.+6      	; 0x2144 <_ZN13LiquidCrystal5beginEhhh+0x6c>
    213e:	84 e0       	ldi	r24, 0x04	; 4
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <_ZN13LiquidCrystal5beginEhhh+0x70>
    2144:	88 e0       	ldi	r24, 0x08	; 8
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	08 17       	cp	r16, r24
    214a:	19 07       	cpc	r17, r25
    214c:	4c f4       	brge	.+18     	; 0x2160 <_ZN13LiquidCrystal5beginEhhh+0x88>
    214e:	61 e0       	ldi	r22, 0x01	; 1
    2150:	f7 01       	movw	r30, r14
    2152:	81 91       	ld	r24, Z+
    2154:	7f 01       	movw	r14, r30
    2156:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <pinMode>
    215a:	0f 5f       	subi	r16, 0xFF	; 255
    215c:	1f 4f       	sbci	r17, 0xFF	; 255
    215e:	ec cf       	rjmp	.-40     	; 0x2138 <_ZN13LiquidCrystal5beginEhhh+0x60>
    2160:	80 e5       	ldi	r24, 0x50	; 80
    2162:	93 ec       	ldi	r25, 0xC3	; 195
    2164:	0e 94 44 0c 	call	0x1888	; 0x1888 <delayMicroseconds>
    2168:	60 e0       	ldi	r22, 0x00	; 0
    216a:	8c 81       	ldd	r24, Y+4	; 0x04
    216c:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <digitalWrite>
    2170:	60 e0       	ldi	r22, 0x00	; 0
    2172:	8e 81       	ldd	r24, Y+6	; 0x06
    2174:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <digitalWrite>
    2178:	8d 81       	ldd	r24, Y+5	; 0x05
    217a:	8f 3f       	cpi	r24, 0xFF	; 255
    217c:	19 f0       	breq	.+6      	; 0x2184 <_ZN13LiquidCrystal5beginEhhh+0xac>
    217e:	60 e0       	ldi	r22, 0x00	; 0
    2180:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <digitalWrite>
    2184:	6f 85       	ldd	r22, Y+15	; 0x0f
    2186:	64 fd       	sbrc	r22, 4
    2188:	1d c0       	rjmp	.+58     	; 0x21c4 <_ZN13LiquidCrystal5beginEhhh+0xec>
    218a:	63 e0       	ldi	r22, 0x03	; 3
    218c:	ce 01       	movw	r24, r28
    218e:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <_ZN13LiquidCrystal10write4bitsEh>
    2192:	84 e9       	ldi	r24, 0x94	; 148
    2194:	91 e1       	ldi	r25, 0x11	; 17
    2196:	0e 94 44 0c 	call	0x1888	; 0x1888 <delayMicroseconds>
    219a:	63 e0       	ldi	r22, 0x03	; 3
    219c:	ce 01       	movw	r24, r28
    219e:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <_ZN13LiquidCrystal10write4bitsEh>
    21a2:	84 e9       	ldi	r24, 0x94	; 148
    21a4:	91 e1       	ldi	r25, 0x11	; 17
    21a6:	0e 94 44 0c 	call	0x1888	; 0x1888 <delayMicroseconds>
    21aa:	63 e0       	ldi	r22, 0x03	; 3
    21ac:	ce 01       	movw	r24, r28
    21ae:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <_ZN13LiquidCrystal10write4bitsEh>
    21b2:	86 e9       	ldi	r24, 0x96	; 150
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	0e 94 44 0c 	call	0x1888	; 0x1888 <delayMicroseconds>
    21ba:	62 e0       	ldi	r22, 0x02	; 2
    21bc:	ce 01       	movw	r24, r28
    21be:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <_ZN13LiquidCrystal10write4bitsEh>
    21c2:	16 c0       	rjmp	.+44     	; 0x21f0 <_ZN13LiquidCrystal5beginEhhh+0x118>
    21c4:	60 62       	ori	r22, 0x20	; 32
    21c6:	ce 01       	movw	r24, r28
    21c8:	0e 94 47 10 	call	0x208e	; 0x208e <_ZN13LiquidCrystal7commandEh>
    21cc:	84 e9       	ldi	r24, 0x94	; 148
    21ce:	91 e1       	ldi	r25, 0x11	; 17
    21d0:	0e 94 44 0c 	call	0x1888	; 0x1888 <delayMicroseconds>
    21d4:	6f 85       	ldd	r22, Y+15	; 0x0f
    21d6:	60 62       	ori	r22, 0x20	; 32
    21d8:	ce 01       	movw	r24, r28
    21da:	0e 94 47 10 	call	0x208e	; 0x208e <_ZN13LiquidCrystal7commandEh>
    21de:	86 e9       	ldi	r24, 0x96	; 150
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	0e 94 44 0c 	call	0x1888	; 0x1888 <delayMicroseconds>
    21e6:	6f 85       	ldd	r22, Y+15	; 0x0f
    21e8:	60 62       	ori	r22, 0x20	; 32
    21ea:	ce 01       	movw	r24, r28
    21ec:	0e 94 47 10 	call	0x208e	; 0x208e <_ZN13LiquidCrystal7commandEh>
    21f0:	6f 85       	ldd	r22, Y+15	; 0x0f
    21f2:	60 62       	ori	r22, 0x20	; 32
    21f4:	ce 01       	movw	r24, r28
    21f6:	0e 94 47 10 	call	0x208e	; 0x208e <_ZN13LiquidCrystal7commandEh>
    21fa:	84 e0       	ldi	r24, 0x04	; 4
    21fc:	88 8b       	std	Y+16, r24	; 0x10
    21fe:	ce 01       	movw	r24, r28
    2200:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN13LiquidCrystal7displayEv>
    2204:	ce 01       	movw	r24, r28
    2206:	0e 94 4a 10 	call	0x2094	; 0x2094 <_ZN13LiquidCrystal5clearEv>
    220a:	82 e0       	ldi	r24, 0x02	; 2
    220c:	89 8b       	std	Y+17, r24	; 0x11
    220e:	66 e0       	ldi	r22, 0x06	; 6
    2210:	ce 01       	movw	r24, r28
    2212:	df 91       	pop	r29
    2214:	cf 91       	pop	r28
    2216:	1f 91       	pop	r17
    2218:	0f 91       	pop	r16
    221a:	ff 90       	pop	r15
    221c:	ef 90       	pop	r14
    221e:	0c 94 47 10 	jmp	0x208e	; 0x208e <_ZN13LiquidCrystal7commandEh>

00002222 <_ZN13LiquidCrystalC1Ehhhhhh>:
    2222:	cf 92       	push	r12
    2224:	ef 92       	push	r14
    2226:	0f 93       	push	r16
    2228:	fc 01       	movw	r30, r24
    222a:	13 82       	std	Z+3, r1	; 0x03
    222c:	12 82       	std	Z+2, r1	; 0x02
    222e:	8d e6       	ldi	r24, 0x6D	; 109
    2230:	92 e0       	ldi	r25, 0x02	; 2
    2232:	91 83       	std	Z+1, r25	; 0x01
    2234:	80 83       	st	Z, r24
    2236:	64 83       	std	Z+4, r22	; 0x04
    2238:	8f ef       	ldi	r24, 0xFF	; 255
    223a:	85 83       	std	Z+5, r24	; 0x05
    223c:	46 83       	std	Z+6, r20	; 0x06
    223e:	27 83       	std	Z+7, r18	; 0x07
    2240:	00 87       	std	Z+8, r16	; 0x08
    2242:	e1 86       	std	Z+9, r14	; 0x09
    2244:	c2 86       	std	Z+10, r12	; 0x0a
    2246:	13 86       	std	Z+11, r1	; 0x0b
    2248:	14 86       	std	Z+12, r1	; 0x0c
    224a:	15 86       	std	Z+13, r1	; 0x0d
    224c:	16 86       	std	Z+14, r1	; 0x0e
    224e:	17 86       	std	Z+15, r1	; 0x0f
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	41 e0       	ldi	r20, 0x01	; 1
    2254:	60 e1       	ldi	r22, 0x10	; 16
    2256:	cf 01       	movw	r24, r30
    2258:	0f 91       	pop	r16
    225a:	ef 90       	pop	r14
    225c:	cf 90       	pop	r12
    225e:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <_ZN13LiquidCrystal5beginEhhh>

00002262 <_ZN13LiquidCrystal10createCharEhPh>:
}

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal::createChar(uint8_t location, uint8_t charmap[]) {
    2262:	ef 92       	push	r14
    2264:	ff 92       	push	r15
    2266:	0f 93       	push	r16
    2268:	1f 93       	push	r17
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	8c 01       	movw	r16, r24
    2270:	7a 01       	movw	r14, r20
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
    2272:	67 70       	andi	r22, 0x07	; 7
    2274:	88 e0       	ldi	r24, 0x08	; 8
    2276:	68 9f       	mul	r22, r24
    2278:	b0 01       	movw	r22, r0
    227a:	11 24       	eor	r1, r1
    227c:	60 64       	ori	r22, 0x40	; 64
    227e:	c8 01       	movw	r24, r16
    2280:	0e 94 47 10 	call	0x208e	; 0x208e <_ZN13LiquidCrystal7commandEh>
    2284:	e7 01       	movw	r28, r14
    2286:	a8 e0       	ldi	r26, 0x08	; 8
    2288:	ea 0e       	add	r14, r26
    228a:	f1 1c       	adc	r15, r1
  for (int i=0; i<8; i++) {
    write(charmap[i]);
    228c:	69 91       	ld	r22, Y+
    228e:	d8 01       	movw	r26, r16
    2290:	ed 91       	ld	r30, X+
    2292:	fc 91       	ld	r31, X
    2294:	01 90       	ld	r0, Z+
    2296:	f0 81       	ld	r31, Z
    2298:	e0 2d       	mov	r30, r0
    229a:	c8 01       	movw	r24, r16
    229c:	09 95       	icall
// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal::createChar(uint8_t location, uint8_t charmap[]) {
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    229e:	ce 15       	cp	r28, r14
    22a0:	df 05       	cpc	r29, r15
    22a2:	a1 f7       	brne	.-24     	; 0x228c <_ZN13LiquidCrystal10createCharEhPh+0x2a>
    write(charmap[i]);
  }
}
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	1f 91       	pop	r17
    22aa:	0f 91       	pop	r16
    22ac:	ff 90       	pop	r15
    22ae:	ef 90       	pop	r14
    22b0:	08 95       	ret

000022b2 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    22b2:	41 e0       	ldi	r20, 0x01	; 1
    22b4:	0e 94 1e 10 	call	0x203c	; 0x203c <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	08 95       	ret

000022be <_ZN7OneWire5resetEv>:
   ROM_NO[0] = family_code;
   for (uint8_t i = 1; i < 8; i++)
      ROM_NO[i] = 0;
   LastDiscrepancy = 64;
   LastFamilyDiscrepancy = 0;
   LastDeviceFlag = false;
    22be:	ff 92       	push	r15
    22c0:	0f 93       	push	r16
    22c2:	1f 93       	push	r17
    22c4:	cf 93       	push	r28
    22c6:	df 93       	push	r29
    22c8:	fc 01       	movw	r30, r24
    22ca:	f0 80       	ld	r15, Z
    22cc:	c1 81       	ldd	r28, Z+1	; 0x01
    22ce:	d2 81       	ldd	r29, Z+2	; 0x02
    22d0:	f8 94       	cli
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
    22d4:	0f 2d       	mov	r16, r15
    22d6:	00 95       	com	r16
    22d8:	80 23       	and	r24, r16
    22da:	89 83       	std	Y+1, r24	; 0x01
    22dc:	78 94       	sei
    22de:	1d e7       	ldi	r17, 0x7D	; 125
    22e0:	11 50       	subi	r17, 0x01	; 1
    22e2:	29 f1       	breq	.+74     	; 0x232e <_ZN7OneWire5resetEv+0x70>
    22e4:	82 e0       	ldi	r24, 0x02	; 2
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	0e 94 44 0c 	call	0x1888	; 0x1888 <delayMicroseconds>
    22ec:	88 81       	ld	r24, Y
    22ee:	8f 21       	and	r24, r15
    22f0:	b9 f3       	breq	.-18     	; 0x22e0 <_ZN7OneWire5resetEv+0x22>
    22f2:	f8 94       	cli
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	80 23       	and	r24, r16
    22f8:	8a 83       	std	Y+2, r24	; 0x02
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
    22fc:	8f 29       	or	r24, r15
    22fe:	89 83       	std	Y+1, r24	; 0x01
    2300:	78 94       	sei
    2302:	80 ee       	ldi	r24, 0xE0	; 224
    2304:	91 e0       	ldi	r25, 0x01	; 1
    2306:	0e 94 44 0c 	call	0x1888	; 0x1888 <delayMicroseconds>
    230a:	f8 94       	cli
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	08 23       	and	r16, r24
    2310:	09 83       	std	Y+1, r16	; 0x01
    2312:	86 e4       	ldi	r24, 0x46	; 70
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	0e 94 44 0c 	call	0x1888	; 0x1888 <delayMicroseconds>
    231a:	88 81       	ld	r24, Y
    231c:	f8 22       	and	r15, r24
    231e:	11 e0       	ldi	r17, 0x01	; 1
    2320:	09 f0       	breq	.+2      	; 0x2324 <_ZN7OneWire5resetEv+0x66>
    2322:	10 e0       	ldi	r17, 0x00	; 0
    2324:	78 94       	sei
    2326:	8a e9       	ldi	r24, 0x9A	; 154
    2328:	91 e0       	ldi	r25, 0x01	; 1
    232a:	0e 94 44 0c 	call	0x1888	; 0x1888 <delayMicroseconds>
    232e:	81 2f       	mov	r24, r17
    2330:	df 91       	pop	r29
    2332:	cf 91       	pop	r28
    2334:	1f 91       	pop	r17
    2336:	0f 91       	pop	r16
    2338:	ff 90       	pop	r15
    233a:	08 95       	ret

0000233c <_ZN7OneWire9write_bitEh>:
    233c:	1f 93       	push	r17
    233e:	cf 93       	push	r28
    2340:	df 93       	push	r29
    2342:	fc 01       	movw	r30, r24
    2344:	10 81       	ld	r17, Z
    2346:	c1 81       	ldd	r28, Z+1	; 0x01
    2348:	d2 81       	ldd	r29, Z+2	; 0x02
    234a:	81 2f       	mov	r24, r17
    234c:	80 95       	com	r24
    234e:	60 ff       	sbrs	r22, 0
    2350:	12 c0       	rjmp	.+36     	; 0x2376 <_ZN7OneWire9write_bitEh+0x3a>
    2352:	f8 94       	cli
    2354:	9a 81       	ldd	r25, Y+2	; 0x02
    2356:	89 23       	and	r24, r25
    2358:	8a 83       	std	Y+2, r24	; 0x02
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	81 2b       	or	r24, r17
    235e:	89 83       	std	Y+1, r24	; 0x01
    2360:	8a e0       	ldi	r24, 0x0A	; 10
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	0e 94 44 0c 	call	0x1888	; 0x1888 <delayMicroseconds>
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	18 2b       	or	r17, r24
    236c:	1a 83       	std	Y+2, r17	; 0x02
    236e:	78 94       	sei
    2370:	87 e3       	ldi	r24, 0x37	; 55
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	11 c0       	rjmp	.+34     	; 0x2398 <_ZN7OneWire9write_bitEh+0x5c>
    2376:	f8 94       	cli
    2378:	9a 81       	ldd	r25, Y+2	; 0x02
    237a:	89 23       	and	r24, r25
    237c:	8a 83       	std	Y+2, r24	; 0x02
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	81 2b       	or	r24, r17
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	81 e4       	ldi	r24, 0x41	; 65
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	0e 94 44 0c 	call	0x1888	; 0x1888 <delayMicroseconds>
    238c:	8a 81       	ldd	r24, Y+2	; 0x02
    238e:	18 2b       	or	r17, r24
    2390:	1a 83       	std	Y+2, r17	; 0x02
    2392:	78 94       	sei
    2394:	85 e0       	ldi	r24, 0x05	; 5
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	df 91       	pop	r29
    239a:	cf 91       	pop	r28
    239c:	1f 91       	pop	r17
    239e:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <delayMicroseconds>

000023a2 <_ZN7OneWire8read_bitEv>:
    23a2:	0f 93       	push	r16
    23a4:	1f 93       	push	r17
    23a6:	cf 93       	push	r28
    23a8:	df 93       	push	r29
    23aa:	fc 01       	movw	r30, r24
    23ac:	00 81       	ld	r16, Z
    23ae:	c1 81       	ldd	r28, Z+1	; 0x01
    23b0:	d2 81       	ldd	r29, Z+2	; 0x02
    23b2:	f8 94       	cli
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	80 2b       	or	r24, r16
    23b8:	89 83       	std	Y+1, r24	; 0x01
    23ba:	8a 81       	ldd	r24, Y+2	; 0x02
    23bc:	10 2f       	mov	r17, r16
    23be:	10 95       	com	r17
    23c0:	81 23       	and	r24, r17
    23c2:	8a 83       	std	Y+2, r24	; 0x02
    23c4:	83 e0       	ldi	r24, 0x03	; 3
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	0e 94 44 0c 	call	0x1888	; 0x1888 <delayMicroseconds>
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	18 23       	and	r17, r24
    23d0:	19 83       	std	Y+1, r17	; 0x01
    23d2:	8a e0       	ldi	r24, 0x0A	; 10
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	0e 94 44 0c 	call	0x1888	; 0x1888 <delayMicroseconds>
    23da:	c8 81       	ld	r28, Y
    23dc:	78 94       	sei
    23de:	85 e3       	ldi	r24, 0x35	; 53
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	0e 94 44 0c 	call	0x1888	; 0x1888 <delayMicroseconds>
    23e6:	c0 23       	and	r28, r16
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	09 f4       	brne	.+2      	; 0x23ee <_ZN7OneWire8read_bitEv+0x4c>
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	1f 91       	pop	r17
    23f4:	0f 91       	pop	r16
    23f6:	08 95       	ret

000023f8 <_ZN7OneWire5writeEhh>:
    23f8:	df 92       	push	r13
    23fa:	ef 92       	push	r14
    23fc:	ff 92       	push	r15
    23fe:	0f 93       	push	r16
    2400:	1f 93       	push	r17
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    2406:	ec 01       	movw	r28, r24
    2408:	d6 2e       	mov	r13, r22
    240a:	e4 2e       	mov	r14, r20
    240c:	08 e0       	ldi	r16, 0x08	; 8
    240e:	10 e0       	ldi	r17, 0x00	; 0
    2410:	ff 24       	eor	r15, r15
    2412:	f3 94       	inc	r15
    2414:	61 e0       	ldi	r22, 0x01	; 1
    2416:	8d 2d       	mov	r24, r13
    2418:	8f 21       	and	r24, r15
    241a:	09 f4       	brne	.+2      	; 0x241e <_ZN7OneWire5writeEhh+0x26>
    241c:	60 e0       	ldi	r22, 0x00	; 0
    241e:	ce 01       	movw	r24, r28
    2420:	0e 94 9e 11 	call	0x233c	; 0x233c <_ZN7OneWire9write_bitEh>
    2424:	ff 0c       	add	r15, r15
    2426:	01 50       	subi	r16, 0x01	; 1
    2428:	11 09       	sbc	r17, r1
    242a:	a1 f7       	brne	.-24     	; 0x2414 <_ZN7OneWire5writeEhh+0x1c>
    242c:	e1 10       	cpse	r14, r1
    242e:	10 c0       	rjmp	.+32     	; 0x2450 <_ZN7OneWire5writeEhh+0x58>
    2430:	f8 94       	cli
    2432:	e9 81       	ldd	r30, Y+1	; 0x01
    2434:	fa 81       	ldd	r31, Y+2	; 0x02
    2436:	91 81       	ldd	r25, Z+1	; 0x01
    2438:	88 81       	ld	r24, Y
    243a:	80 95       	com	r24
    243c:	89 23       	and	r24, r25
    243e:	81 83       	std	Z+1, r24	; 0x01
    2440:	e9 81       	ldd	r30, Y+1	; 0x01
    2442:	fa 81       	ldd	r31, Y+2	; 0x02
    2444:	92 81       	ldd	r25, Z+2	; 0x02
    2446:	88 81       	ld	r24, Y
    2448:	80 95       	com	r24
    244a:	89 23       	and	r24, r25
    244c:	82 83       	std	Z+2, r24	; 0x02
    244e:	78 94       	sei
    2450:	df 91       	pop	r29
    2452:	cf 91       	pop	r28
    2454:	1f 91       	pop	r17
    2456:	0f 91       	pop	r16
    2458:	ff 90       	pop	r15
    245a:	ef 90       	pop	r14
    245c:	df 90       	pop	r13
    245e:	08 95       	ret

00002460 <_ZN7OneWire4readEv>:
    2460:	ef 92       	push	r14
    2462:	ff 92       	push	r15
    2464:	0f 93       	push	r16
    2466:	1f 93       	push	r17
    2468:	cf 93       	push	r28
    246a:	df 93       	push	r29
    246c:	7c 01       	movw	r14, r24
    246e:	08 e0       	ldi	r16, 0x08	; 8
    2470:	10 e0       	ldi	r17, 0x00	; 0
    2472:	c0 e0       	ldi	r28, 0x00	; 0
    2474:	d1 e0       	ldi	r29, 0x01	; 1
    2476:	c7 01       	movw	r24, r14
    2478:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <_ZN7OneWire8read_bitEv>
    247c:	81 11       	cpse	r24, r1
    247e:	cd 2b       	or	r28, r29
    2480:	dd 0f       	add	r29, r29
    2482:	01 50       	subi	r16, 0x01	; 1
    2484:	11 09       	sbc	r17, r1
    2486:	b9 f7       	brne	.-18     	; 0x2476 <_ZN7OneWire4readEv+0x16>
    2488:	8c 2f       	mov	r24, r28
    248a:	df 91       	pop	r29
    248c:	cf 91       	pop	r28
    248e:	1f 91       	pop	r17
    2490:	0f 91       	pop	r16
    2492:	ff 90       	pop	r15
    2494:	ef 90       	pop	r14
    2496:	08 95       	ret

00002498 <_ZN7OneWire6selectEPKh>:
    2498:	ef 92       	push	r14
    249a:	ff 92       	push	r15
    249c:	0f 93       	push	r16
    249e:	1f 93       	push	r17
    24a0:	cf 93       	push	r28
    24a2:	df 93       	push	r29
    24a4:	8c 01       	movw	r16, r24
    24a6:	7b 01       	movw	r14, r22
    24a8:	40 e0       	ldi	r20, 0x00	; 0
    24aa:	65 e5       	ldi	r22, 0x55	; 85
    24ac:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <_ZN7OneWire5writeEhh>
    24b0:	e7 01       	movw	r28, r14
    24b2:	88 e0       	ldi	r24, 0x08	; 8
    24b4:	e8 0e       	add	r14, r24
    24b6:	f1 1c       	adc	r15, r1
    24b8:	69 91       	ld	r22, Y+
    24ba:	40 e0       	ldi	r20, 0x00	; 0
    24bc:	c8 01       	movw	r24, r16
    24be:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <_ZN7OneWire5writeEhh>
    24c2:	ce 15       	cp	r28, r14
    24c4:	df 05       	cpc	r29, r15
    24c6:	c1 f7       	brne	.-16     	; 0x24b8 <_ZN7OneWire6selectEPKh+0x20>
    24c8:	df 91       	pop	r29
    24ca:	cf 91       	pop	r28
    24cc:	1f 91       	pop	r17
    24ce:	0f 91       	pop	r16
    24d0:	ff 90       	pop	r15
    24d2:	ef 90       	pop	r14
    24d4:	08 95       	ret

000024d6 <_ZN7OneWire4skipEv>:
    24d6:	40 e0       	ldi	r20, 0x00	; 0
    24d8:	6c ec       	ldi	r22, 0xCC	; 204
    24da:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <_ZN7OneWire5writeEhh>

000024de <_ZN7OneWire12reset_searchEv>:
    24de:	fc 01       	movw	r30, r24
    24e0:	13 86       	std	Z+11, r1	; 0x0b
    24e2:	15 86       	std	Z+13, r1	; 0x0d
    24e4:	14 86       	std	Z+12, r1	; 0x0c
    24e6:	dc 01       	movw	r26, r24
    24e8:	1b 96       	adiw	r26, 0x0b	; 11
    24ea:	33 96       	adiw	r30, 0x03	; 3
    24ec:	1e 92       	st	-X, r1
    24ee:	ae 17       	cp	r26, r30
    24f0:	bf 07       	cpc	r27, r31
    24f2:	e1 f7       	brne	.-8      	; 0x24ec <_ZN7OneWire12reset_searchEv+0xe>
    24f4:	08 95       	ret

000024f6 <_ZN7OneWire5beginEh>:
    24f6:	1f 93       	push	r17
    24f8:	cf 93       	push	r28
    24fa:	df 93       	push	r29
    24fc:	ec 01       	movw	r28, r24
    24fe:	16 2f       	mov	r17, r22
    2500:	60 e0       	ldi	r22, 0x00	; 0
    2502:	81 2f       	mov	r24, r17
    2504:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <pinMode>
    2508:	61 2f       	mov	r22, r17
    250a:	70 e0       	ldi	r23, 0x00	; 0
    250c:	fb 01       	movw	r30, r22
    250e:	e4 58       	subi	r30, 0x84	; 132
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	e4 91       	lpm	r30, Z
    2514:	e8 83       	st	Y, r30
    2516:	fb 01       	movw	r30, r22
    2518:	e0 57       	subi	r30, 0x70	; 112
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	e4 91       	lpm	r30, Z
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	ee 0f       	add	r30, r30
    2522:	ff 1f       	adc	r31, r31
    2524:	ec 55       	subi	r30, 0x5C	; 92
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	85 91       	lpm	r24, Z+
    252a:	94 91       	lpm	r25, Z
    252c:	9a 83       	std	Y+2, r25	; 0x02
    252e:	89 83       	std	Y+1, r24	; 0x01
    2530:	ce 01       	movw	r24, r28
    2532:	df 91       	pop	r29
    2534:	cf 91       	pop	r28
    2536:	1f 91       	pop	r17
    2538:	0c 94 6f 12 	jmp	0x24de	; 0x24de <_ZN7OneWire12reset_searchEv>

0000253c <_ZN7OneWire6searchEPhb>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
bool OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
    253c:	bf 92       	push	r11
    253e:	cf 92       	push	r12
    2540:	df 92       	push	r13
    2542:	ef 92       	push	r14
    2544:	ff 92       	push	r15
    2546:	0f 93       	push	r16
    2548:	1f 93       	push	r17
    254a:	cf 93       	push	r28
    254c:	df 93       	push	r29
    254e:	ec 01       	movw	r28, r24
    2550:	6b 01       	movw	r12, r22
    2552:	14 2f       	mov	r17, r20
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = false;

   // if the last call was not the last one
   if (!LastDeviceFlag) {
    2554:	8d 85       	ldd	r24, Y+13	; 0x0d
    2556:	81 11       	cpse	r24, r1
    2558:	05 c0       	rjmp	.+10     	; 0x2564 <_ZN7OneWire6searchEPhb+0x28>
      // 1-Wire reset
      if (!reset()) {
    255a:	ce 01       	movw	r24, r28
    255c:	0e 94 5f 11 	call	0x22be	; 0x22be <_ZN7OneWire5resetEv>
    2560:	81 11       	cpse	r24, r1
    2562:	05 c0       	rjmp	.+10     	; 0x256e <_ZN7OneWire6searchEPhb+0x32>
         // reset the search
         LastDiscrepancy = 0;
    2564:	1b 86       	std	Y+11, r1	; 0x0b
         LastDeviceFlag = false;
    2566:	1d 86       	std	Y+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
    2568:	1c 86       	std	Y+12, r1	; 0x0c
         return false;
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	64 c0       	rjmp	.+200    	; 0x2636 <_ZN7OneWire6searchEPhb+0xfa>
      }

      // issue the search command
      if (search_mode == true) {
        write(0xF0);   // NORMAL SEARCH
    256e:	40 e0       	ldi	r20, 0x00	; 0
         LastFamilyDiscrepancy = 0;
         return false;
      }

      // issue the search command
      if (search_mode == true) {
    2570:	11 23       	and	r17, r17
    2572:	11 f0       	breq	.+4      	; 0x2578 <_ZN7OneWire6searchEPhb+0x3c>
        write(0xF0);   // NORMAL SEARCH
    2574:	60 ef       	ldi	r22, 0xF0	; 240
    2576:	01 c0       	rjmp	.+2      	; 0x257a <_ZN7OneWire6searchEPhb+0x3e>
      } else {
        write(0xEC);   // CONDITIONAL SEARCH
    2578:	6c ee       	ldi	r22, 0xEC	; 236
    257a:	ce 01       	movw	r24, r28
    257c:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <_ZN7OneWire5writeEhh>
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
bool OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
    2580:	01 e0       	ldi	r16, 0x01	; 1
    2582:	e1 2c       	mov	r14, r1
    2584:	b1 2c       	mov	r11, r1
    2586:	11 e0       	ldi	r17, 0x01	; 1

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
    2588:	ce 01       	movw	r24, r28
    258a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <_ZN7OneWire8read_bitEv>
    258e:	f8 2e       	mov	r15, r24
         cmp_id_bit = read_bit();
    2590:	ce 01       	movw	r24, r28
    2592:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1)) {
    2596:	91 e0       	ldi	r25, 0x01	; 1
    2598:	f9 12       	cpse	r15, r25
    259a:	03 c0       	rjmp	.+6      	; 0x25a2 <_ZN7OneWire6searchEPhb+0x66>
    259c:	81 30       	cpi	r24, 0x01	; 1
    259e:	b1 f4       	brne	.+44     	; 0x25cc <_ZN7OneWire6searchEPhb+0x90>
    25a0:	34 c0       	rjmp	.+104    	; 0x260a <_ZN7OneWire6searchEPhb+0xce>
    25a2:	2e 2d       	mov	r18, r14
    25a4:	30 e0       	ldi	r19, 0x00	; 0
            break;
         } else {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit) {
    25a6:	f8 12       	cpse	r15, r24
    25a8:	1b c0       	rjmp	.+54     	; 0x25e0 <_ZN7OneWire6searchEPhb+0xa4>
               search_direction = id_bit;  // bit write value for search
            } else {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy) {
    25aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    25ac:	18 17       	cp	r17, r24
    25ae:	38 f4       	brcc	.+14     	; 0x25be <_ZN7OneWire6searchEPhb+0x82>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    25b0:	fe 01       	movw	r30, r28
    25b2:	e2 0f       	add	r30, r18
    25b4:	f3 1f       	adc	r31, r19
    25b6:	83 81       	ldd	r24, Z+3	; 0x03
    25b8:	80 23       	and	r24, r16
    25ba:	41 f4       	brne	.+16     	; 0x25cc <_ZN7OneWire6searchEPhb+0x90>
    25bc:	02 c0       	rjmp	.+4      	; 0x25c2 <_ZN7OneWire6searchEPhb+0x86>
               } else {
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    25be:	18 17       	cp	r17, r24
    25c0:	29 f0       	breq	.+10     	; 0x25cc <_ZN7OneWire6searchEPhb+0x90>
    25c2:	f1 2c       	mov	r15, r1
               // if 0 was picked then record its position in LastZero
               if (search_direction == 0) {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    25c4:	19 30       	cpi	r17, 0x09	; 9
    25c6:	58 f4       	brcc	.+22     	; 0x25de <_ZN7OneWire6searchEPhb+0xa2>
                     LastFamilyDiscrepancy = last_zero;
    25c8:	1c 87       	std	Y+12, r17	; 0x0c
    25ca:	09 c0       	rjmp	.+18     	; 0x25de <_ZN7OneWire6searchEPhb+0xa2>
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    25cc:	fe 01       	movw	r30, r28
    25ce:	ee 0d       	add	r30, r14
    25d0:	f1 1d       	adc	r31, r1
    25d2:	83 81       	ldd	r24, Z+3	; 0x03
    25d4:	80 2b       	or	r24, r16
    25d6:	83 83       	std	Z+3, r24	; 0x03
    25d8:	ff 24       	eor	r15, r15
    25da:	f3 94       	inc	r15
    25dc:	09 c0       	rjmp	.+18     	; 0x25f0 <_ZN7OneWire6searchEPhb+0xb4>
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
bool OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
    25de:	b1 2e       	mov	r11, r17
            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    25e0:	fe 01       	movw	r30, r28
    25e2:	e2 0f       	add	r30, r18
    25e4:	f3 1f       	adc	r31, r19
    25e6:	93 81       	ldd	r25, Z+3	; 0x03
    25e8:	80 2f       	mov	r24, r16
    25ea:	80 95       	com	r24
    25ec:	89 23       	and	r24, r25
    25ee:	83 83       	std	Z+3, r24	; 0x03

            // serial number search direction write bit
            write_bit(search_direction);
    25f0:	6f 2d       	mov	r22, r15
    25f2:	ce 01       	movw	r24, r28
    25f4:	0e 94 9e 11 	call	0x233c	; 0x233c <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    25f8:	1f 5f       	subi	r17, 0xFF	; 255
            rom_byte_mask <<= 1;
    25fa:	00 0f       	add	r16, r16

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0) {
    25fc:	11 f4       	brne	.+4      	; 0x2602 <_ZN7OneWire6searchEPhb+0xc6>
                rom_byte_number++;
    25fe:	e3 94       	inc	r14
                rom_byte_mask = 1;
    2600:	01 e0       	ldi	r16, 0x01	; 1
            }
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
    2602:	87 e0       	ldi	r24, 0x07	; 7
    2604:	8e 15       	cp	r24, r14
    2606:	08 f0       	brcs	.+2      	; 0x260a <_ZN7OneWire6searchEPhb+0xce>
    2608:	bf cf       	rjmp	.-130    	; 0x2588 <_ZN7OneWire6searchEPhb+0x4c>

      // if the search was successful then
      if (!(id_bit_number < 65)) {
    260a:	11 34       	cpi	r17, 0x41	; 65
    260c:	08 f4       	brcc	.+2      	; 0x2610 <_ZN7OneWire6searchEPhb+0xd4>
    260e:	aa cf       	rjmp	.-172    	; 0x2564 <_ZN7OneWire6searchEPhb+0x28>
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    2610:	bb 86       	std	Y+11, r11	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0) {
    2612:	b1 10       	cpse	r11, r1
    2614:	02 c0       	rjmp	.+4      	; 0x261a <_ZN7OneWire6searchEPhb+0xde>
            LastDeviceFlag = true;
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	8d 87       	std	Y+13, r24	; 0x0d
         search_result = true;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0]) {
    261a:	8b 81       	ldd	r24, Y+3	; 0x03
    261c:	88 23       	and	r24, r24
    261e:	09 f4       	brne	.+2      	; 0x2622 <_ZN7OneWire6searchEPhb+0xe6>
    2620:	a1 cf       	rjmp	.-190    	; 0x2564 <_ZN7OneWire6searchEPhb+0x28>
    2622:	de 01       	movw	r26, r28
    2624:	13 96       	adiw	r26, 0x03	; 3
    2626:	f6 01       	movw	r30, r12
    2628:	2b 96       	adiw	r28, 0x0b	; 11
      LastDiscrepancy = 0;
      LastDeviceFlag = false;
      LastFamilyDiscrepancy = 0;
      search_result = false;
   } else {
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    262a:	8d 91       	ld	r24, X+
    262c:	81 93       	st	Z+, r24
    262e:	ca 17       	cp	r28, r26
    2630:	db 07       	cpc	r29, r27
    2632:	d9 f7       	brne	.-10     	; 0x262a <_ZN7OneWire6searchEPhb+0xee>
    2634:	81 e0       	ldi	r24, 0x01	; 1
   }
   return search_result;
  }
    2636:	df 91       	pop	r29
    2638:	cf 91       	pop	r28
    263a:	1f 91       	pop	r17
    263c:	0f 91       	pop	r16
    263e:	ff 90       	pop	r15
    2640:	ef 90       	pop	r14
    2642:	df 90       	pop	r13
    2644:	cf 90       	pop	r12
    2646:	bf 90       	pop	r11
    2648:	08 95       	ret

0000264a <_ZN7OneWire4crc8EPKhh>:
};

// Compute a Dallas Semiconductor 8 bit CRC. These show up in the ROM
// and the registers.  (Use tiny 2x16 entry CRC table)
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
    264a:	dc 01       	movw	r26, r24
	uint8_t crc = 0;
    264c:	80 e0       	ldi	r24, 0x00	; 0

	while (len--) {
    264e:	61 50       	subi	r22, 0x01	; 1
    2650:	98 f0       	brcs	.+38     	; 0x2678 <_ZN7OneWire4crc8EPKhh+0x2e>
		crc = *addr++ ^ crc;  // just re-using crc as intermediate
    2652:	2d 91       	ld	r18, X+
    2654:	98 2f       	mov	r25, r24
    2656:	92 27       	eor	r25, r18
		crc = pgm_read_byte(dscrc2x16_table + (crc & 0x0f)) ^
    2658:	e9 2f       	mov	r30, r25
    265a:	ef 70       	andi	r30, 0x0F	; 15
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	ee 53       	subi	r30, 0x3E	; 62
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	24 91       	lpm	r18, Z
		pgm_read_byte(dscrc2x16_table + 16 + ((crc >> 4) & 0x0f));
    2664:	92 95       	swap	r25
    2666:	9f 70       	andi	r25, 0x0F	; 15
    2668:	e9 2f       	mov	r30, r25
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	ee 52       	subi	r30, 0x2E	; 46
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	e4 91       	lpm	r30, Z
    2672:	82 2f       	mov	r24, r18
    2674:	8e 27       	eor	r24, r30
// and the registers.  (Use tiny 2x16 entry CRC table)
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    2676:	eb cf       	rjmp	.-42     	; 0x264e <_ZN7OneWire4crc8EPKhh+0x4>
		crc = pgm_read_byte(dscrc2x16_table + (crc & 0x0f)) ^
		pgm_read_byte(dscrc2x16_table + 16 + ((crc >> 4) & 0x0f));
	}

	return crc;
}
    2678:	08 95       	ret

0000267a <__vector_13>:
void (*TimerOne::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER1_OVF_vect)
{
    267a:	1f 92       	push	r1
    267c:	0f 92       	push	r0
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	0f 92       	push	r0
    2682:	11 24       	eor	r1, r1
    2684:	2f 93       	push	r18
    2686:	3f 93       	push	r19
    2688:	4f 93       	push	r20
    268a:	5f 93       	push	r21
    268c:	6f 93       	push	r22
    268e:	7f 93       	push	r23
    2690:	8f 93       	push	r24
    2692:	9f 93       	push	r25
    2694:	af 93       	push	r26
    2696:	bf 93       	push	r27
    2698:	ef 93       	push	r30
    269a:	ff 93       	push	r31
  Timer1.isrCallback();
    269c:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <_ZN8TimerOne11isrCallbackE>
    26a0:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <_ZN8TimerOne11isrCallbackE+0x1>
    26a4:	09 95       	icall
}
    26a6:	ff 91       	pop	r31
    26a8:	ef 91       	pop	r30
    26aa:	bf 91       	pop	r27
    26ac:	af 91       	pop	r26
    26ae:	9f 91       	pop	r25
    26b0:	8f 91       	pop	r24
    26b2:	7f 91       	pop	r23
    26b4:	6f 91       	pop	r22
    26b6:	5f 91       	pop	r21
    26b8:	4f 91       	pop	r20
    26ba:	3f 91       	pop	r19
    26bc:	2f 91       	pop	r18
    26be:	0f 90       	pop	r0
    26c0:	0f be       	out	0x3f, r0	; 63
    26c2:	0f 90       	pop	r0
    26c4:	1f 90       	pop	r1
    26c6:	18 95       	reti

000026c8 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    26c8:	08 95       	ret

000026ca <__unordsf2>:
    26ca:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fp_cmp>
    26ce:	88 0b       	sbc	r24, r24
    26d0:	99 0b       	sbc	r25, r25
    26d2:	08 95       	ret

000026d4 <__divmodhi4>:
    26d4:	97 fb       	bst	r25, 7
    26d6:	07 2e       	mov	r0, r23
    26d8:	16 f4       	brtc	.+4      	; 0x26de <__divmodhi4+0xa>
    26da:	00 94       	com	r0
    26dc:	07 d0       	rcall	.+14     	; 0x26ec <__divmodhi4_neg1>
    26de:	77 fd       	sbrc	r23, 7
    26e0:	09 d0       	rcall	.+18     	; 0x26f4 <__divmodhi4_neg2>
    26e2:	0e 94 a0 13 	call	0x2740	; 0x2740 <__udivmodhi4>
    26e6:	07 fc       	sbrc	r0, 7
    26e8:	05 d0       	rcall	.+10     	; 0x26f4 <__divmodhi4_neg2>
    26ea:	3e f4       	brtc	.+14     	; 0x26fa <__divmodhi4_exit>

000026ec <__divmodhi4_neg1>:
    26ec:	90 95       	com	r25
    26ee:	81 95       	neg	r24
    26f0:	9f 4f       	sbci	r25, 0xFF	; 255
    26f2:	08 95       	ret

000026f4 <__divmodhi4_neg2>:
    26f4:	70 95       	com	r23
    26f6:	61 95       	neg	r22
    26f8:	7f 4f       	sbci	r23, 0xFF	; 255

000026fa <__divmodhi4_exit>:
    26fa:	08 95       	ret

000026fc <__udivmodsi4>:
    26fc:	a1 e2       	ldi	r26, 0x21	; 33
    26fe:	1a 2e       	mov	r1, r26
    2700:	aa 1b       	sub	r26, r26
    2702:	bb 1b       	sub	r27, r27
    2704:	fd 01       	movw	r30, r26
    2706:	0d c0       	rjmp	.+26     	; 0x2722 <__udivmodsi4_ep>

00002708 <__udivmodsi4_loop>:
    2708:	aa 1f       	adc	r26, r26
    270a:	bb 1f       	adc	r27, r27
    270c:	ee 1f       	adc	r30, r30
    270e:	ff 1f       	adc	r31, r31
    2710:	a2 17       	cp	r26, r18
    2712:	b3 07       	cpc	r27, r19
    2714:	e4 07       	cpc	r30, r20
    2716:	f5 07       	cpc	r31, r21
    2718:	20 f0       	brcs	.+8      	; 0x2722 <__udivmodsi4_ep>
    271a:	a2 1b       	sub	r26, r18
    271c:	b3 0b       	sbc	r27, r19
    271e:	e4 0b       	sbc	r30, r20
    2720:	f5 0b       	sbc	r31, r21

00002722 <__udivmodsi4_ep>:
    2722:	66 1f       	adc	r22, r22
    2724:	77 1f       	adc	r23, r23
    2726:	88 1f       	adc	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	1a 94       	dec	r1
    272c:	69 f7       	brne	.-38     	; 0x2708 <__udivmodsi4_loop>
    272e:	60 95       	com	r22
    2730:	70 95       	com	r23
    2732:	80 95       	com	r24
    2734:	90 95       	com	r25
    2736:	9b 01       	movw	r18, r22
    2738:	ac 01       	movw	r20, r24
    273a:	bd 01       	movw	r22, r26
    273c:	cf 01       	movw	r24, r30
    273e:	08 95       	ret

00002740 <__udivmodhi4>:
    2740:	aa 1b       	sub	r26, r26
    2742:	bb 1b       	sub	r27, r27
    2744:	51 e1       	ldi	r21, 0x11	; 17
    2746:	07 c0       	rjmp	.+14     	; 0x2756 <__udivmodhi4_ep>

00002748 <__udivmodhi4_loop>:
    2748:	aa 1f       	adc	r26, r26
    274a:	bb 1f       	adc	r27, r27
    274c:	a6 17       	cp	r26, r22
    274e:	b7 07       	cpc	r27, r23
    2750:	10 f0       	brcs	.+4      	; 0x2756 <__udivmodhi4_ep>
    2752:	a6 1b       	sub	r26, r22
    2754:	b7 0b       	sbc	r27, r23

00002756 <__udivmodhi4_ep>:
    2756:	88 1f       	adc	r24, r24
    2758:	99 1f       	adc	r25, r25
    275a:	5a 95       	dec	r21
    275c:	a9 f7       	brne	.-22     	; 0x2748 <__udivmodhi4_loop>
    275e:	80 95       	com	r24
    2760:	90 95       	com	r25
    2762:	bc 01       	movw	r22, r24
    2764:	cd 01       	movw	r24, r26
    2766:	08 95       	ret

00002768 <__tablejump2__>:
    2768:	ee 0f       	add	r30, r30
    276a:	ff 1f       	adc	r31, r31
    276c:	05 90       	lpm	r0, Z+
    276e:	f4 91       	lpm	r31, Z
    2770:	e0 2d       	mov	r30, r0
    2772:	09 94       	ijmp

00002774 <_exit>:
    2774:	f8 94       	cli

00002776 <__stop_program>:
    2776:	ff cf       	rjmp	.-2      	; 0x2776 <__stop_program>
